
Zavrsni_Projekt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a640  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000468  0800a7d0  0800a7d0  0000b7d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ac38  0800ac38  0000c1d8  2**0
                  CONTENTS
  4 .ARM          00000008  0800ac38  0800ac38  0000bc38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ac40  0800ac40  0000c1d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ac40  0800ac40  0000bc40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800ac44  0800ac44  0000bc44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d8  20000000  0800ac48  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000c1d8  2**0
                  CONTENTS
 10 .bss          00000a08  200001d8  200001d8  0000c1d8  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000be0  20000be0  0000c1d8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000c1d8  2**0
                  CONTENTS, READONLY
 13 .debug_info   00012493  00000000  00000000  0000c208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002a33  00000000  00000000  0001e69b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000010d8  00000000  00000000  000210d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000d2e  00000000  00000000  000221a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022f2c  00000000  00000000  00022ed6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00014dee  00000000  00000000  00045e02  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cfa43  00000000  00000000  0005abf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0012a633  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005848  00000000  00000000  0012a678  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000067  00000000  00000000  0012fec0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d8 	.word	0x200001d8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a7b8 	.word	0x0800a7b8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001dc 	.word	0x200001dc
 80001cc:	0800a7b8 	.word	0x0800a7b8

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000c5c:	f000 b96a 	b.w	8000f34 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9d08      	ldr	r5, [sp, #32]
 8000c7e:	460c      	mov	r4, r1
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d14e      	bne.n	8000d22 <__udivmoddi4+0xaa>
 8000c84:	4694      	mov	ip, r2
 8000c86:	458c      	cmp	ip, r1
 8000c88:	4686      	mov	lr, r0
 8000c8a:	fab2 f282 	clz	r2, r2
 8000c8e:	d962      	bls.n	8000d56 <__udivmoddi4+0xde>
 8000c90:	b14a      	cbz	r2, 8000ca6 <__udivmoddi4+0x2e>
 8000c92:	f1c2 0320 	rsb	r3, r2, #32
 8000c96:	4091      	lsls	r1, r2
 8000c98:	fa20 f303 	lsr.w	r3, r0, r3
 8000c9c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ca0:	4319      	orrs	r1, r3
 8000ca2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ca6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000caa:	fa1f f68c 	uxth.w	r6, ip
 8000cae:	fbb1 f4f7 	udiv	r4, r1, r7
 8000cb2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cb6:	fb07 1114 	mls	r1, r7, r4, r1
 8000cba:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cbe:	fb04 f106 	mul.w	r1, r4, r6
 8000cc2:	4299      	cmp	r1, r3
 8000cc4:	d90a      	bls.n	8000cdc <__udivmoddi4+0x64>
 8000cc6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cca:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000cce:	f080 8112 	bcs.w	8000ef6 <__udivmoddi4+0x27e>
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	f240 810f 	bls.w	8000ef6 <__udivmoddi4+0x27e>
 8000cd8:	3c02      	subs	r4, #2
 8000cda:	4463      	add	r3, ip
 8000cdc:	1a59      	subs	r1, r3, r1
 8000cde:	fa1f f38e 	uxth.w	r3, lr
 8000ce2:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ce6:	fb07 1110 	mls	r1, r7, r0, r1
 8000cea:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cee:	fb00 f606 	mul.w	r6, r0, r6
 8000cf2:	429e      	cmp	r6, r3
 8000cf4:	d90a      	bls.n	8000d0c <__udivmoddi4+0x94>
 8000cf6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cfa:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000cfe:	f080 80fc 	bcs.w	8000efa <__udivmoddi4+0x282>
 8000d02:	429e      	cmp	r6, r3
 8000d04:	f240 80f9 	bls.w	8000efa <__udivmoddi4+0x282>
 8000d08:	4463      	add	r3, ip
 8000d0a:	3802      	subs	r0, #2
 8000d0c:	1b9b      	subs	r3, r3, r6
 8000d0e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d12:	2100      	movs	r1, #0
 8000d14:	b11d      	cbz	r5, 8000d1e <__udivmoddi4+0xa6>
 8000d16:	40d3      	lsrs	r3, r2
 8000d18:	2200      	movs	r2, #0
 8000d1a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d22:	428b      	cmp	r3, r1
 8000d24:	d905      	bls.n	8000d32 <__udivmoddi4+0xba>
 8000d26:	b10d      	cbz	r5, 8000d2c <__udivmoddi4+0xb4>
 8000d28:	e9c5 0100 	strd	r0, r1, [r5]
 8000d2c:	2100      	movs	r1, #0
 8000d2e:	4608      	mov	r0, r1
 8000d30:	e7f5      	b.n	8000d1e <__udivmoddi4+0xa6>
 8000d32:	fab3 f183 	clz	r1, r3
 8000d36:	2900      	cmp	r1, #0
 8000d38:	d146      	bne.n	8000dc8 <__udivmoddi4+0x150>
 8000d3a:	42a3      	cmp	r3, r4
 8000d3c:	d302      	bcc.n	8000d44 <__udivmoddi4+0xcc>
 8000d3e:	4290      	cmp	r0, r2
 8000d40:	f0c0 80f0 	bcc.w	8000f24 <__udivmoddi4+0x2ac>
 8000d44:	1a86      	subs	r6, r0, r2
 8000d46:	eb64 0303 	sbc.w	r3, r4, r3
 8000d4a:	2001      	movs	r0, #1
 8000d4c:	2d00      	cmp	r5, #0
 8000d4e:	d0e6      	beq.n	8000d1e <__udivmoddi4+0xa6>
 8000d50:	e9c5 6300 	strd	r6, r3, [r5]
 8000d54:	e7e3      	b.n	8000d1e <__udivmoddi4+0xa6>
 8000d56:	2a00      	cmp	r2, #0
 8000d58:	f040 8090 	bne.w	8000e7c <__udivmoddi4+0x204>
 8000d5c:	eba1 040c 	sub.w	r4, r1, ip
 8000d60:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d64:	fa1f f78c 	uxth.w	r7, ip
 8000d68:	2101      	movs	r1, #1
 8000d6a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d6e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d72:	fb08 4416 	mls	r4, r8, r6, r4
 8000d76:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d7a:	fb07 f006 	mul.w	r0, r7, r6
 8000d7e:	4298      	cmp	r0, r3
 8000d80:	d908      	bls.n	8000d94 <__udivmoddi4+0x11c>
 8000d82:	eb1c 0303 	adds.w	r3, ip, r3
 8000d86:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000d8a:	d202      	bcs.n	8000d92 <__udivmoddi4+0x11a>
 8000d8c:	4298      	cmp	r0, r3
 8000d8e:	f200 80cd 	bhi.w	8000f2c <__udivmoddi4+0x2b4>
 8000d92:	4626      	mov	r6, r4
 8000d94:	1a1c      	subs	r4, r3, r0
 8000d96:	fa1f f38e 	uxth.w	r3, lr
 8000d9a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d9e:	fb08 4410 	mls	r4, r8, r0, r4
 8000da2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000da6:	fb00 f707 	mul.w	r7, r0, r7
 8000daa:	429f      	cmp	r7, r3
 8000dac:	d908      	bls.n	8000dc0 <__udivmoddi4+0x148>
 8000dae:	eb1c 0303 	adds.w	r3, ip, r3
 8000db2:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000db6:	d202      	bcs.n	8000dbe <__udivmoddi4+0x146>
 8000db8:	429f      	cmp	r7, r3
 8000dba:	f200 80b0 	bhi.w	8000f1e <__udivmoddi4+0x2a6>
 8000dbe:	4620      	mov	r0, r4
 8000dc0:	1bdb      	subs	r3, r3, r7
 8000dc2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dc6:	e7a5      	b.n	8000d14 <__udivmoddi4+0x9c>
 8000dc8:	f1c1 0620 	rsb	r6, r1, #32
 8000dcc:	408b      	lsls	r3, r1
 8000dce:	fa22 f706 	lsr.w	r7, r2, r6
 8000dd2:	431f      	orrs	r7, r3
 8000dd4:	fa20 fc06 	lsr.w	ip, r0, r6
 8000dd8:	fa04 f301 	lsl.w	r3, r4, r1
 8000ddc:	ea43 030c 	orr.w	r3, r3, ip
 8000de0:	40f4      	lsrs	r4, r6
 8000de2:	fa00 f801 	lsl.w	r8, r0, r1
 8000de6:	0c38      	lsrs	r0, r7, #16
 8000de8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000dec:	fbb4 fef0 	udiv	lr, r4, r0
 8000df0:	fa1f fc87 	uxth.w	ip, r7
 8000df4:	fb00 441e 	mls	r4, r0, lr, r4
 8000df8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dfc:	fb0e f90c 	mul.w	r9, lr, ip
 8000e00:	45a1      	cmp	r9, r4
 8000e02:	fa02 f201 	lsl.w	r2, r2, r1
 8000e06:	d90a      	bls.n	8000e1e <__udivmoddi4+0x1a6>
 8000e08:	193c      	adds	r4, r7, r4
 8000e0a:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000e0e:	f080 8084 	bcs.w	8000f1a <__udivmoddi4+0x2a2>
 8000e12:	45a1      	cmp	r9, r4
 8000e14:	f240 8081 	bls.w	8000f1a <__udivmoddi4+0x2a2>
 8000e18:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e1c:	443c      	add	r4, r7
 8000e1e:	eba4 0409 	sub.w	r4, r4, r9
 8000e22:	fa1f f983 	uxth.w	r9, r3
 8000e26:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e2a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e2e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e32:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e36:	45a4      	cmp	ip, r4
 8000e38:	d907      	bls.n	8000e4a <__udivmoddi4+0x1d2>
 8000e3a:	193c      	adds	r4, r7, r4
 8000e3c:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000e40:	d267      	bcs.n	8000f12 <__udivmoddi4+0x29a>
 8000e42:	45a4      	cmp	ip, r4
 8000e44:	d965      	bls.n	8000f12 <__udivmoddi4+0x29a>
 8000e46:	3b02      	subs	r3, #2
 8000e48:	443c      	add	r4, r7
 8000e4a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e4e:	fba0 9302 	umull	r9, r3, r0, r2
 8000e52:	eba4 040c 	sub.w	r4, r4, ip
 8000e56:	429c      	cmp	r4, r3
 8000e58:	46ce      	mov	lr, r9
 8000e5a:	469c      	mov	ip, r3
 8000e5c:	d351      	bcc.n	8000f02 <__udivmoddi4+0x28a>
 8000e5e:	d04e      	beq.n	8000efe <__udivmoddi4+0x286>
 8000e60:	b155      	cbz	r5, 8000e78 <__udivmoddi4+0x200>
 8000e62:	ebb8 030e 	subs.w	r3, r8, lr
 8000e66:	eb64 040c 	sbc.w	r4, r4, ip
 8000e6a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e6e:	40cb      	lsrs	r3, r1
 8000e70:	431e      	orrs	r6, r3
 8000e72:	40cc      	lsrs	r4, r1
 8000e74:	e9c5 6400 	strd	r6, r4, [r5]
 8000e78:	2100      	movs	r1, #0
 8000e7a:	e750      	b.n	8000d1e <__udivmoddi4+0xa6>
 8000e7c:	f1c2 0320 	rsb	r3, r2, #32
 8000e80:	fa20 f103 	lsr.w	r1, r0, r3
 8000e84:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e88:	fa24 f303 	lsr.w	r3, r4, r3
 8000e8c:	4094      	lsls	r4, r2
 8000e8e:	430c      	orrs	r4, r1
 8000e90:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e94:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e98:	fa1f f78c 	uxth.w	r7, ip
 8000e9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ea0:	fb08 3110 	mls	r1, r8, r0, r3
 8000ea4:	0c23      	lsrs	r3, r4, #16
 8000ea6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eaa:	fb00 f107 	mul.w	r1, r0, r7
 8000eae:	4299      	cmp	r1, r3
 8000eb0:	d908      	bls.n	8000ec4 <__udivmoddi4+0x24c>
 8000eb2:	eb1c 0303 	adds.w	r3, ip, r3
 8000eb6:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000eba:	d22c      	bcs.n	8000f16 <__udivmoddi4+0x29e>
 8000ebc:	4299      	cmp	r1, r3
 8000ebe:	d92a      	bls.n	8000f16 <__udivmoddi4+0x29e>
 8000ec0:	3802      	subs	r0, #2
 8000ec2:	4463      	add	r3, ip
 8000ec4:	1a5b      	subs	r3, r3, r1
 8000ec6:	b2a4      	uxth	r4, r4
 8000ec8:	fbb3 f1f8 	udiv	r1, r3, r8
 8000ecc:	fb08 3311 	mls	r3, r8, r1, r3
 8000ed0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ed4:	fb01 f307 	mul.w	r3, r1, r7
 8000ed8:	42a3      	cmp	r3, r4
 8000eda:	d908      	bls.n	8000eee <__udivmoddi4+0x276>
 8000edc:	eb1c 0404 	adds.w	r4, ip, r4
 8000ee0:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000ee4:	d213      	bcs.n	8000f0e <__udivmoddi4+0x296>
 8000ee6:	42a3      	cmp	r3, r4
 8000ee8:	d911      	bls.n	8000f0e <__udivmoddi4+0x296>
 8000eea:	3902      	subs	r1, #2
 8000eec:	4464      	add	r4, ip
 8000eee:	1ae4      	subs	r4, r4, r3
 8000ef0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000ef4:	e739      	b.n	8000d6a <__udivmoddi4+0xf2>
 8000ef6:	4604      	mov	r4, r0
 8000ef8:	e6f0      	b.n	8000cdc <__udivmoddi4+0x64>
 8000efa:	4608      	mov	r0, r1
 8000efc:	e706      	b.n	8000d0c <__udivmoddi4+0x94>
 8000efe:	45c8      	cmp	r8, r9
 8000f00:	d2ae      	bcs.n	8000e60 <__udivmoddi4+0x1e8>
 8000f02:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f06:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f0a:	3801      	subs	r0, #1
 8000f0c:	e7a8      	b.n	8000e60 <__udivmoddi4+0x1e8>
 8000f0e:	4631      	mov	r1, r6
 8000f10:	e7ed      	b.n	8000eee <__udivmoddi4+0x276>
 8000f12:	4603      	mov	r3, r0
 8000f14:	e799      	b.n	8000e4a <__udivmoddi4+0x1d2>
 8000f16:	4630      	mov	r0, r6
 8000f18:	e7d4      	b.n	8000ec4 <__udivmoddi4+0x24c>
 8000f1a:	46d6      	mov	lr, sl
 8000f1c:	e77f      	b.n	8000e1e <__udivmoddi4+0x1a6>
 8000f1e:	4463      	add	r3, ip
 8000f20:	3802      	subs	r0, #2
 8000f22:	e74d      	b.n	8000dc0 <__udivmoddi4+0x148>
 8000f24:	4606      	mov	r6, r0
 8000f26:	4623      	mov	r3, r4
 8000f28:	4608      	mov	r0, r1
 8000f2a:	e70f      	b.n	8000d4c <__udivmoddi4+0xd4>
 8000f2c:	3e02      	subs	r6, #2
 8000f2e:	4463      	add	r3, ip
 8000f30:	e730      	b.n	8000d94 <__udivmoddi4+0x11c>
 8000f32:	bf00      	nop

08000f34 <__aeabi_idiv0>:
 8000f34:	4770      	bx	lr
 8000f36:	bf00      	nop

08000f38 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b082      	sub	sp, #8
 8000f3c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000f3e:	2300      	movs	r3, #0
 8000f40:	607b      	str	r3, [r7, #4]
 8000f42:	4b27      	ldr	r3, [pc, #156]	@ (8000fe0 <MX_DMA_Init+0xa8>)
 8000f44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f46:	4a26      	ldr	r2, [pc, #152]	@ (8000fe0 <MX_DMA_Init+0xa8>)
 8000f48:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000f4c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f4e:	4b24      	ldr	r3, [pc, #144]	@ (8000fe0 <MX_DMA_Init+0xa8>)
 8000f50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f52:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000f56:	607b      	str	r3, [r7, #4]
 8000f58:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	603b      	str	r3, [r7, #0]
 8000f5e:	4b20      	ldr	r3, [pc, #128]	@ (8000fe0 <MX_DMA_Init+0xa8>)
 8000f60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f62:	4a1f      	ldr	r2, [pc, #124]	@ (8000fe0 <MX_DMA_Init+0xa8>)
 8000f64:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000f68:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f6a:	4b1d      	ldr	r3, [pc, #116]	@ (8000fe0 <MX_DMA_Init+0xa8>)
 8000f6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f6e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000f72:	603b      	str	r3, [r7, #0]
 8000f74:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000f76:	2200      	movs	r2, #0
 8000f78:	2100      	movs	r1, #0
 8000f7a:	200b      	movs	r0, #11
 8000f7c:	f001 fbd7 	bl	800272e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000f80:	200b      	movs	r0, #11
 8000f82:	f001 fbf0 	bl	8002766 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8000f86:	2200      	movs	r2, #0
 8000f88:	2100      	movs	r1, #0
 8000f8a:	2010      	movs	r0, #16
 8000f8c:	f001 fbcf 	bl	800272e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000f90:	2010      	movs	r0, #16
 8000f92:	f001 fbe8 	bl	8002766 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8000f96:	2200      	movs	r2, #0
 8000f98:	2100      	movs	r1, #0
 8000f9a:	2011      	movs	r0, #17
 8000f9c:	f001 fbc7 	bl	800272e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8000fa0:	2011      	movs	r0, #17
 8000fa2:	f001 fbe0 	bl	8002766 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 0, 0);
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	2100      	movs	r1, #0
 8000faa:	202f      	movs	r0, #47	@ 0x2f
 8000fac:	f001 fbbf 	bl	800272e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 8000fb0:	202f      	movs	r0, #47	@ 0x2f
 8000fb2:	f001 fbd8 	bl	8002766 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	2100      	movs	r1, #0
 8000fba:	203a      	movs	r0, #58	@ 0x3a
 8000fbc:	f001 fbb7 	bl	800272e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8000fc0:	203a      	movs	r0, #58	@ 0x3a
 8000fc2:	f001 fbd0 	bl	8002766 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	2100      	movs	r1, #0
 8000fca:	2046      	movs	r0, #70	@ 0x46
 8000fcc:	f001 fbaf 	bl	800272e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8000fd0:	2046      	movs	r0, #70	@ 0x46
 8000fd2:	f001 fbc8 	bl	8002766 <HAL_NVIC_EnableIRQ>

}
 8000fd6:	bf00      	nop
 8000fd8:	3708      	adds	r7, #8
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bd80      	pop	{r7, pc}
 8000fde:	bf00      	nop
 8000fe0:	40023800 	.word	0x40023800

08000fe4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b08a      	sub	sp, #40	@ 0x28
 8000fe8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fea:	f107 0314 	add.w	r3, r7, #20
 8000fee:	2200      	movs	r2, #0
 8000ff0:	601a      	str	r2, [r3, #0]
 8000ff2:	605a      	str	r2, [r3, #4]
 8000ff4:	609a      	str	r2, [r3, #8]
 8000ff6:	60da      	str	r2, [r3, #12]
 8000ff8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	613b      	str	r3, [r7, #16]
 8000ffe:	4b2e      	ldr	r3, [pc, #184]	@ (80010b8 <MX_GPIO_Init+0xd4>)
 8001000:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001002:	4a2d      	ldr	r2, [pc, #180]	@ (80010b8 <MX_GPIO_Init+0xd4>)
 8001004:	f043 0304 	orr.w	r3, r3, #4
 8001008:	6313      	str	r3, [r2, #48]	@ 0x30
 800100a:	4b2b      	ldr	r3, [pc, #172]	@ (80010b8 <MX_GPIO_Init+0xd4>)
 800100c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800100e:	f003 0304 	and.w	r3, r3, #4
 8001012:	613b      	str	r3, [r7, #16]
 8001014:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001016:	2300      	movs	r3, #0
 8001018:	60fb      	str	r3, [r7, #12]
 800101a:	4b27      	ldr	r3, [pc, #156]	@ (80010b8 <MX_GPIO_Init+0xd4>)
 800101c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800101e:	4a26      	ldr	r2, [pc, #152]	@ (80010b8 <MX_GPIO_Init+0xd4>)
 8001020:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001024:	6313      	str	r3, [r2, #48]	@ 0x30
 8001026:	4b24      	ldr	r3, [pc, #144]	@ (80010b8 <MX_GPIO_Init+0xd4>)
 8001028:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800102a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800102e:	60fb      	str	r3, [r7, #12]
 8001030:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001032:	2300      	movs	r3, #0
 8001034:	60bb      	str	r3, [r7, #8]
 8001036:	4b20      	ldr	r3, [pc, #128]	@ (80010b8 <MX_GPIO_Init+0xd4>)
 8001038:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800103a:	4a1f      	ldr	r2, [pc, #124]	@ (80010b8 <MX_GPIO_Init+0xd4>)
 800103c:	f043 0308 	orr.w	r3, r3, #8
 8001040:	6313      	str	r3, [r2, #48]	@ 0x30
 8001042:	4b1d      	ldr	r3, [pc, #116]	@ (80010b8 <MX_GPIO_Init+0xd4>)
 8001044:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001046:	f003 0308 	and.w	r3, r3, #8
 800104a:	60bb      	str	r3, [r7, #8]
 800104c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800104e:	2300      	movs	r3, #0
 8001050:	607b      	str	r3, [r7, #4]
 8001052:	4b19      	ldr	r3, [pc, #100]	@ (80010b8 <MX_GPIO_Init+0xd4>)
 8001054:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001056:	4a18      	ldr	r2, [pc, #96]	@ (80010b8 <MX_GPIO_Init+0xd4>)
 8001058:	f043 0301 	orr.w	r3, r3, #1
 800105c:	6313      	str	r3, [r2, #48]	@ 0x30
 800105e:	4b16      	ldr	r3, [pc, #88]	@ (80010b8 <MX_GPIO_Init+0xd4>)
 8001060:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001062:	f003 0301 	and.w	r3, r3, #1
 8001066:	607b      	str	r3, [r7, #4]
 8001068:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800106a:	2300      	movs	r3, #0
 800106c:	603b      	str	r3, [r7, #0]
 800106e:	4b12      	ldr	r3, [pc, #72]	@ (80010b8 <MX_GPIO_Init+0xd4>)
 8001070:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001072:	4a11      	ldr	r2, [pc, #68]	@ (80010b8 <MX_GPIO_Init+0xd4>)
 8001074:	f043 0302 	orr.w	r3, r3, #2
 8001078:	6313      	str	r3, [r2, #48]	@ 0x30
 800107a:	4b0f      	ldr	r3, [pc, #60]	@ (80010b8 <MX_GPIO_Init+0xd4>)
 800107c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800107e:	f003 0302 	and.w	r3, r3, #2
 8001082:	603b      	str	r3, [r7, #0]
 8001084:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8001086:	2200      	movs	r2, #0
 8001088:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 800108c:	480b      	ldr	r0, [pc, #44]	@ (80010bc <MX_GPIO_Init+0xd8>)
 800108e:	f002 f93d 	bl	800330c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001092:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 8001096:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001098:	2301      	movs	r3, #1
 800109a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800109c:	2300      	movs	r3, #0
 800109e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010a0:	2300      	movs	r3, #0
 80010a2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80010a4:	f107 0314 	add.w	r3, r7, #20
 80010a8:	4619      	mov	r1, r3
 80010aa:	4804      	ldr	r0, [pc, #16]	@ (80010bc <MX_GPIO_Init+0xd8>)
 80010ac:	f001 ff92 	bl	8002fd4 <HAL_GPIO_Init>

}
 80010b0:	bf00      	nop
 80010b2:	3728      	adds	r7, #40	@ 0x28
 80010b4:	46bd      	mov	sp, r7
 80010b6:	bd80      	pop	{r7, pc}
 80010b8:	40023800 	.word	0x40023800
 80010bc:	40020c00 	.word	0x40020c00

080010c0 <MX_I2C1_Init>:
DMA_HandleTypeDef hdma_i2c1_rx;
DMA_HandleTypeDef hdma_i2c1_tx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80010c4:	4b12      	ldr	r3, [pc, #72]	@ (8001110 <MX_I2C1_Init+0x50>)
 80010c6:	4a13      	ldr	r2, [pc, #76]	@ (8001114 <MX_I2C1_Init+0x54>)
 80010c8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80010ca:	4b11      	ldr	r3, [pc, #68]	@ (8001110 <MX_I2C1_Init+0x50>)
 80010cc:	4a12      	ldr	r2, [pc, #72]	@ (8001118 <MX_I2C1_Init+0x58>)
 80010ce:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80010d0:	4b0f      	ldr	r3, [pc, #60]	@ (8001110 <MX_I2C1_Init+0x50>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80010d6:	4b0e      	ldr	r3, [pc, #56]	@ (8001110 <MX_I2C1_Init+0x50>)
 80010d8:	2200      	movs	r2, #0
 80010da:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80010dc:	4b0c      	ldr	r3, [pc, #48]	@ (8001110 <MX_I2C1_Init+0x50>)
 80010de:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80010e2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80010e4:	4b0a      	ldr	r3, [pc, #40]	@ (8001110 <MX_I2C1_Init+0x50>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80010ea:	4b09      	ldr	r3, [pc, #36]	@ (8001110 <MX_I2C1_Init+0x50>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80010f0:	4b07      	ldr	r3, [pc, #28]	@ (8001110 <MX_I2C1_Init+0x50>)
 80010f2:	2200      	movs	r2, #0
 80010f4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80010f6:	4b06      	ldr	r3, [pc, #24]	@ (8001110 <MX_I2C1_Init+0x50>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80010fc:	4804      	ldr	r0, [pc, #16]	@ (8001110 <MX_I2C1_Init+0x50>)
 80010fe:	f002 f939 	bl	8003374 <HAL_I2C_Init>
 8001102:	4603      	mov	r3, r0
 8001104:	2b00      	cmp	r3, #0
 8001106:	d001      	beq.n	800110c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001108:	f000 fc70 	bl	80019ec <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800110c:	bf00      	nop
 800110e:	bd80      	pop	{r7, pc}
 8001110:	200001f4 	.word	0x200001f4
 8001114:	40005400 	.word	0x40005400
 8001118:	000186a0 	.word	0x000186a0

0800111c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b08a      	sub	sp, #40	@ 0x28
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001124:	f107 0314 	add.w	r3, r7, #20
 8001128:	2200      	movs	r2, #0
 800112a:	601a      	str	r2, [r3, #0]
 800112c:	605a      	str	r2, [r3, #4]
 800112e:	609a      	str	r2, [r3, #8]
 8001130:	60da      	str	r2, [r3, #12]
 8001132:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	4a4c      	ldr	r2, [pc, #304]	@ (800126c <HAL_I2C_MspInit+0x150>)
 800113a:	4293      	cmp	r3, r2
 800113c:	f040 8091 	bne.w	8001262 <HAL_I2C_MspInit+0x146>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001140:	2300      	movs	r3, #0
 8001142:	613b      	str	r3, [r7, #16]
 8001144:	4b4a      	ldr	r3, [pc, #296]	@ (8001270 <HAL_I2C_MspInit+0x154>)
 8001146:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001148:	4a49      	ldr	r2, [pc, #292]	@ (8001270 <HAL_I2C_MspInit+0x154>)
 800114a:	f043 0302 	orr.w	r3, r3, #2
 800114e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001150:	4b47      	ldr	r3, [pc, #284]	@ (8001270 <HAL_I2C_MspInit+0x154>)
 8001152:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001154:	f003 0302 	and.w	r3, r3, #2
 8001158:	613b      	str	r3, [r7, #16]
 800115a:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800115c:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001160:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001162:	2312      	movs	r3, #18
 8001164:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001166:	2300      	movs	r3, #0
 8001168:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800116a:	2303      	movs	r3, #3
 800116c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800116e:	2304      	movs	r3, #4
 8001170:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001172:	f107 0314 	add.w	r3, r7, #20
 8001176:	4619      	mov	r1, r3
 8001178:	483e      	ldr	r0, [pc, #248]	@ (8001274 <HAL_I2C_MspInit+0x158>)
 800117a:	f001 ff2b 	bl	8002fd4 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800117e:	2300      	movs	r3, #0
 8001180:	60fb      	str	r3, [r7, #12]
 8001182:	4b3b      	ldr	r3, [pc, #236]	@ (8001270 <HAL_I2C_MspInit+0x154>)
 8001184:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001186:	4a3a      	ldr	r2, [pc, #232]	@ (8001270 <HAL_I2C_MspInit+0x154>)
 8001188:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800118c:	6413      	str	r3, [r2, #64]	@ 0x40
 800118e:	4b38      	ldr	r3, [pc, #224]	@ (8001270 <HAL_I2C_MspInit+0x154>)
 8001190:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001192:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001196:	60fb      	str	r3, [r7, #12]
 8001198:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream5;
 800119a:	4b37      	ldr	r3, [pc, #220]	@ (8001278 <HAL_I2C_MspInit+0x15c>)
 800119c:	4a37      	ldr	r2, [pc, #220]	@ (800127c <HAL_I2C_MspInit+0x160>)
 800119e:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 80011a0:	4b35      	ldr	r3, [pc, #212]	@ (8001278 <HAL_I2C_MspInit+0x15c>)
 80011a2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80011a6:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80011a8:	4b33      	ldr	r3, [pc, #204]	@ (8001278 <HAL_I2C_MspInit+0x15c>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80011ae:	4b32      	ldr	r3, [pc, #200]	@ (8001278 <HAL_I2C_MspInit+0x15c>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80011b4:	4b30      	ldr	r3, [pc, #192]	@ (8001278 <HAL_I2C_MspInit+0x15c>)
 80011b6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80011ba:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80011bc:	4b2e      	ldr	r3, [pc, #184]	@ (8001278 <HAL_I2C_MspInit+0x15c>)
 80011be:	2200      	movs	r2, #0
 80011c0:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80011c2:	4b2d      	ldr	r3, [pc, #180]	@ (8001278 <HAL_I2C_MspInit+0x15c>)
 80011c4:	2200      	movs	r2, #0
 80011c6:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 80011c8:	4b2b      	ldr	r3, [pc, #172]	@ (8001278 <HAL_I2C_MspInit+0x15c>)
 80011ca:	2200      	movs	r2, #0
 80011cc:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80011ce:	4b2a      	ldr	r3, [pc, #168]	@ (8001278 <HAL_I2C_MspInit+0x15c>)
 80011d0:	2200      	movs	r2, #0
 80011d2:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80011d4:	4b28      	ldr	r3, [pc, #160]	@ (8001278 <HAL_I2C_MspInit+0x15c>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 80011da:	4827      	ldr	r0, [pc, #156]	@ (8001278 <HAL_I2C_MspInit+0x15c>)
 80011dc:	f001 fade 	bl	800279c <HAL_DMA_Init>
 80011e0:	4603      	mov	r3, r0
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d001      	beq.n	80011ea <HAL_I2C_MspInit+0xce>
    {
      Error_Handler();
 80011e6:	f000 fc01 	bl	80019ec <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	4a22      	ldr	r2, [pc, #136]	@ (8001278 <HAL_I2C_MspInit+0x15c>)
 80011ee:	639a      	str	r2, [r3, #56]	@ 0x38
 80011f0:	4a21      	ldr	r2, [pc, #132]	@ (8001278 <HAL_I2C_MspInit+0x15c>)
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream6;
 80011f6:	4b22      	ldr	r3, [pc, #136]	@ (8001280 <HAL_I2C_MspInit+0x164>)
 80011f8:	4a22      	ldr	r2, [pc, #136]	@ (8001284 <HAL_I2C_MspInit+0x168>)
 80011fa:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_1;
 80011fc:	4b20      	ldr	r3, [pc, #128]	@ (8001280 <HAL_I2C_MspInit+0x164>)
 80011fe:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001202:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001204:	4b1e      	ldr	r3, [pc, #120]	@ (8001280 <HAL_I2C_MspInit+0x164>)
 8001206:	2240      	movs	r2, #64	@ 0x40
 8001208:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800120a:	4b1d      	ldr	r3, [pc, #116]	@ (8001280 <HAL_I2C_MspInit+0x164>)
 800120c:	2200      	movs	r2, #0
 800120e:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001210:	4b1b      	ldr	r3, [pc, #108]	@ (8001280 <HAL_I2C_MspInit+0x164>)
 8001212:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001216:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001218:	4b19      	ldr	r3, [pc, #100]	@ (8001280 <HAL_I2C_MspInit+0x164>)
 800121a:	2200      	movs	r2, #0
 800121c:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800121e:	4b18      	ldr	r3, [pc, #96]	@ (8001280 <HAL_I2C_MspInit+0x164>)
 8001220:	2200      	movs	r2, #0
 8001222:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8001224:	4b16      	ldr	r3, [pc, #88]	@ (8001280 <HAL_I2C_MspInit+0x164>)
 8001226:	2200      	movs	r2, #0
 8001228:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800122a:	4b15      	ldr	r3, [pc, #84]	@ (8001280 <HAL_I2C_MspInit+0x164>)
 800122c:	2200      	movs	r2, #0
 800122e:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001230:	4b13      	ldr	r3, [pc, #76]	@ (8001280 <HAL_I2C_MspInit+0x164>)
 8001232:	2200      	movs	r2, #0
 8001234:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8001236:	4812      	ldr	r0, [pc, #72]	@ (8001280 <HAL_I2C_MspInit+0x164>)
 8001238:	f001 fab0 	bl	800279c <HAL_DMA_Init>
 800123c:	4603      	mov	r3, r0
 800123e:	2b00      	cmp	r3, #0
 8001240:	d001      	beq.n	8001246 <HAL_I2C_MspInit+0x12a>
    {
      Error_Handler();
 8001242:	f000 fbd3 	bl	80019ec <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	4a0d      	ldr	r2, [pc, #52]	@ (8001280 <HAL_I2C_MspInit+0x164>)
 800124a:	635a      	str	r2, [r3, #52]	@ 0x34
 800124c:	4a0c      	ldr	r2, [pc, #48]	@ (8001280 <HAL_I2C_MspInit+0x164>)
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8001252:	2200      	movs	r2, #0
 8001254:	2100      	movs	r1, #0
 8001256:	201f      	movs	r0, #31
 8001258:	f001 fa69 	bl	800272e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 800125c:	201f      	movs	r0, #31
 800125e:	f001 fa82 	bl	8002766 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001262:	bf00      	nop
 8001264:	3728      	adds	r7, #40	@ 0x28
 8001266:	46bd      	mov	sp, r7
 8001268:	bd80      	pop	{r7, pc}
 800126a:	bf00      	nop
 800126c:	40005400 	.word	0x40005400
 8001270:	40023800 	.word	0x40023800
 8001274:	40020400 	.word	0x40020400
 8001278:	20000248 	.word	0x20000248
 800127c:	40026088 	.word	0x40026088
 8001280:	200002a8 	.word	0x200002a8
 8001284:	400260a0 	.word	0x400260a0

08001288 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001288:	b5b0      	push	{r4, r5, r7, lr}
 800128a:	b0a0      	sub	sp, #128	@ 0x80
 800128c:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800128e:	f001 f8dd 	bl	800244c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001292:	f000 fa1f 	bl	80016d4 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001296:	f7ff fea5 	bl	8000fe4 <MX_GPIO_Init>
  MX_DMA_Init();
 800129a:	f7ff fe4d 	bl	8000f38 <MX_DMA_Init>
  MX_USART1_UART_Init();
 800129e:	f000 feff 	bl	80020a0 <MX_USART1_UART_Init>
  MX_UART5_Init();
 80012a2:	f000 fed3 	bl	800204c <MX_UART5_Init>
  MX_I2C1_Init();
 80012a6:	f7ff ff0b 	bl	80010c0 <MX_I2C1_Init>
  MX_TIM2_Init();
 80012aa:	f000 fd39 	bl	8001d20 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  //Enabling both setup RX channels
  HAL_Send_AT_Message("AT+CIPCLOSE\r\n");
 80012ae:	4864      	ldr	r0, [pc, #400]	@ (8001440 <main+0x1b8>)
 80012b0:	f000 fb50 	bl	8001954 <HAL_Send_AT_Message>
  HAL_Delay(500);
 80012b4:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80012b8:	f001 f93a 	bl	8002530 <HAL_Delay>
  HAL_UARTEx_ReceiveToIdle_DMA(&huart1, (uint8_t*)rx_buffer_ch1, RX_BUFFER_CH1_SIZE);
 80012bc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80012c0:	4960      	ldr	r1, [pc, #384]	@ (8001444 <main+0x1bc>)
 80012c2:	4861      	ldr	r0, [pc, #388]	@ (8001448 <main+0x1c0>)
 80012c4:	f005 faa0 	bl	8006808 <HAL_UARTEx_ReceiveToIdle_DMA>
  __HAL_DMA_DISABLE_IT(huart1.hdmarx, DMA_IT_HT);
 80012c8:	4b5f      	ldr	r3, [pc, #380]	@ (8001448 <main+0x1c0>)
 80012ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	681a      	ldr	r2, [r3, #0]
 80012d0:	4b5d      	ldr	r3, [pc, #372]	@ (8001448 <main+0x1c0>)
 80012d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	f022 0208 	bic.w	r2, r2, #8
 80012da:	601a      	str	r2, [r3, #0]
  __HAL_DMA_DISABLE_IT(huart1.hdmarx, DMA_IT_TC);
 80012dc:	4b5a      	ldr	r3, [pc, #360]	@ (8001448 <main+0x1c0>)
 80012de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	681a      	ldr	r2, [r3, #0]
 80012e4:	4b58      	ldr	r3, [pc, #352]	@ (8001448 <main+0x1c0>)
 80012e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	f022 0210 	bic.w	r2, r2, #16
 80012ee:	601a      	str	r2, [r3, #0]
  HAL_UARTEx_ReceiveToIdle_DMA(&huart5, (uint8_t*)rx_buffer_ch2, RX_BUFFER_CH2_SIZE);
 80012f0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80012f4:	4955      	ldr	r1, [pc, #340]	@ (800144c <main+0x1c4>)
 80012f6:	4856      	ldr	r0, [pc, #344]	@ (8001450 <main+0x1c8>)
 80012f8:	f005 fa86 	bl	8006808 <HAL_UARTEx_ReceiveToIdle_DMA>
  __HAL_DMA_DISABLE_IT(huart5.hdmarx, DMA_IT_HT);
 80012fc:	4b54      	ldr	r3, [pc, #336]	@ (8001450 <main+0x1c8>)
 80012fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	681a      	ldr	r2, [r3, #0]
 8001304:	4b52      	ldr	r3, [pc, #328]	@ (8001450 <main+0x1c8>)
 8001306:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	f022 0208 	bic.w	r2, r2, #8
 800130e:	601a      	str	r2, [r3, #0]
  __HAL_DMA_DISABLE_IT(huart5.hdmarx, DMA_IT_TC);
 8001310:	4b4f      	ldr	r3, [pc, #316]	@ (8001450 <main+0x1c8>)
 8001312:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	681a      	ldr	r2, [r3, #0]
 8001318:	4b4d      	ldr	r3, [pc, #308]	@ (8001450 <main+0x1c8>)
 800131a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	f022 0210 	bic.w	r2, r2, #16
 8001322:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  //SETUP PHASE
	  if (working_phase == HAL_PHASE_SETUP) {
 8001324:	4b4b      	ldr	r3, [pc, #300]	@ (8001454 <main+0x1cc>)
 8001326:	781b      	ldrb	r3, [r3, #0]
 8001328:	2b00      	cmp	r3, #0
 800132a:	f040 80b0 	bne.w	800148e <main+0x206>
			  //USART SETUP RX ENABLE
		  	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET); //Setup phase: Blue LED turned on constantly
 800132e:	2201      	movs	r2, #1
 8001330:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001334:	4848      	ldr	r0, [pc, #288]	@ (8001458 <main+0x1d0>)
 8001336:	f001 ffe9 	bl	800330c <HAL_GPIO_WritePin>

		  	  //USART RX EVENTS
		  	  if (rx_event_usart1 == 1) {
 800133a:	4b48      	ldr	r3, [pc, #288]	@ (800145c <main+0x1d4>)
 800133c:	781b      	ldrb	r3, [r3, #0]
 800133e:	b2db      	uxtb	r3, r3
 8001340:	2b01      	cmp	r3, #1
 8001342:	d10c      	bne.n	800135e <main+0xd6>
				  rx_event_usart1 = 0;
 8001344:	4b45      	ldr	r3, [pc, #276]	@ (800145c <main+0x1d4>)
 8001346:	2200      	movs	r2, #0
 8001348:	701a      	strb	r2, [r3, #0]
				  UART_String_Handling_CH1();
 800134a:	f000 fd5d 	bl	8001e08 <UART_String_Handling_CH1>
				  LED_Checking();
 800134e:	f000 faa5 	bl	800189c <LED_Checking>
				  rx_event_counter++;
 8001352:	4b43      	ldr	r3, [pc, #268]	@ (8001460 <main+0x1d8>)
 8001354:	881b      	ldrh	r3, [r3, #0]
 8001356:	3301      	adds	r3, #1
 8001358:	b29a      	uxth	r2, r3
 800135a:	4b41      	ldr	r3, [pc, #260]	@ (8001460 <main+0x1d8>)
 800135c:	801a      	strh	r2, [r3, #0]
			  }
			  if (rx_event_uart5 == 1) {
 800135e:	4b41      	ldr	r3, [pc, #260]	@ (8001464 <main+0x1dc>)
 8001360:	781b      	ldrb	r3, [r3, #0]
 8001362:	b2db      	uxtb	r3, r3
 8001364:	2b01      	cmp	r3, #1
 8001366:	d104      	bne.n	8001372 <main+0xea>
				  rx_event_uart5 = 0;
 8001368:	4b3e      	ldr	r3, [pc, #248]	@ (8001464 <main+0x1dc>)
 800136a:	2200      	movs	r2, #0
 800136c:	701a      	strb	r2, [r3, #0]
				  UART_String_Handling_CH2();
 800136e:	f000 fddf 	bl	8001f30 <UART_String_Handling_CH2>
			  }
				  //Checking for display connected
			  if (display_state == HAL_NODISPLAY) {
 8001372:	4b3d      	ldr	r3, [pc, #244]	@ (8001468 <main+0x1e0>)
 8001374:	781b      	ldrb	r3, [r3, #0]
 8001376:	2b00      	cmp	r3, #0
 8001378:	d10e      	bne.n	8001398 <main+0x110>
				  if (strstr(string_buffer_2, "DISPLAY") != NULL) {
 800137a:	493c      	ldr	r1, [pc, #240]	@ (800146c <main+0x1e4>)
 800137c:	483c      	ldr	r0, [pc, #240]	@ (8001470 <main+0x1e8>)
 800137e:	f007 f942 	bl	8008606 <strstr>
 8001382:	4603      	mov	r3, r0
 8001384:	2b00      	cmp	r3, #0
 8001386:	d007      	beq.n	8001398 <main+0x110>
					HAL_UART_Transmit_DMA(&huart5, "AT+DISPLAYACK", strlen("AT+DISPLAYACK"));
 8001388:	220d      	movs	r2, #13
 800138a:	493a      	ldr	r1, [pc, #232]	@ (8001474 <main+0x1ec>)
 800138c:	4830      	ldr	r0, [pc, #192]	@ (8001450 <main+0x1c8>)
 800138e:	f005 f9cb 	bl	8006728 <HAL_UART_Transmit_DMA>
					display_state = HAL_YESDISPLAY;
 8001392:	4b35      	ldr	r3, [pc, #212]	@ (8001468 <main+0x1e0>)
 8001394:	2201      	movs	r2, #1
 8001396:	701a      	strb	r2, [r3, #0]
				  }
			  }
			  //SETUP PHASE IF NO KEYBOARD
			  if (display_state == HAL_NODISPLAY) {
 8001398:	4b33      	ldr	r3, [pc, #204]	@ (8001468 <main+0x1e0>)
 800139a:	781b      	ldrb	r3, [r3, #0]
 800139c:	2b00      	cmp	r3, #0
 800139e:	d176      	bne.n	800148e <main+0x206>
				  if (setup_flags < 4) {
 80013a0:	4b35      	ldr	r3, [pc, #212]	@ (8001478 <main+0x1f0>)
 80013a2:	781b      	ldrb	r3, [r3, #0]
 80013a4:	2b03      	cmp	r3, #3
 80013a6:	d86f      	bhi.n	8001488 <main+0x200>
					  iteration_counter++;
 80013a8:	4b34      	ldr	r3, [pc, #208]	@ (800147c <main+0x1f4>)
 80013aa:	881b      	ldrh	r3, [r3, #0]
 80013ac:	3301      	adds	r3, #1
 80013ae:	b29a      	uxth	r2, r3
 80013b0:	4b32      	ldr	r3, [pc, #200]	@ (800147c <main+0x1f4>)
 80013b2:	801a      	strh	r2, [r3, #0]
					  uint8_t diff = iteration_counter - rx_event_counter;
 80013b4:	4b31      	ldr	r3, [pc, #196]	@ (800147c <main+0x1f4>)
 80013b6:	881b      	ldrh	r3, [r3, #0]
 80013b8:	b2da      	uxtb	r2, r3
 80013ba:	4b29      	ldr	r3, [pc, #164]	@ (8001460 <main+0x1d8>)
 80013bc:	881b      	ldrh	r3, [r3, #0]
 80013be:	b2db      	uxtb	r3, r3
 80013c0:	1ad3      	subs	r3, r2, r3
 80013c2:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
					  if (diff > 1) {
 80013c6:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 80013ca:	2b01      	cmp	r3, #1
 80013cc:	d909      	bls.n	80013e2 <main+0x15a>
						  iteration_counter -= diff; //lower iteration count, but don't send anything new
 80013ce:	4b2b      	ldr	r3, [pc, #172]	@ (800147c <main+0x1f4>)
 80013d0:	881a      	ldrh	r2, [r3, #0]
 80013d2:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 80013d6:	b29b      	uxth	r3, r3
 80013d8:	1ad3      	subs	r3, r2, r3
 80013da:	b29a      	uxth	r2, r3
 80013dc:	4b27      	ldr	r3, [pc, #156]	@ (800147c <main+0x1f4>)
 80013de:	801a      	strh	r2, [r3, #0]
 80013e0:	e055      	b.n	800148e <main+0x206>
					  }
					  else { //if the difference is 1, send new and increment next send
						  if (error_flag) {
 80013e2:	4b27      	ldr	r3, [pc, #156]	@ (8001480 <main+0x1f8>)
 80013e4:	781b      	ldrb	r3, [r3, #0]
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d012      	beq.n	8001410 <main+0x188>
							  error_flag = 0;
 80013ea:	4b25      	ldr	r3, [pc, #148]	@ (8001480 <main+0x1f8>)
 80013ec:	2200      	movs	r2, #0
 80013ee:	701a      	strb	r2, [r3, #0]
							  if (setup_flags > 0) setup_flags--; // avoid underflow
 80013f0:	4b21      	ldr	r3, [pc, #132]	@ (8001478 <main+0x1f0>)
 80013f2:	781b      	ldrb	r3, [r3, #0]
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d005      	beq.n	8001404 <main+0x17c>
 80013f8:	4b1f      	ldr	r3, [pc, #124]	@ (8001478 <main+0x1f0>)
 80013fa:	781b      	ldrb	r3, [r3, #0]
 80013fc:	3b01      	subs	r3, #1
 80013fe:	b2da      	uxtb	r2, r3
 8001400:	4b1d      	ldr	r3, [pc, #116]	@ (8001478 <main+0x1f0>)
 8001402:	701a      	strb	r2, [r3, #0]
							  ESP32_Initialization_Steps(setup_flags);
 8001404:	4b1c      	ldr	r3, [pc, #112]	@ (8001478 <main+0x1f0>)
 8001406:	781b      	ldrb	r3, [r3, #0]
 8001408:	4618      	mov	r0, r3
 800140a:	f000 fabd 	bl	8001988 <ESP32_Initialization_Steps>
 800140e:	e03e      	b.n	800148e <main+0x206>
							  //setup_flags++;
						  }
						  else if (ok_flag){
 8001410:	4b1c      	ldr	r3, [pc, #112]	@ (8001484 <main+0x1fc>)
 8001412:	781b      	ldrb	r3, [r3, #0]
 8001414:	2b00      	cmp	r3, #0
 8001416:	d00c      	beq.n	8001432 <main+0x1aa>
							  ok_flag = 0;
 8001418:	4b1a      	ldr	r3, [pc, #104]	@ (8001484 <main+0x1fc>)
 800141a:	2200      	movs	r2, #0
 800141c:	701a      	strb	r2, [r3, #0]
							  ESP32_Initialization_Steps(setup_flags++);
 800141e:	4b16      	ldr	r3, [pc, #88]	@ (8001478 <main+0x1f0>)
 8001420:	781b      	ldrb	r3, [r3, #0]
 8001422:	1c5a      	adds	r2, r3, #1
 8001424:	b2d1      	uxtb	r1, r2
 8001426:	4a14      	ldr	r2, [pc, #80]	@ (8001478 <main+0x1f0>)
 8001428:	7011      	strb	r1, [r2, #0]
 800142a:	4618      	mov	r0, r3
 800142c:	f000 faac 	bl	8001988 <ESP32_Initialization_Steps>
 8001430:	e02d      	b.n	800148e <main+0x206>
						  }
						  else {
							 iteration_counter--;
 8001432:	4b12      	ldr	r3, [pc, #72]	@ (800147c <main+0x1f4>)
 8001434:	881b      	ldrh	r3, [r3, #0]
 8001436:	3b01      	subs	r3, #1
 8001438:	b29a      	uxth	r2, r3
 800143a:	4b10      	ldr	r3, [pc, #64]	@ (800147c <main+0x1f4>)
 800143c:	801a      	strh	r2, [r3, #0]
 800143e:	e026      	b.n	800148e <main+0x206>
 8001440:	0800a7d0 	.word	0x0800a7d0
 8001444:	20000408 	.word	0x20000408
 8001448:	200008c8 	.word	0x200008c8
 800144c:	20000508 	.word	0x20000508
 8001450:	20000880 	.word	0x20000880
 8001454:	2000080d 	.word	0x2000080d
 8001458:	40020c00 	.word	0x40020c00
 800145c:	20000809 	.word	0x20000809
 8001460:	20000822 	.word	0x20000822
 8001464:	2000080a 	.word	0x2000080a
 8001468:	2000080c 	.word	0x2000080c
 800146c:	0800a7e0 	.word	0x0800a7e0
 8001470:	20000708 	.word	0x20000708
 8001474:	0800a7e8 	.word	0x0800a7e8
 8001478:	2000080b 	.word	0x2000080b
 800147c:	20000824 	.word	0x20000824
 8001480:	2000080e 	.word	0x2000080e
 8001484:	20000000 	.word	0x20000000
						  }
					  }
				  }
				  else {
					  working_phase = HAL_PHASE_SENSOR;
 8001488:	4b81      	ldr	r3, [pc, #516]	@ (8001690 <main+0x408>)
 800148a:	2201      	movs	r2, #1
 800148c:	701a      	strb	r2, [r3, #0]
				  }
			  }
		  }
	  //SENSOR SENDING DATA PHASE
	  if (working_phase == HAL_PHASE_SENSOR) {
 800148e:	4b80      	ldr	r3, [pc, #512]	@ (8001690 <main+0x408>)
 8001490:	781b      	ldrb	r3, [r3, #0]
 8001492:	2b01      	cmp	r3, #1
 8001494:	f47f af46 	bne.w	8001324 <main+0x9c>
		  if (timer_init) {
 8001498:	4b7e      	ldr	r3, [pc, #504]	@ (8001694 <main+0x40c>)
 800149a:	781b      	ldrb	r3, [r3, #0]
 800149c:	2b00      	cmp	r3, #0
 800149e:	d00b      	beq.n	80014b8 <main+0x230>
			  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 80014a0:	2200      	movs	r2, #0
 80014a2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80014a6:	487c      	ldr	r0, [pc, #496]	@ (8001698 <main+0x410>)
 80014a8:	f001 ff30 	bl	800330c <HAL_GPIO_WritePin>
			  HAL_TIM_Base_Start_IT(&htim2);
 80014ac:	487b      	ldr	r0, [pc, #492]	@ (800169c <main+0x414>)
 80014ae:	f004 fcc5 	bl	8005e3c <HAL_TIM_Base_Start_IT>
			  timer_init = 0;
 80014b2:	4b78      	ldr	r3, [pc, #480]	@ (8001694 <main+0x40c>)
 80014b4:	2200      	movs	r2, #0
 80014b6:	701a      	strb	r2, [r3, #0]
		  }
		  if (tim_flag) {
 80014b8:	4b79      	ldr	r3, [pc, #484]	@ (80016a0 <main+0x418>)
 80014ba:	781b      	ldrb	r3, [r3, #0]
 80014bc:	b2db      	uxtb	r3, r3
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d012      	beq.n	80014e8 <main+0x260>
			  tim_flag = 0;
 80014c2:	4b77      	ldr	r3, [pc, #476]	@ (80016a0 <main+0x418>)
 80014c4:	2200      	movs	r2, #0
 80014c6:	701a      	strb	r2, [r3, #0]
			  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15);
 80014c8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80014cc:	4872      	ldr	r0, [pc, #456]	@ (8001698 <main+0x410>)
 80014ce:	f001 ff36 	bl	800333e <HAL_GPIO_TogglePin>
			  uint8_t cmd[2] = { 0x7C, 0xA2 };  // "Wake + Measure T,F" command for SHTC3
 80014d2:	f24a 237c 	movw	r3, #41596	@ 0xa27c
 80014d6:	f8a7 3060 	strh.w	r3, [r7, #96]	@ 0x60
			  HAL_I2C_Master_Transmit_DMA(&hi2c1, SENSOR_ADDR << 1, cmd, 2);
 80014da:	f107 0260 	add.w	r2, r7, #96	@ 0x60
 80014de:	2302      	movs	r3, #2
 80014e0:	21e0      	movs	r1, #224	@ 0xe0
 80014e2:	4870      	ldr	r0, [pc, #448]	@ (80016a4 <main+0x41c>)
 80014e4:	f002 f8a0 	bl	8003628 <HAL_I2C_Master_Transmit_DMA>
			  //HAL_Delay(1);
		  }
		  if (i2c_tx_flag) {
 80014e8:	4b6f      	ldr	r3, [pc, #444]	@ (80016a8 <main+0x420>)
 80014ea:	781b      	ldrb	r3, [r3, #0]
 80014ec:	b2db      	uxtb	r3, r3
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d008      	beq.n	8001504 <main+0x27c>
			  i2c_tx_flag = 0;
 80014f2:	4b6d      	ldr	r3, [pc, #436]	@ (80016a8 <main+0x420>)
 80014f4:	2200      	movs	r2, #0
 80014f6:	701a      	strb	r2, [r3, #0]
			  HAL_I2C_Master_Receive_DMA(&hi2c1, SENSOR_ADDR << 1 | 0x01, rx_buf, 6);
 80014f8:	2306      	movs	r3, #6
 80014fa:	4a6c      	ldr	r2, [pc, #432]	@ (80016ac <main+0x424>)
 80014fc:	21e1      	movs	r1, #225	@ 0xe1
 80014fe:	4869      	ldr	r0, [pc, #420]	@ (80016a4 <main+0x41c>)
 8001500:	f002 f9be 	bl	8003880 <HAL_I2C_Master_Receive_DMA>
		  }
		  if (i2c_rx_flag) {
 8001504:	4b6a      	ldr	r3, [pc, #424]	@ (80016b0 <main+0x428>)
 8001506:	781b      	ldrb	r3, [r3, #0]
 8001508:	b2db      	uxtb	r3, r3
 800150a:	2b00      	cmp	r3, #0
 800150c:	f000 8095 	beq.w	800163a <main+0x3b2>
			  i2c_rx_flag = 0;
 8001510:	4b67      	ldr	r3, [pc, #412]	@ (80016b0 <main+0x428>)
 8001512:	2200      	movs	r2, #0
 8001514:	701a      	strb	r2, [r3, #0]
			  uint16_t raw_temp = (rx_buf[0] << 8) | rx_buf[1];
 8001516:	4b65      	ldr	r3, [pc, #404]	@ (80016ac <main+0x424>)
 8001518:	781b      	ldrb	r3, [r3, #0]
 800151a:	021b      	lsls	r3, r3, #8
 800151c:	b21a      	sxth	r2, r3
 800151e:	4b63      	ldr	r3, [pc, #396]	@ (80016ac <main+0x424>)
 8001520:	785b      	ldrb	r3, [r3, #1]
 8001522:	b21b      	sxth	r3, r3
 8001524:	4313      	orrs	r3, r2
 8001526:	b21b      	sxth	r3, r3
 8001528:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
			  uint16_t raw_hum  = (rx_buf[3] << 8) | rx_buf[4];
 800152c:	4b5f      	ldr	r3, [pc, #380]	@ (80016ac <main+0x424>)
 800152e:	78db      	ldrb	r3, [r3, #3]
 8001530:	021b      	lsls	r3, r3, #8
 8001532:	b21a      	sxth	r2, r3
 8001534:	4b5d      	ldr	r3, [pc, #372]	@ (80016ac <main+0x424>)
 8001536:	791b      	ldrb	r3, [r3, #4]
 8001538:	b21b      	sxth	r3, r3
 800153a:	4313      	orrs	r3, r2
 800153c:	b21b      	sxth	r3, r3
 800153e:	f8a7 306a 	strh.w	r3, [r7, #106]	@ 0x6a
			  temp = -45.0 + 175.0 * ((float)raw_temp / 65535.0);
 8001542:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8001546:	ee07 3a90 	vmov	s15, r3
 800154a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800154e:	ee17 0a90 	vmov	r0, s15
 8001552:	f7fe fff9 	bl	8000548 <__aeabi_f2d>
 8001556:	a34a      	add	r3, pc, #296	@ (adr r3, 8001680 <main+0x3f8>)
 8001558:	e9d3 2300 	ldrd	r2, r3, [r3]
 800155c:	f7ff f976 	bl	800084c <__aeabi_ddiv>
 8001560:	4602      	mov	r2, r0
 8001562:	460b      	mov	r3, r1
 8001564:	4610      	mov	r0, r2
 8001566:	4619      	mov	r1, r3
 8001568:	a347      	add	r3, pc, #284	@ (adr r3, 8001688 <main+0x400>)
 800156a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800156e:	f7ff f843 	bl	80005f8 <__aeabi_dmul>
 8001572:	4602      	mov	r2, r0
 8001574:	460b      	mov	r3, r1
 8001576:	4610      	mov	r0, r2
 8001578:	4619      	mov	r1, r3
 800157a:	f04f 0200 	mov.w	r2, #0
 800157e:	4b4d      	ldr	r3, [pc, #308]	@ (80016b4 <main+0x42c>)
 8001580:	f7fe fe82 	bl	8000288 <__aeabi_dsub>
 8001584:	4602      	mov	r2, r0
 8001586:	460b      	mov	r3, r1
 8001588:	4610      	mov	r0, r2
 800158a:	4619      	mov	r1, r3
 800158c:	f7ff fb0c 	bl	8000ba8 <__aeabi_d2f>
 8001590:	4603      	mov	r3, r0
 8001592:	4a49      	ldr	r2, [pc, #292]	@ (80016b8 <main+0x430>)
 8001594:	6013      	str	r3, [r2, #0]
			  hum  = 100.0 * ((float)raw_hum / 65535.0);
 8001596:	f8b7 306a 	ldrh.w	r3, [r7, #106]	@ 0x6a
 800159a:	ee07 3a90 	vmov	s15, r3
 800159e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80015a2:	ee17 0a90 	vmov	r0, s15
 80015a6:	f7fe ffcf 	bl	8000548 <__aeabi_f2d>
 80015aa:	a335      	add	r3, pc, #212	@ (adr r3, 8001680 <main+0x3f8>)
 80015ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015b0:	f7ff f94c 	bl	800084c <__aeabi_ddiv>
 80015b4:	4602      	mov	r2, r0
 80015b6:	460b      	mov	r3, r1
 80015b8:	4610      	mov	r0, r2
 80015ba:	4619      	mov	r1, r3
 80015bc:	f04f 0200 	mov.w	r2, #0
 80015c0:	4b3e      	ldr	r3, [pc, #248]	@ (80016bc <main+0x434>)
 80015c2:	f7ff f819 	bl	80005f8 <__aeabi_dmul>
 80015c6:	4602      	mov	r2, r0
 80015c8:	460b      	mov	r3, r1
 80015ca:	4610      	mov	r0, r2
 80015cc:	4619      	mov	r1, r3
 80015ce:	f7ff faeb 	bl	8000ba8 <__aeabi_d2f>
 80015d2:	4603      	mov	r3, r0
 80015d4:	4a3a      	ldr	r2, [pc, #232]	@ (80016c0 <main+0x438>)
 80015d6:	6013      	str	r3, [r2, #0]
			  char sensor_data[64];
			  snprintf(sensor_data, sizeof(sensor_data),"Temperature: %.2f °C, Humidity: %.2f", temp, hum);
 80015d8:	4b37      	ldr	r3, [pc, #220]	@ (80016b8 <main+0x430>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	4618      	mov	r0, r3
 80015de:	f7fe ffb3 	bl	8000548 <__aeabi_f2d>
 80015e2:	4604      	mov	r4, r0
 80015e4:	460d      	mov	r5, r1
 80015e6:	4b36      	ldr	r3, [pc, #216]	@ (80016c0 <main+0x438>)
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	4618      	mov	r0, r3
 80015ec:	f7fe ffac 	bl	8000548 <__aeabi_f2d>
 80015f0:	4602      	mov	r2, r0
 80015f2:	460b      	mov	r3, r1
 80015f4:	f107 0020 	add.w	r0, r7, #32
 80015f8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80015fc:	e9cd 4500 	strd	r4, r5, [sp]
 8001600:	4a30      	ldr	r2, [pc, #192]	@ (80016c4 <main+0x43c>)
 8001602:	2140      	movs	r1, #64	@ 0x40
 8001604:	f006 ff60 	bl	80084c8 <sniprintf>
			  int msg_len = strlen(sensor_data);
 8001608:	f107 0320 	add.w	r3, r7, #32
 800160c:	4618      	mov	r0, r3
 800160e:	f7fe fe2f 	bl	8000270 <strlen>
 8001612:	4603      	mov	r3, r0
 8001614:	667b      	str	r3, [r7, #100]	@ 0x64
			  char at_command[32];
			  snprintf(at_command, sizeof(at_command), "AT+CIPSEND=%d\r\n", msg_len);
 8001616:	4638      	mov	r0, r7
 8001618:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800161a:	4a2b      	ldr	r2, [pc, #172]	@ (80016c8 <main+0x440>)
 800161c:	2120      	movs	r1, #32
 800161e:	f006 ff53 	bl	80084c8 <sniprintf>
			  HAL_Send_AT_Message(at_command);
 8001622:	463b      	mov	r3, r7
 8001624:	4618      	mov	r0, r3
 8001626:	f000 f995 	bl	8001954 <HAL_Send_AT_Message>
			  HAL_Delay(5);
 800162a:	2005      	movs	r0, #5
 800162c:	f000 ff80 	bl	8002530 <HAL_Delay>
			  HAL_Send_AT_Message(sensor_data);
 8001630:	f107 0320 	add.w	r3, r7, #32
 8001634:	4618      	mov	r0, r3
 8001636:	f000 f98d 	bl	8001954 <HAL_Send_AT_Message>
		  }
		  if (!tim_flag && !rx_event_usart1 && !rx_event_uart5 && !i2c_tx_flag && !i2c_rx_flag) {
 800163a:	4b19      	ldr	r3, [pc, #100]	@ (80016a0 <main+0x418>)
 800163c:	781b      	ldrb	r3, [r3, #0]
 800163e:	b2db      	uxtb	r3, r3
 8001640:	2b00      	cmp	r3, #0
 8001642:	f47f ae6f 	bne.w	8001324 <main+0x9c>
 8001646:	4b21      	ldr	r3, [pc, #132]	@ (80016cc <main+0x444>)
 8001648:	781b      	ldrb	r3, [r3, #0]
 800164a:	b2db      	uxtb	r3, r3
 800164c:	2b00      	cmp	r3, #0
 800164e:	f47f ae69 	bne.w	8001324 <main+0x9c>
 8001652:	4b1f      	ldr	r3, [pc, #124]	@ (80016d0 <main+0x448>)
 8001654:	781b      	ldrb	r3, [r3, #0]
 8001656:	b2db      	uxtb	r3, r3
 8001658:	2b00      	cmp	r3, #0
 800165a:	f47f ae63 	bne.w	8001324 <main+0x9c>
 800165e:	4b12      	ldr	r3, [pc, #72]	@ (80016a8 <main+0x420>)
 8001660:	781b      	ldrb	r3, [r3, #0]
 8001662:	b2db      	uxtb	r3, r3
 8001664:	2b00      	cmp	r3, #0
 8001666:	f47f ae5d 	bne.w	8001324 <main+0x9c>
 800166a:	4b11      	ldr	r3, [pc, #68]	@ (80016b0 <main+0x428>)
 800166c:	781b      	ldrb	r3, [r3, #0]
 800166e:	b2db      	uxtb	r3, r3
 8001670:	2b00      	cmp	r3, #0
 8001672:	f47f ae57 	bne.w	8001324 <main+0x9c>
		      __WFI();  // Puts the CPU in Sleep mode!
 8001676:	bf30      	wfi
	  if (working_phase == HAL_PHASE_SETUP) {
 8001678:	e654      	b.n	8001324 <main+0x9c>
 800167a:	bf00      	nop
 800167c:	f3af 8000 	nop.w
 8001680:	00000000 	.word	0x00000000
 8001684:	40efffe0 	.word	0x40efffe0
 8001688:	00000000 	.word	0x00000000
 800168c:	4065e000 	.word	0x4065e000
 8001690:	2000080d 	.word	0x2000080d
 8001694:	20000001 	.word	0x20000001
 8001698:	40020c00 	.word	0x40020c00
 800169c:	2000082c 	.word	0x2000082c
 80016a0:	20000818 	.word	0x20000818
 80016a4:	200001f4 	.word	0x200001f4
 80016a8:	20000819 	.word	0x20000819
 80016ac:	2000081c 	.word	0x2000081c
 80016b0:	2000081a 	.word	0x2000081a
 80016b4:	40468000 	.word	0x40468000
 80016b8:	20000810 	.word	0x20000810
 80016bc:	40590000 	.word	0x40590000
 80016c0:	20000814 	.word	0x20000814
 80016c4:	0800a7f8 	.word	0x0800a7f8
 80016c8:	0800a820 	.word	0x0800a820
 80016cc:	20000809 	.word	0x20000809
 80016d0:	2000080a 	.word	0x2000080a

080016d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b094      	sub	sp, #80	@ 0x50
 80016d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80016da:	f107 0320 	add.w	r3, r7, #32
 80016de:	2230      	movs	r2, #48	@ 0x30
 80016e0:	2100      	movs	r1, #0
 80016e2:	4618      	mov	r0, r3
 80016e4:	f006 ff87 	bl	80085f6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80016e8:	f107 030c 	add.w	r3, r7, #12
 80016ec:	2200      	movs	r2, #0
 80016ee:	601a      	str	r2, [r3, #0]
 80016f0:	605a      	str	r2, [r3, #4]
 80016f2:	609a      	str	r2, [r3, #8]
 80016f4:	60da      	str	r2, [r3, #12]
 80016f6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80016f8:	2300      	movs	r3, #0
 80016fa:	60bb      	str	r3, [r7, #8]
 80016fc:	4b28      	ldr	r3, [pc, #160]	@ (80017a0 <SystemClock_Config+0xcc>)
 80016fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001700:	4a27      	ldr	r2, [pc, #156]	@ (80017a0 <SystemClock_Config+0xcc>)
 8001702:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001706:	6413      	str	r3, [r2, #64]	@ 0x40
 8001708:	4b25      	ldr	r3, [pc, #148]	@ (80017a0 <SystemClock_Config+0xcc>)
 800170a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800170c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001710:	60bb      	str	r3, [r7, #8]
 8001712:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001714:	2300      	movs	r3, #0
 8001716:	607b      	str	r3, [r7, #4]
 8001718:	4b22      	ldr	r3, [pc, #136]	@ (80017a4 <SystemClock_Config+0xd0>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	4a21      	ldr	r2, [pc, #132]	@ (80017a4 <SystemClock_Config+0xd0>)
 800171e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001722:	6013      	str	r3, [r2, #0]
 8001724:	4b1f      	ldr	r3, [pc, #124]	@ (80017a4 <SystemClock_Config+0xd0>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800172c:	607b      	str	r3, [r7, #4]
 800172e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001730:	2301      	movs	r3, #1
 8001732:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001734:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001738:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800173a:	2302      	movs	r3, #2
 800173c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800173e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001742:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001744:	2308      	movs	r3, #8
 8001746:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001748:	23a8      	movs	r3, #168	@ 0xa8
 800174a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800174c:	2302      	movs	r3, #2
 800174e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001750:	2304      	movs	r3, #4
 8001752:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001754:	f107 0320 	add.w	r3, r7, #32
 8001758:	4618      	mov	r0, r3
 800175a:	f003 fe87 	bl	800546c <HAL_RCC_OscConfig>
 800175e:	4603      	mov	r3, r0
 8001760:	2b00      	cmp	r3, #0
 8001762:	d001      	beq.n	8001768 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001764:	f000 f942 	bl	80019ec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001768:	230f      	movs	r3, #15
 800176a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800176c:	2302      	movs	r3, #2
 800176e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001770:	2300      	movs	r3, #0
 8001772:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001774:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001778:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800177a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800177e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001780:	f107 030c 	add.w	r3, r7, #12
 8001784:	2102      	movs	r1, #2
 8001786:	4618      	mov	r0, r3
 8001788:	f004 f8e8 	bl	800595c <HAL_RCC_ClockConfig>
 800178c:	4603      	mov	r3, r0
 800178e:	2b00      	cmp	r3, #0
 8001790:	d001      	beq.n	8001796 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001792:	f000 f92b 	bl	80019ec <Error_Handler>
  }
}
 8001796:	bf00      	nop
 8001798:	3750      	adds	r7, #80	@ 0x50
 800179a:	46bd      	mov	sp, r7
 800179c:	bd80      	pop	{r7, pc}
 800179e:	bf00      	nop
 80017a0:	40023800 	.word	0x40023800
 80017a4:	40007000 	.word	0x40007000

080017a8 <HAL_UART_TxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 80017a8:	b480      	push	{r7}
 80017aa:	b083      	sub	sp, #12
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART1) {
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	4a05      	ldr	r2, [pc, #20]	@ (80017cc <HAL_UART_TxCpltCallback+0x24>)
 80017b6:	4293      	cmp	r3, r2
 80017b8:	d102      	bne.n	80017c0 <HAL_UART_TxCpltCallback+0x18>
		uart_tx_done = 1;
 80017ba:	4b05      	ldr	r3, [pc, #20]	@ (80017d0 <HAL_UART_TxCpltCallback+0x28>)
 80017bc:	2201      	movs	r2, #1
 80017be:	701a      	strb	r2, [r3, #0]
		//HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, 1);
	}
	if (huart->Instance == UART5) {

	}
}
 80017c0:	bf00      	nop
 80017c2:	370c      	adds	r7, #12
 80017c4:	46bd      	mov	sp, r7
 80017c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ca:	4770      	bx	lr
 80017cc:	40011000 	.word	0x40011000
 80017d0:	20000808 	.word	0x20000808

080017d4 <HAL_UARTEx_RxEventCallback>:



void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size) {
 80017d4:	b480      	push	{r7}
 80017d6:	b083      	sub	sp, #12
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
 80017dc:	460b      	mov	r3, r1
 80017de:	807b      	strh	r3, [r7, #2]
	if (huart->Instance == USART1) {
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	4a0d      	ldr	r2, [pc, #52]	@ (800181c <HAL_UARTEx_RxEventCallback+0x48>)
 80017e6:	4293      	cmp	r3, r2
 80017e8:	d106      	bne.n	80017f8 <HAL_UARTEx_RxEventCallback+0x24>
		rx_event_usart1 = 1;
 80017ea:	4b0d      	ldr	r3, [pc, #52]	@ (8001820 <HAL_UARTEx_RxEventCallback+0x4c>)
 80017ec:	2201      	movs	r2, #1
 80017ee:	701a      	strb	r2, [r3, #0]
		cnt = Size;
 80017f0:	887b      	ldrh	r3, [r7, #2]
 80017f2:	b2da      	uxtb	r2, r3
 80017f4:	4b0b      	ldr	r3, [pc, #44]	@ (8001824 <HAL_UARTEx_RxEventCallback+0x50>)
 80017f6:	701a      	strb	r2, [r3, #0]
	}
	if (huart->Instance == UART5) {
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	4a0a      	ldr	r2, [pc, #40]	@ (8001828 <HAL_UARTEx_RxEventCallback+0x54>)
 80017fe:	4293      	cmp	r3, r2
 8001800:	d106      	bne.n	8001810 <HAL_UARTEx_RxEventCallback+0x3c>
		rx_event_uart5 = 1;
 8001802:	4b0a      	ldr	r3, [pc, #40]	@ (800182c <HAL_UARTEx_RxEventCallback+0x58>)
 8001804:	2201      	movs	r2, #1
 8001806:	701a      	strb	r2, [r3, #0]
		cnt_2 = Size;
 8001808:	887b      	ldrh	r3, [r7, #2]
 800180a:	b2da      	uxtb	r2, r3
 800180c:	4b08      	ldr	r3, [pc, #32]	@ (8001830 <HAL_UARTEx_RxEventCallback+0x5c>)
 800180e:	701a      	strb	r2, [r3, #0]
	}
}
 8001810:	bf00      	nop
 8001812:	370c      	adds	r7, #12
 8001814:	46bd      	mov	sp, r7
 8001816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181a:	4770      	bx	lr
 800181c:	40011000 	.word	0x40011000
 8001820:	20000809 	.word	0x20000809
 8001824:	2000087c 	.word	0x2000087c
 8001828:	40005000 	.word	0x40005000
 800182c:	2000080a 	.word	0x2000080a
 8001830:	2000087d 	.word	0x2000087d

08001834 <HAL_I2C_MasterTxCpltCallback>:
void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c) {
 8001834:	b480      	push	{r7}
 8001836:	b083      	sub	sp, #12
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
    i2c_tx_flag = 1;
 800183c:	4b04      	ldr	r3, [pc, #16]	@ (8001850 <HAL_I2C_MasterTxCpltCallback+0x1c>)
 800183e:	2201      	movs	r2, #1
 8001840:	701a      	strb	r2, [r3, #0]
}
 8001842:	bf00      	nop
 8001844:	370c      	adds	r7, #12
 8001846:	46bd      	mov	sp, r7
 8001848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184c:	4770      	bx	lr
 800184e:	bf00      	nop
 8001850:	20000819 	.word	0x20000819

08001854 <HAL_I2C_MasterRxCpltCallback>:

void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c) {
 8001854:	b480      	push	{r7}
 8001856:	b083      	sub	sp, #12
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
	i2c_rx_flag = 1;
 800185c:	4b04      	ldr	r3, [pc, #16]	@ (8001870 <HAL_I2C_MasterRxCpltCallback+0x1c>)
 800185e:	2201      	movs	r2, #1
 8001860:	701a      	strb	r2, [r3, #0]
}
 8001862:	bf00      	nop
 8001864:	370c      	adds	r7, #12
 8001866:	46bd      	mov	sp, r7
 8001868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186c:	4770      	bx	lr
 800186e:	bf00      	nop
 8001870:	2000081a 	.word	0x2000081a

08001874 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001874:	b480      	push	{r7}
 8001876:	b083      	sub	sp, #12
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM2) {
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001884:	d102      	bne.n	800188c <HAL_TIM_PeriodElapsedCallback+0x18>
		tim_flag = 1;
 8001886:	4b04      	ldr	r3, [pc, #16]	@ (8001898 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8001888:	2201      	movs	r2, #1
 800188a:	701a      	strb	r2, [r3, #0]
	}
}
 800188c:	bf00      	nop
 800188e:	370c      	adds	r7, #12
 8001890:	46bd      	mov	sp, r7
 8001892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001896:	4770      	bx	lr
 8001898:	20000818 	.word	0x20000818

0800189c <LED_Checking>:



void LED_Checking() {
 800189c:	b580      	push	{r7, lr}
 800189e:	af00      	add	r7, sp, #0
	  if (strstr(string_buffer_1, "OK") != NULL) {
 80018a0:	4926      	ldr	r1, [pc, #152]	@ (800193c <LED_Checking+0xa0>)
 80018a2:	4827      	ldr	r0, [pc, #156]	@ (8001940 <LED_Checking+0xa4>)
 80018a4:	f006 feaf 	bl	8008606 <strstr>
 80018a8:	4603      	mov	r3, r0
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d015      	beq.n	80018da <LED_Checking+0x3e>
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 80018ae:	2200      	movs	r2, #0
 80018b0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80018b4:	4823      	ldr	r0, [pc, #140]	@ (8001944 <LED_Checking+0xa8>)
 80018b6:	f001 fd29 	bl	800330c <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 80018ba:	2200      	movs	r2, #0
 80018bc:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80018c0:	4820      	ldr	r0, [pc, #128]	@ (8001944 <LED_Checking+0xa8>)
 80018c2:	f001 fd23 	bl	800330c <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
 80018c6:	2201      	movs	r2, #1
 80018c8:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80018cc:	481d      	ldr	r0, [pc, #116]	@ (8001944 <LED_Checking+0xa8>)
 80018ce:	f001 fd1d 	bl	800330c <HAL_GPIO_WritePin>
		  ok_flag = 1;
 80018d2:	4b1d      	ldr	r3, [pc, #116]	@ (8001948 <LED_Checking+0xac>)
 80018d4:	2201      	movs	r2, #1
 80018d6:	701a      	strb	r2, [r3, #0]
	  else {
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
	  }
}
 80018d8:	e02e      	b.n	8001938 <LED_Checking+0x9c>
	  else if (strstr(string_buffer_1, "ERROR") != NULL) {
 80018da:	491c      	ldr	r1, [pc, #112]	@ (800194c <LED_Checking+0xb0>)
 80018dc:	4818      	ldr	r0, [pc, #96]	@ (8001940 <LED_Checking+0xa4>)
 80018de:	f006 fe92 	bl	8008606 <strstr>
 80018e2:	4603      	mov	r3, r0
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d015      	beq.n	8001914 <LED_Checking+0x78>
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 80018e8:	2200      	movs	r2, #0
 80018ea:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80018ee:	4815      	ldr	r0, [pc, #84]	@ (8001944 <LED_Checking+0xa8>)
 80018f0:	f001 fd0c 	bl	800330c <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 80018f4:	2200      	movs	r2, #0
 80018f6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80018fa:	4812      	ldr	r0, [pc, #72]	@ (8001944 <LED_Checking+0xa8>)
 80018fc:	f001 fd06 	bl	800330c <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 8001900:	2201      	movs	r2, #1
 8001902:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001906:	480f      	ldr	r0, [pc, #60]	@ (8001944 <LED_Checking+0xa8>)
 8001908:	f001 fd00 	bl	800330c <HAL_GPIO_WritePin>
		  error_flag = 1;
 800190c:	4b10      	ldr	r3, [pc, #64]	@ (8001950 <LED_Checking+0xb4>)
 800190e:	2201      	movs	r2, #1
 8001910:	701a      	strb	r2, [r3, #0]
}
 8001912:	e011      	b.n	8001938 <LED_Checking+0x9c>
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 8001914:	2201      	movs	r2, #1
 8001916:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800191a:	480a      	ldr	r0, [pc, #40]	@ (8001944 <LED_Checking+0xa8>)
 800191c:	f001 fcf6 	bl	800330c <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 8001920:	2200      	movs	r2, #0
 8001922:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001926:	4807      	ldr	r0, [pc, #28]	@ (8001944 <LED_Checking+0xa8>)
 8001928:	f001 fcf0 	bl	800330c <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 800192c:	2200      	movs	r2, #0
 800192e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001932:	4804      	ldr	r0, [pc, #16]	@ (8001944 <LED_Checking+0xa8>)
 8001934:	f001 fcea 	bl	800330c <HAL_GPIO_WritePin>
}
 8001938:	bf00      	nop
 800193a:	bd80      	pop	{r7, pc}
 800193c:	0800a830 	.word	0x0800a830
 8001940:	20000608 	.word	0x20000608
 8001944:	40020c00 	.word	0x40020c00
 8001948:	20000000 	.word	0x20000000
 800194c:	0800a834 	.word	0x0800a834
 8001950:	2000080e 	.word	0x2000080e

08001954 <HAL_Send_AT_Message>:
    while (len > 0 && (str[len - 1] == '\r' || str[len - 1] == '\n')) {
        str[--len] = '\0';
    }
}

void HAL_Send_AT_Message(char* buffer) {
 8001954:	b580      	push	{r7, lr}
 8001956:	b082      	sub	sp, #8
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
	  sprintf(tx_buffer_ch1, buffer);
 800195c:	6879      	ldr	r1, [r7, #4]
 800195e:	4808      	ldr	r0, [pc, #32]	@ (8001980 <HAL_Send_AT_Message+0x2c>)
 8001960:	f006 fde6 	bl	8008530 <siprintf>
	  HAL_UART_Transmit_DMA(&huart1, (uint8_t*)tx_buffer_ch1, strlen(tx_buffer_ch1));
 8001964:	4806      	ldr	r0, [pc, #24]	@ (8001980 <HAL_Send_AT_Message+0x2c>)
 8001966:	f7fe fc83 	bl	8000270 <strlen>
 800196a:	4603      	mov	r3, r0
 800196c:	b29b      	uxth	r3, r3
 800196e:	461a      	mov	r2, r3
 8001970:	4903      	ldr	r1, [pc, #12]	@ (8001980 <HAL_Send_AT_Message+0x2c>)
 8001972:	4804      	ldr	r0, [pc, #16]	@ (8001984 <HAL_Send_AT_Message+0x30>)
 8001974:	f004 fed8 	bl	8006728 <HAL_UART_Transmit_DMA>
}
 8001978:	bf00      	nop
 800197a:	3708      	adds	r7, #8
 800197c:	46bd      	mov	sp, r7
 800197e:	bd80      	pop	{r7, pc}
 8001980:	20000308 	.word	0x20000308
 8001984:	200008c8 	.word	0x200008c8

08001988 <ESP32_Initialization_Steps>:

void ESP32_Initialization_Steps(uint8_t setup_value) {
 8001988:	b580      	push	{r7, lr}
 800198a:	b082      	sub	sp, #8
 800198c:	af00      	add	r7, sp, #0
 800198e:	4603      	mov	r3, r0
 8001990:	71fb      	strb	r3, [r7, #7]
	  switch (setup_value) {
 8001992:	79fb      	ldrb	r3, [r7, #7]
 8001994:	2b03      	cmp	r3, #3
 8001996:	d81b      	bhi.n	80019d0 <ESP32_Initialization_Steps+0x48>
 8001998:	a201      	add	r2, pc, #4	@ (adr r2, 80019a0 <ESP32_Initialization_Steps+0x18>)
 800199a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800199e:	bf00      	nop
 80019a0:	080019b1 	.word	0x080019b1
 80019a4:	080019b9 	.word	0x080019b9
 80019a8:	080019c1 	.word	0x080019c1
 80019ac:	080019c9 	.word	0x080019c9
		case 0:
			HAL_Send_AT_Message("AT\r\n");
 80019b0:	480a      	ldr	r0, [pc, #40]	@ (80019dc <ESP32_Initialization_Steps+0x54>)
 80019b2:	f7ff ffcf 	bl	8001954 <HAL_Send_AT_Message>
			break;
 80019b6:	e00c      	b.n	80019d2 <ESP32_Initialization_Steps+0x4a>
		case 1:
			HAL_Send_AT_Message("AT+CWMODE=1\r\n");
 80019b8:	4809      	ldr	r0, [pc, #36]	@ (80019e0 <ESP32_Initialization_Steps+0x58>)
 80019ba:	f7ff ffcb 	bl	8001954 <HAL_Send_AT_Message>
			break;
 80019be:	e008      	b.n	80019d2 <ESP32_Initialization_Steps+0x4a>
		case 2:
			HAL_Send_AT_Message("AT+CWJAP=\"A1-Dizdar-24ghz\",\"xbaja888\"\r\n");
 80019c0:	4808      	ldr	r0, [pc, #32]	@ (80019e4 <ESP32_Initialization_Steps+0x5c>)
 80019c2:	f7ff ffc7 	bl	8001954 <HAL_Send_AT_Message>
			break;
 80019c6:	e004      	b.n	80019d2 <ESP32_Initialization_Steps+0x4a>
		case 3:
			HAL_Send_AT_Message("AT+CIPSTART=\"TCP\",\"192.168.100.21\",5500\r\n");
 80019c8:	4807      	ldr	r0, [pc, #28]	@ (80019e8 <ESP32_Initialization_Steps+0x60>)
 80019ca:	f7ff ffc3 	bl	8001954 <HAL_Send_AT_Message>
			break;
 80019ce:	e000      	b.n	80019d2 <ESP32_Initialization_Steps+0x4a>
		default:
			break;
 80019d0:	bf00      	nop
	}
}
 80019d2:	bf00      	nop
 80019d4:	3708      	adds	r7, #8
 80019d6:	46bd      	mov	sp, r7
 80019d8:	bd80      	pop	{r7, pc}
 80019da:	bf00      	nop
 80019dc:	0800a83c 	.word	0x0800a83c
 80019e0:	0800a844 	.word	0x0800a844
 80019e4:	0800a854 	.word	0x0800a854
 80019e8:	0800a87c 	.word	0x0800a87c

080019ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80019ec:	b480      	push	{r7}
 80019ee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80019f0:	b672      	cpsid	i
}
 80019f2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80019f4:	bf00      	nop
 80019f6:	e7fd      	b.n	80019f4 <Error_Handler+0x8>

080019f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80019f8:	b480      	push	{r7}
 80019fa:	b083      	sub	sp, #12
 80019fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019fe:	2300      	movs	r3, #0
 8001a00:	607b      	str	r3, [r7, #4]
 8001a02:	4b10      	ldr	r3, [pc, #64]	@ (8001a44 <HAL_MspInit+0x4c>)
 8001a04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a06:	4a0f      	ldr	r2, [pc, #60]	@ (8001a44 <HAL_MspInit+0x4c>)
 8001a08:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001a0c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001a0e:	4b0d      	ldr	r3, [pc, #52]	@ (8001a44 <HAL_MspInit+0x4c>)
 8001a10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a12:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001a16:	607b      	str	r3, [r7, #4]
 8001a18:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	603b      	str	r3, [r7, #0]
 8001a1e:	4b09      	ldr	r3, [pc, #36]	@ (8001a44 <HAL_MspInit+0x4c>)
 8001a20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a22:	4a08      	ldr	r2, [pc, #32]	@ (8001a44 <HAL_MspInit+0x4c>)
 8001a24:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001a28:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a2a:	4b06      	ldr	r3, [pc, #24]	@ (8001a44 <HAL_MspInit+0x4c>)
 8001a2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a2e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a32:	603b      	str	r3, [r7, #0]
 8001a34:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a36:	bf00      	nop
 8001a38:	370c      	adds	r7, #12
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a40:	4770      	bx	lr
 8001a42:	bf00      	nop
 8001a44:	40023800 	.word	0x40023800

08001a48 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a48:	b480      	push	{r7}
 8001a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001a4c:	bf00      	nop
 8001a4e:	e7fd      	b.n	8001a4c <NMI_Handler+0x4>

08001a50 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a50:	b480      	push	{r7}
 8001a52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a54:	bf00      	nop
 8001a56:	e7fd      	b.n	8001a54 <HardFault_Handler+0x4>

08001a58 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a5c:	bf00      	nop
 8001a5e:	e7fd      	b.n	8001a5c <MemManage_Handler+0x4>

08001a60 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a60:	b480      	push	{r7}
 8001a62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a64:	bf00      	nop
 8001a66:	e7fd      	b.n	8001a64 <BusFault_Handler+0x4>

08001a68 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a6c:	bf00      	nop
 8001a6e:	e7fd      	b.n	8001a6c <UsageFault_Handler+0x4>

08001a70 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a70:	b480      	push	{r7}
 8001a72:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a74:	bf00      	nop
 8001a76:	46bd      	mov	sp, r7
 8001a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7c:	4770      	bx	lr

08001a7e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a7e:	b480      	push	{r7}
 8001a80:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a82:	bf00      	nop
 8001a84:	46bd      	mov	sp, r7
 8001a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8a:	4770      	bx	lr

08001a8c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a90:	bf00      	nop
 8001a92:	46bd      	mov	sp, r7
 8001a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a98:	4770      	bx	lr

08001a9a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a9a:	b580      	push	{r7, lr}
 8001a9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a9e:	f000 fd27 	bl	80024f0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001aa2:	bf00      	nop
 8001aa4:	bd80      	pop	{r7, pc}
	...

08001aa8 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_rx);
 8001aac:	4802      	ldr	r0, [pc, #8]	@ (8001ab8 <DMA1_Stream0_IRQHandler+0x10>)
 8001aae:	f001 f80d 	bl	8002acc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001ab2:	bf00      	nop
 8001ab4:	bd80      	pop	{r7, pc}
 8001ab6:	bf00      	nop
 8001ab8:	20000910 	.word	0x20000910

08001abc <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8001ac0:	4802      	ldr	r0, [pc, #8]	@ (8001acc <DMA1_Stream5_IRQHandler+0x10>)
 8001ac2:	f001 f803 	bl	8002acc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8001ac6:	bf00      	nop
 8001ac8:	bd80      	pop	{r7, pc}
 8001aca:	bf00      	nop
 8001acc:	20000248 	.word	0x20000248

08001ad0 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8001ad4:	4802      	ldr	r0, [pc, #8]	@ (8001ae0 <DMA1_Stream6_IRQHandler+0x10>)
 8001ad6:	f000 fff9 	bl	8002acc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8001ada:	bf00      	nop
 8001adc:	bd80      	pop	{r7, pc}
 8001ade:	bf00      	nop
 8001ae0:	200002a8 	.word	0x200002a8

08001ae4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001ae8:	4802      	ldr	r0, [pc, #8]	@ (8001af4 <TIM2_IRQHandler+0x10>)
 8001aea:	f004 fa17 	bl	8005f1c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001aee:	bf00      	nop
 8001af0:	bd80      	pop	{r7, pc}
 8001af2:	bf00      	nop
 8001af4:	2000082c 	.word	0x2000082c

08001af8 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001afc:	4802      	ldr	r0, [pc, #8]	@ (8001b08 <I2C1_EV_IRQHandler+0x10>)
 8001afe:	f001 ffeb 	bl	8003ad8 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001b02:	bf00      	nop
 8001b04:	bd80      	pop	{r7, pc}
 8001b06:	bf00      	nop
 8001b08:	200001f4 	.word	0x200001f4

08001b0c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001b10:	4802      	ldr	r0, [pc, #8]	@ (8001b1c <USART1_IRQHandler+0x10>)
 8001b12:	f004 fed7 	bl	80068c4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001b16:	bf00      	nop
 8001b18:	bd80      	pop	{r7, pc}
 8001b1a:	bf00      	nop
 8001b1c:	200008c8 	.word	0x200008c8

08001b20 <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_tx);
 8001b24:	4802      	ldr	r0, [pc, #8]	@ (8001b30 <DMA1_Stream7_IRQHandler+0x10>)
 8001b26:	f000 ffd1 	bl	8002acc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 8001b2a:	bf00      	nop
 8001b2c:	bd80      	pop	{r7, pc}
 8001b2e:	bf00      	nop
 8001b30:	20000970 	.word	0x20000970

08001b34 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8001b38:	4802      	ldr	r0, [pc, #8]	@ (8001b44 <UART5_IRQHandler+0x10>)
 8001b3a:	f004 fec3 	bl	80068c4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 8001b3e:	bf00      	nop
 8001b40:	bd80      	pop	{r7, pc}
 8001b42:	bf00      	nop
 8001b44:	20000880 	.word	0x20000880

08001b48 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001b4c:	4802      	ldr	r0, [pc, #8]	@ (8001b58 <DMA2_Stream2_IRQHandler+0x10>)
 8001b4e:	f000 ffbd 	bl	8002acc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8001b52:	bf00      	nop
 8001b54:	bd80      	pop	{r7, pc}
 8001b56:	bf00      	nop
 8001b58:	200009d0 	.word	0x200009d0

08001b5c <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8001b60:	4802      	ldr	r0, [pc, #8]	@ (8001b6c <DMA2_Stream7_IRQHandler+0x10>)
 8001b62:	f000 ffb3 	bl	8002acc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8001b66:	bf00      	nop
 8001b68:	bd80      	pop	{r7, pc}
 8001b6a:	bf00      	nop
 8001b6c:	20000a30 	.word	0x20000a30

08001b70 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001b70:	b480      	push	{r7}
 8001b72:	af00      	add	r7, sp, #0
  return 1;
 8001b74:	2301      	movs	r3, #1
}
 8001b76:	4618      	mov	r0, r3
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7e:	4770      	bx	lr

08001b80 <_kill>:

int _kill(int pid, int sig)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b082      	sub	sp, #8
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
 8001b88:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001b8a:	f006 fd9d 	bl	80086c8 <__errno>
 8001b8e:	4603      	mov	r3, r0
 8001b90:	2216      	movs	r2, #22
 8001b92:	601a      	str	r2, [r3, #0]
  return -1;
 8001b94:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001b98:	4618      	mov	r0, r3
 8001b9a:	3708      	adds	r7, #8
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	bd80      	pop	{r7, pc}

08001ba0 <_exit>:

void _exit (int status)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b082      	sub	sp, #8
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001ba8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001bac:	6878      	ldr	r0, [r7, #4]
 8001bae:	f7ff ffe7 	bl	8001b80 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001bb2:	bf00      	nop
 8001bb4:	e7fd      	b.n	8001bb2 <_exit+0x12>

08001bb6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001bb6:	b580      	push	{r7, lr}
 8001bb8:	b086      	sub	sp, #24
 8001bba:	af00      	add	r7, sp, #0
 8001bbc:	60f8      	str	r0, [r7, #12]
 8001bbe:	60b9      	str	r1, [r7, #8]
 8001bc0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	617b      	str	r3, [r7, #20]
 8001bc6:	e00a      	b.n	8001bde <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001bc8:	f3af 8000 	nop.w
 8001bcc:	4601      	mov	r1, r0
 8001bce:	68bb      	ldr	r3, [r7, #8]
 8001bd0:	1c5a      	adds	r2, r3, #1
 8001bd2:	60ba      	str	r2, [r7, #8]
 8001bd4:	b2ca      	uxtb	r2, r1
 8001bd6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bd8:	697b      	ldr	r3, [r7, #20]
 8001bda:	3301      	adds	r3, #1
 8001bdc:	617b      	str	r3, [r7, #20]
 8001bde:	697a      	ldr	r2, [r7, #20]
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	429a      	cmp	r2, r3
 8001be4:	dbf0      	blt.n	8001bc8 <_read+0x12>
  }

  return len;
 8001be6:	687b      	ldr	r3, [r7, #4]
}
 8001be8:	4618      	mov	r0, r3
 8001bea:	3718      	adds	r7, #24
 8001bec:	46bd      	mov	sp, r7
 8001bee:	bd80      	pop	{r7, pc}

08001bf0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b086      	sub	sp, #24
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	60f8      	str	r0, [r7, #12]
 8001bf8:	60b9      	str	r1, [r7, #8]
 8001bfa:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	617b      	str	r3, [r7, #20]
 8001c00:	e009      	b.n	8001c16 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001c02:	68bb      	ldr	r3, [r7, #8]
 8001c04:	1c5a      	adds	r2, r3, #1
 8001c06:	60ba      	str	r2, [r7, #8]
 8001c08:	781b      	ldrb	r3, [r3, #0]
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c10:	697b      	ldr	r3, [r7, #20]
 8001c12:	3301      	adds	r3, #1
 8001c14:	617b      	str	r3, [r7, #20]
 8001c16:	697a      	ldr	r2, [r7, #20]
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	429a      	cmp	r2, r3
 8001c1c:	dbf1      	blt.n	8001c02 <_write+0x12>
  }
  return len;
 8001c1e:	687b      	ldr	r3, [r7, #4]
}
 8001c20:	4618      	mov	r0, r3
 8001c22:	3718      	adds	r7, #24
 8001c24:	46bd      	mov	sp, r7
 8001c26:	bd80      	pop	{r7, pc}

08001c28 <_close>:

int _close(int file)
{
 8001c28:	b480      	push	{r7}
 8001c2a:	b083      	sub	sp, #12
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001c30:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001c34:	4618      	mov	r0, r3
 8001c36:	370c      	adds	r7, #12
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3e:	4770      	bx	lr

08001c40 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001c40:	b480      	push	{r7}
 8001c42:	b083      	sub	sp, #12
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
 8001c48:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001c4a:	683b      	ldr	r3, [r7, #0]
 8001c4c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001c50:	605a      	str	r2, [r3, #4]
  return 0;
 8001c52:	2300      	movs	r3, #0
}
 8001c54:	4618      	mov	r0, r3
 8001c56:	370c      	adds	r7, #12
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5e:	4770      	bx	lr

08001c60 <_isatty>:

int _isatty(int file)
{
 8001c60:	b480      	push	{r7}
 8001c62:	b083      	sub	sp, #12
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001c68:	2301      	movs	r3, #1
}
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	370c      	adds	r7, #12
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c74:	4770      	bx	lr

08001c76 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001c76:	b480      	push	{r7}
 8001c78:	b085      	sub	sp, #20
 8001c7a:	af00      	add	r7, sp, #0
 8001c7c:	60f8      	str	r0, [r7, #12]
 8001c7e:	60b9      	str	r1, [r7, #8]
 8001c80:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001c82:	2300      	movs	r3, #0
}
 8001c84:	4618      	mov	r0, r3
 8001c86:	3714      	adds	r7, #20
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8e:	4770      	bx	lr

08001c90 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b086      	sub	sp, #24
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c98:	4a14      	ldr	r2, [pc, #80]	@ (8001cec <_sbrk+0x5c>)
 8001c9a:	4b15      	ldr	r3, [pc, #84]	@ (8001cf0 <_sbrk+0x60>)
 8001c9c:	1ad3      	subs	r3, r2, r3
 8001c9e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ca0:	697b      	ldr	r3, [r7, #20]
 8001ca2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ca4:	4b13      	ldr	r3, [pc, #76]	@ (8001cf4 <_sbrk+0x64>)
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d102      	bne.n	8001cb2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001cac:	4b11      	ldr	r3, [pc, #68]	@ (8001cf4 <_sbrk+0x64>)
 8001cae:	4a12      	ldr	r2, [pc, #72]	@ (8001cf8 <_sbrk+0x68>)
 8001cb0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001cb2:	4b10      	ldr	r3, [pc, #64]	@ (8001cf4 <_sbrk+0x64>)
 8001cb4:	681a      	ldr	r2, [r3, #0]
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	4413      	add	r3, r2
 8001cba:	693a      	ldr	r2, [r7, #16]
 8001cbc:	429a      	cmp	r2, r3
 8001cbe:	d207      	bcs.n	8001cd0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001cc0:	f006 fd02 	bl	80086c8 <__errno>
 8001cc4:	4603      	mov	r3, r0
 8001cc6:	220c      	movs	r2, #12
 8001cc8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001cca:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001cce:	e009      	b.n	8001ce4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001cd0:	4b08      	ldr	r3, [pc, #32]	@ (8001cf4 <_sbrk+0x64>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001cd6:	4b07      	ldr	r3, [pc, #28]	@ (8001cf4 <_sbrk+0x64>)
 8001cd8:	681a      	ldr	r2, [r3, #0]
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	4413      	add	r3, r2
 8001cde:	4a05      	ldr	r2, [pc, #20]	@ (8001cf4 <_sbrk+0x64>)
 8001ce0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001ce2:	68fb      	ldr	r3, [r7, #12]
}
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	3718      	adds	r7, #24
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	bd80      	pop	{r7, pc}
 8001cec:	20020000 	.word	0x20020000
 8001cf0:	00000400 	.word	0x00000400
 8001cf4:	20000828 	.word	0x20000828
 8001cf8:	20000be0 	.word	0x20000be0

08001cfc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001d00:	4b06      	ldr	r3, [pc, #24]	@ (8001d1c <SystemInit+0x20>)
 8001d02:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001d06:	4a05      	ldr	r2, [pc, #20]	@ (8001d1c <SystemInit+0x20>)
 8001d08:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001d0c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001d10:	bf00      	nop
 8001d12:	46bd      	mov	sp, r7
 8001d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d18:	4770      	bx	lr
 8001d1a:	bf00      	nop
 8001d1c:	e000ed00 	.word	0xe000ed00

08001d20 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b086      	sub	sp, #24
 8001d24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d26:	f107 0308 	add.w	r3, r7, #8
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	601a      	str	r2, [r3, #0]
 8001d2e:	605a      	str	r2, [r3, #4]
 8001d30:	609a      	str	r2, [r3, #8]
 8001d32:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d34:	463b      	mov	r3, r7
 8001d36:	2200      	movs	r2, #0
 8001d38:	601a      	str	r2, [r3, #0]
 8001d3a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001d3c:	4b1e      	ldr	r3, [pc, #120]	@ (8001db8 <MX_TIM2_Init+0x98>)
 8001d3e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001d42:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 4200-1;
 8001d44:	4b1c      	ldr	r3, [pc, #112]	@ (8001db8 <MX_TIM2_Init+0x98>)
 8001d46:	f241 0267 	movw	r2, #4199	@ 0x1067
 8001d4a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d4c:	4b1a      	ldr	r3, [pc, #104]	@ (8001db8 <MX_TIM2_Init+0x98>)
 8001d4e:	2200      	movs	r2, #0
 8001d50:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000-1;
 8001d52:	4b19      	ldr	r3, [pc, #100]	@ (8001db8 <MX_TIM2_Init+0x98>)
 8001d54:	f242 720f 	movw	r2, #9999	@ 0x270f
 8001d58:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d5a:	4b17      	ldr	r3, [pc, #92]	@ (8001db8 <MX_TIM2_Init+0x98>)
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d60:	4b15      	ldr	r3, [pc, #84]	@ (8001db8 <MX_TIM2_Init+0x98>)
 8001d62:	2200      	movs	r2, #0
 8001d64:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001d66:	4814      	ldr	r0, [pc, #80]	@ (8001db8 <MX_TIM2_Init+0x98>)
 8001d68:	f004 f818 	bl	8005d9c <HAL_TIM_Base_Init>
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d001      	beq.n	8001d76 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001d72:	f7ff fe3b 	bl	80019ec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001d76:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001d7a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001d7c:	f107 0308 	add.w	r3, r7, #8
 8001d80:	4619      	mov	r1, r3
 8001d82:	480d      	ldr	r0, [pc, #52]	@ (8001db8 <MX_TIM2_Init+0x98>)
 8001d84:	f004 f9ba 	bl	80060fc <HAL_TIM_ConfigClockSource>
 8001d88:	4603      	mov	r3, r0
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d001      	beq.n	8001d92 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001d8e:	f7ff fe2d 	bl	80019ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d92:	2300      	movs	r3, #0
 8001d94:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d96:	2300      	movs	r3, #0
 8001d98:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001d9a:	463b      	mov	r3, r7
 8001d9c:	4619      	mov	r1, r3
 8001d9e:	4806      	ldr	r0, [pc, #24]	@ (8001db8 <MX_TIM2_Init+0x98>)
 8001da0:	f004 fbe2 	bl	8006568 <HAL_TIMEx_MasterConfigSynchronization>
 8001da4:	4603      	mov	r3, r0
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d001      	beq.n	8001dae <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001daa:	f7ff fe1f 	bl	80019ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001dae:	bf00      	nop
 8001db0:	3718      	adds	r7, #24
 8001db2:	46bd      	mov	sp, r7
 8001db4:	bd80      	pop	{r7, pc}
 8001db6:	bf00      	nop
 8001db8:	2000082c 	.word	0x2000082c

08001dbc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b084      	sub	sp, #16
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001dcc:	d115      	bne.n	8001dfa <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001dce:	2300      	movs	r3, #0
 8001dd0:	60fb      	str	r3, [r7, #12]
 8001dd2:	4b0c      	ldr	r3, [pc, #48]	@ (8001e04 <HAL_TIM_Base_MspInit+0x48>)
 8001dd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dd6:	4a0b      	ldr	r2, [pc, #44]	@ (8001e04 <HAL_TIM_Base_MspInit+0x48>)
 8001dd8:	f043 0301 	orr.w	r3, r3, #1
 8001ddc:	6413      	str	r3, [r2, #64]	@ 0x40
 8001dde:	4b09      	ldr	r3, [pc, #36]	@ (8001e04 <HAL_TIM_Base_MspInit+0x48>)
 8001de0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001de2:	f003 0301 	and.w	r3, r3, #1
 8001de6:	60fb      	str	r3, [r7, #12]
 8001de8:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001dea:	2200      	movs	r2, #0
 8001dec:	2100      	movs	r1, #0
 8001dee:	201c      	movs	r0, #28
 8001df0:	f000 fc9d 	bl	800272e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001df4:	201c      	movs	r0, #28
 8001df6:	f000 fcb6 	bl	8002766 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001dfa:	bf00      	nop
 8001dfc:	3710      	adds	r7, #16
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	bd80      	pop	{r7, pc}
 8001e02:	bf00      	nop
 8001e04:	40023800 	.word	0x40023800

08001e08 <UART_String_Handling_CH1>:
volatile uint8_t cnt = 0, cnt_2 = 0;
volatile uint8_t last_size, last_size_2 = 0;



void UART_String_Handling_CH1() {
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b082      	sub	sp, #8
 8001e0c:	af00      	add	r7, sp, #0
	if (cnt != last_size) {
 8001e0e:	4b43      	ldr	r3, [pc, #268]	@ (8001f1c <UART_String_Handling_CH1+0x114>)
 8001e10:	781b      	ldrb	r3, [r3, #0]
 8001e12:	b2da      	uxtb	r2, r3
 8001e14:	4b42      	ldr	r3, [pc, #264]	@ (8001f20 <UART_String_Handling_CH1+0x118>)
 8001e16:	781b      	ldrb	r3, [r3, #0]
 8001e18:	b2db      	uxtb	r3, r3
 8001e1a:	429a      	cmp	r2, r3
 8001e1c:	d075      	beq.n	8001f0a <UART_String_Handling_CH1+0x102>
			memset(string_buffer_1, 0, RX_BUFFER_CH1_SIZE);
 8001e1e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001e22:	2100      	movs	r1, #0
 8001e24:	483f      	ldr	r0, [pc, #252]	@ (8001f24 <UART_String_Handling_CH1+0x11c>)
 8001e26:	f006 fbe6 	bl	80085f6 <memset>
			if (cnt > last_size) {
 8001e2a:	4b3c      	ldr	r3, [pc, #240]	@ (8001f1c <UART_String_Handling_CH1+0x114>)
 8001e2c:	781b      	ldrb	r3, [r3, #0]
 8001e2e:	b2da      	uxtb	r2, r3
 8001e30:	4b3b      	ldr	r3, [pc, #236]	@ (8001f20 <UART_String_Handling_CH1+0x118>)
 8001e32:	781b      	ldrb	r3, [r3, #0]
 8001e34:	b2db      	uxtb	r3, r3
 8001e36:	429a      	cmp	r2, r3
 8001e38:	d926      	bls.n	8001e88 <UART_String_Handling_CH1+0x80>
				NewReceivedChars = cnt - last_size;
 8001e3a:	4b38      	ldr	r3, [pc, #224]	@ (8001f1c <UART_String_Handling_CH1+0x114>)
 8001e3c:	781b      	ldrb	r3, [r3, #0]
 8001e3e:	b2db      	uxtb	r3, r3
 8001e40:	461a      	mov	r2, r3
 8001e42:	4b37      	ldr	r3, [pc, #220]	@ (8001f20 <UART_String_Handling_CH1+0x118>)
 8001e44:	781b      	ldrb	r3, [r3, #0]
 8001e46:	b2db      	uxtb	r3, r3
 8001e48:	1ad3      	subs	r3, r2, r3
 8001e4a:	461a      	mov	r2, r3
 8001e4c:	4b36      	ldr	r3, [pc, #216]	@ (8001f28 <UART_String_Handling_CH1+0x120>)
 8001e4e:	601a      	str	r2, [r3, #0]
				memset(string_buffer_1,0,RX_BUFFER_CH1_SIZE);
 8001e50:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001e54:	2100      	movs	r1, #0
 8001e56:	4833      	ldr	r0, [pc, #204]	@ (8001f24 <UART_String_Handling_CH1+0x11c>)
 8001e58:	f006 fbcd 	bl	80085f6 <memset>
					for (uint8_t i=0; i < NewReceivedChars; i++) {
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	71fb      	strb	r3, [r7, #7]
 8001e60:	e00c      	b.n	8001e7c <UART_String_Handling_CH1+0x74>
						string_buffer_1[i] = rx_buffer_ch1[i+last_size];
 8001e62:	79fb      	ldrb	r3, [r7, #7]
 8001e64:	4a2e      	ldr	r2, [pc, #184]	@ (8001f20 <UART_String_Handling_CH1+0x118>)
 8001e66:	7812      	ldrb	r2, [r2, #0]
 8001e68:	b2d2      	uxtb	r2, r2
 8001e6a:	441a      	add	r2, r3
 8001e6c:	79fb      	ldrb	r3, [r7, #7]
 8001e6e:	492f      	ldr	r1, [pc, #188]	@ (8001f2c <UART_String_Handling_CH1+0x124>)
 8001e70:	5c89      	ldrb	r1, [r1, r2]
 8001e72:	4a2c      	ldr	r2, [pc, #176]	@ (8001f24 <UART_String_Handling_CH1+0x11c>)
 8001e74:	54d1      	strb	r1, [r2, r3]
					for (uint8_t i=0; i < NewReceivedChars; i++) {
 8001e76:	79fb      	ldrb	r3, [r7, #7]
 8001e78:	3301      	adds	r3, #1
 8001e7a:	71fb      	strb	r3, [r7, #7]
 8001e7c:	79fa      	ldrb	r2, [r7, #7]
 8001e7e:	4b2a      	ldr	r3, [pc, #168]	@ (8001f28 <UART_String_Handling_CH1+0x120>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	429a      	cmp	r2, r3
 8001e84:	d3ed      	bcc.n	8001e62 <UART_String_Handling_CH1+0x5a>
 8001e86:	e040      	b.n	8001f0a <UART_String_Handling_CH1+0x102>
					}

			}
			else {
				NewReceivedChars = RX_BUFFER_CH1_SIZE - last_size;
 8001e88:	4b25      	ldr	r3, [pc, #148]	@ (8001f20 <UART_String_Handling_CH1+0x118>)
 8001e8a:	781b      	ldrb	r3, [r3, #0]
 8001e8c:	b2db      	uxtb	r3, r3
 8001e8e:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 8001e92:	461a      	mov	r2, r3
 8001e94:	4b24      	ldr	r3, [pc, #144]	@ (8001f28 <UART_String_Handling_CH1+0x120>)
 8001e96:	601a      	str	r2, [r3, #0]
			      for (uint8_t i = 0; i < NewReceivedChars; i++)
 8001e98:	2300      	movs	r3, #0
 8001e9a:	71bb      	strb	r3, [r7, #6]
 8001e9c:	e00d      	b.n	8001eba <UART_String_Handling_CH1+0xb2>
			      {
			        string_buffer_1[i] = rx_buffer_ch1[last_size + i];
 8001e9e:	4b20      	ldr	r3, [pc, #128]	@ (8001f20 <UART_String_Handling_CH1+0x118>)
 8001ea0:	781b      	ldrb	r3, [r3, #0]
 8001ea2:	b2db      	uxtb	r3, r3
 8001ea4:	461a      	mov	r2, r3
 8001ea6:	79bb      	ldrb	r3, [r7, #6]
 8001ea8:	441a      	add	r2, r3
 8001eaa:	79bb      	ldrb	r3, [r7, #6]
 8001eac:	491f      	ldr	r1, [pc, #124]	@ (8001f2c <UART_String_Handling_CH1+0x124>)
 8001eae:	5c89      	ldrb	r1, [r1, r2]
 8001eb0:	4a1c      	ldr	r2, [pc, #112]	@ (8001f24 <UART_String_Handling_CH1+0x11c>)
 8001eb2:	54d1      	strb	r1, [r2, r3]
			      for (uint8_t i = 0; i < NewReceivedChars; i++)
 8001eb4:	79bb      	ldrb	r3, [r7, #6]
 8001eb6:	3301      	adds	r3, #1
 8001eb8:	71bb      	strb	r3, [r7, #6]
 8001eba:	79ba      	ldrb	r2, [r7, #6]
 8001ebc:	4b1a      	ldr	r3, [pc, #104]	@ (8001f28 <UART_String_Handling_CH1+0x120>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	429a      	cmp	r2, r3
 8001ec2:	d3ec      	bcc.n	8001e9e <UART_String_Handling_CH1+0x96>
			      }
			      if (cnt > 0) {
 8001ec4:	4b15      	ldr	r3, [pc, #84]	@ (8001f1c <UART_String_Handling_CH1+0x114>)
 8001ec6:	781b      	ldrb	r3, [r3, #0]
 8001ec8:	b2db      	uxtb	r3, r3
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d01d      	beq.n	8001f0a <UART_String_Handling_CH1+0x102>
			    	  for (uint8_t i = 0; i < cnt; i++)
 8001ece:	2300      	movs	r3, #0
 8001ed0:	717b      	strb	r3, [r7, #5]
 8001ed2:	e00b      	b.n	8001eec <UART_String_Handling_CH1+0xe4>
			    	  {
			    	    string_buffer_1[NewReceivedChars + i] = rx_buffer_ch1[i];
 8001ed4:	797a      	ldrb	r2, [r7, #5]
 8001ed6:	7979      	ldrb	r1, [r7, #5]
 8001ed8:	4b13      	ldr	r3, [pc, #76]	@ (8001f28 <UART_String_Handling_CH1+0x120>)
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	440b      	add	r3, r1
 8001ede:	4913      	ldr	r1, [pc, #76]	@ (8001f2c <UART_String_Handling_CH1+0x124>)
 8001ee0:	5c89      	ldrb	r1, [r1, r2]
 8001ee2:	4a10      	ldr	r2, [pc, #64]	@ (8001f24 <UART_String_Handling_CH1+0x11c>)
 8001ee4:	54d1      	strb	r1, [r2, r3]
			    	  for (uint8_t i = 0; i < cnt; i++)
 8001ee6:	797b      	ldrb	r3, [r7, #5]
 8001ee8:	3301      	adds	r3, #1
 8001eea:	717b      	strb	r3, [r7, #5]
 8001eec:	4b0b      	ldr	r3, [pc, #44]	@ (8001f1c <UART_String_Handling_CH1+0x114>)
 8001eee:	781b      	ldrb	r3, [r3, #0]
 8001ef0:	b2db      	uxtb	r3, r3
 8001ef2:	797a      	ldrb	r2, [r7, #5]
 8001ef4:	429a      	cmp	r2, r3
 8001ef6:	d3ed      	bcc.n	8001ed4 <UART_String_Handling_CH1+0xcc>
			    	  }
			    	  NewReceivedChars += cnt;
 8001ef8:	4b08      	ldr	r3, [pc, #32]	@ (8001f1c <UART_String_Handling_CH1+0x114>)
 8001efa:	781b      	ldrb	r3, [r3, #0]
 8001efc:	b2db      	uxtb	r3, r3
 8001efe:	461a      	mov	r2, r3
 8001f00:	4b09      	ldr	r3, [pc, #36]	@ (8001f28 <UART_String_Handling_CH1+0x120>)
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	4413      	add	r3, r2
 8001f06:	4a08      	ldr	r2, [pc, #32]	@ (8001f28 <UART_String_Handling_CH1+0x120>)
 8001f08:	6013      	str	r3, [r2, #0]
			      }
			}

		}
		last_size = cnt;
 8001f0a:	4b04      	ldr	r3, [pc, #16]	@ (8001f1c <UART_String_Handling_CH1+0x114>)
 8001f0c:	781b      	ldrb	r3, [r3, #0]
 8001f0e:	b2da      	uxtb	r2, r3
 8001f10:	4b03      	ldr	r3, [pc, #12]	@ (8001f20 <UART_String_Handling_CH1+0x118>)
 8001f12:	701a      	strb	r2, [r3, #0]
}
 8001f14:	bf00      	nop
 8001f16:	3708      	adds	r7, #8
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	bd80      	pop	{r7, pc}
 8001f1c:	2000087c 	.word	0x2000087c
 8001f20:	2000087e 	.word	0x2000087e
 8001f24:	20000608 	.word	0x20000608
 8001f28:	20000874 	.word	0x20000874
 8001f2c:	20000408 	.word	0x20000408

08001f30 <UART_String_Handling_CH2>:
void UART_String_Handling_CH2() {
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b082      	sub	sp, #8
 8001f34:	af00      	add	r7, sp, #0
	if (cnt_2 != last_size_2) {
 8001f36:	4b40      	ldr	r3, [pc, #256]	@ (8002038 <UART_String_Handling_CH2+0x108>)
 8001f38:	781b      	ldrb	r3, [r3, #0]
 8001f3a:	b2da      	uxtb	r2, r3
 8001f3c:	4b3f      	ldr	r3, [pc, #252]	@ (800203c <UART_String_Handling_CH2+0x10c>)
 8001f3e:	781b      	ldrb	r3, [r3, #0]
 8001f40:	b2db      	uxtb	r3, r3
 8001f42:	429a      	cmp	r2, r3
 8001f44:	d06f      	beq.n	8002026 <UART_String_Handling_CH2+0xf6>
			if (cnt_2 > last_size_2) {
 8001f46:	4b3c      	ldr	r3, [pc, #240]	@ (8002038 <UART_String_Handling_CH2+0x108>)
 8001f48:	781b      	ldrb	r3, [r3, #0]
 8001f4a:	b2da      	uxtb	r2, r3
 8001f4c:	4b3b      	ldr	r3, [pc, #236]	@ (800203c <UART_String_Handling_CH2+0x10c>)
 8001f4e:	781b      	ldrb	r3, [r3, #0]
 8001f50:	b2db      	uxtb	r3, r3
 8001f52:	429a      	cmp	r2, r3
 8001f54:	d926      	bls.n	8001fa4 <UART_String_Handling_CH2+0x74>
				NewReceivedChars_2 = cnt_2 - last_size_2;
 8001f56:	4b38      	ldr	r3, [pc, #224]	@ (8002038 <UART_String_Handling_CH2+0x108>)
 8001f58:	781b      	ldrb	r3, [r3, #0]
 8001f5a:	b2db      	uxtb	r3, r3
 8001f5c:	461a      	mov	r2, r3
 8001f5e:	4b37      	ldr	r3, [pc, #220]	@ (800203c <UART_String_Handling_CH2+0x10c>)
 8001f60:	781b      	ldrb	r3, [r3, #0]
 8001f62:	b2db      	uxtb	r3, r3
 8001f64:	1ad3      	subs	r3, r2, r3
 8001f66:	461a      	mov	r2, r3
 8001f68:	4b35      	ldr	r3, [pc, #212]	@ (8002040 <UART_String_Handling_CH2+0x110>)
 8001f6a:	601a      	str	r2, [r3, #0]
				memset(string_buffer_2,0,RX_BUFFER_CH2_SIZE);
 8001f6c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001f70:	2100      	movs	r1, #0
 8001f72:	4834      	ldr	r0, [pc, #208]	@ (8002044 <UART_String_Handling_CH2+0x114>)
 8001f74:	f006 fb3f 	bl	80085f6 <memset>
					for (uint8_t i=0; i < NewReceivedChars_2; i++) {
 8001f78:	2300      	movs	r3, #0
 8001f7a:	71fb      	strb	r3, [r7, #7]
 8001f7c:	e00c      	b.n	8001f98 <UART_String_Handling_CH2+0x68>
						string_buffer_2[i] = rx_buffer_ch2[i+last_size_2];
 8001f7e:	79fb      	ldrb	r3, [r7, #7]
 8001f80:	4a2e      	ldr	r2, [pc, #184]	@ (800203c <UART_String_Handling_CH2+0x10c>)
 8001f82:	7812      	ldrb	r2, [r2, #0]
 8001f84:	b2d2      	uxtb	r2, r2
 8001f86:	441a      	add	r2, r3
 8001f88:	79fb      	ldrb	r3, [r7, #7]
 8001f8a:	492f      	ldr	r1, [pc, #188]	@ (8002048 <UART_String_Handling_CH2+0x118>)
 8001f8c:	5c89      	ldrb	r1, [r1, r2]
 8001f8e:	4a2d      	ldr	r2, [pc, #180]	@ (8002044 <UART_String_Handling_CH2+0x114>)
 8001f90:	54d1      	strb	r1, [r2, r3]
					for (uint8_t i=0; i < NewReceivedChars_2; i++) {
 8001f92:	79fb      	ldrb	r3, [r7, #7]
 8001f94:	3301      	adds	r3, #1
 8001f96:	71fb      	strb	r3, [r7, #7]
 8001f98:	79fa      	ldrb	r2, [r7, #7]
 8001f9a:	4b29      	ldr	r3, [pc, #164]	@ (8002040 <UART_String_Handling_CH2+0x110>)
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	429a      	cmp	r2, r3
 8001fa0:	d3ed      	bcc.n	8001f7e <UART_String_Handling_CH2+0x4e>
 8001fa2:	e040      	b.n	8002026 <UART_String_Handling_CH2+0xf6>
					}

			}
			else {
				NewReceivedChars_2 = RX_BUFFER_CH2_SIZE - last_size_2;
 8001fa4:	4b25      	ldr	r3, [pc, #148]	@ (800203c <UART_String_Handling_CH2+0x10c>)
 8001fa6:	781b      	ldrb	r3, [r3, #0]
 8001fa8:	b2db      	uxtb	r3, r3
 8001faa:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 8001fae:	461a      	mov	r2, r3
 8001fb0:	4b23      	ldr	r3, [pc, #140]	@ (8002040 <UART_String_Handling_CH2+0x110>)
 8001fb2:	601a      	str	r2, [r3, #0]
			      for (uint8_t i = 0; i < NewReceivedChars_2; i++)
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	71bb      	strb	r3, [r7, #6]
 8001fb8:	e00d      	b.n	8001fd6 <UART_String_Handling_CH2+0xa6>
			      {
			        string_buffer_2[i] = rx_buffer_ch2[last_size_2 + i];
 8001fba:	4b20      	ldr	r3, [pc, #128]	@ (800203c <UART_String_Handling_CH2+0x10c>)
 8001fbc:	781b      	ldrb	r3, [r3, #0]
 8001fbe:	b2db      	uxtb	r3, r3
 8001fc0:	461a      	mov	r2, r3
 8001fc2:	79bb      	ldrb	r3, [r7, #6]
 8001fc4:	441a      	add	r2, r3
 8001fc6:	79bb      	ldrb	r3, [r7, #6]
 8001fc8:	491f      	ldr	r1, [pc, #124]	@ (8002048 <UART_String_Handling_CH2+0x118>)
 8001fca:	5c89      	ldrb	r1, [r1, r2]
 8001fcc:	4a1d      	ldr	r2, [pc, #116]	@ (8002044 <UART_String_Handling_CH2+0x114>)
 8001fce:	54d1      	strb	r1, [r2, r3]
			      for (uint8_t i = 0; i < NewReceivedChars_2; i++)
 8001fd0:	79bb      	ldrb	r3, [r7, #6]
 8001fd2:	3301      	adds	r3, #1
 8001fd4:	71bb      	strb	r3, [r7, #6]
 8001fd6:	79ba      	ldrb	r2, [r7, #6]
 8001fd8:	4b19      	ldr	r3, [pc, #100]	@ (8002040 <UART_String_Handling_CH2+0x110>)
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	429a      	cmp	r2, r3
 8001fde:	d3ec      	bcc.n	8001fba <UART_String_Handling_CH2+0x8a>
			      }
			      if (cnt_2 > 0) {
 8001fe0:	4b15      	ldr	r3, [pc, #84]	@ (8002038 <UART_String_Handling_CH2+0x108>)
 8001fe2:	781b      	ldrb	r3, [r3, #0]
 8001fe4:	b2db      	uxtb	r3, r3
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d01d      	beq.n	8002026 <UART_String_Handling_CH2+0xf6>
			    	  for (uint8_t i = 0; i < cnt_2; i++)
 8001fea:	2300      	movs	r3, #0
 8001fec:	717b      	strb	r3, [r7, #5]
 8001fee:	e00b      	b.n	8002008 <UART_String_Handling_CH2+0xd8>
			    	  {
			    	    string_buffer_2[NewReceivedChars_2 + i] = rx_buffer_ch2[i];
 8001ff0:	797a      	ldrb	r2, [r7, #5]
 8001ff2:	7979      	ldrb	r1, [r7, #5]
 8001ff4:	4b12      	ldr	r3, [pc, #72]	@ (8002040 <UART_String_Handling_CH2+0x110>)
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	440b      	add	r3, r1
 8001ffa:	4913      	ldr	r1, [pc, #76]	@ (8002048 <UART_String_Handling_CH2+0x118>)
 8001ffc:	5c89      	ldrb	r1, [r1, r2]
 8001ffe:	4a11      	ldr	r2, [pc, #68]	@ (8002044 <UART_String_Handling_CH2+0x114>)
 8002000:	54d1      	strb	r1, [r2, r3]
			    	  for (uint8_t i = 0; i < cnt_2; i++)
 8002002:	797b      	ldrb	r3, [r7, #5]
 8002004:	3301      	adds	r3, #1
 8002006:	717b      	strb	r3, [r7, #5]
 8002008:	4b0b      	ldr	r3, [pc, #44]	@ (8002038 <UART_String_Handling_CH2+0x108>)
 800200a:	781b      	ldrb	r3, [r3, #0]
 800200c:	b2db      	uxtb	r3, r3
 800200e:	797a      	ldrb	r2, [r7, #5]
 8002010:	429a      	cmp	r2, r3
 8002012:	d3ed      	bcc.n	8001ff0 <UART_String_Handling_CH2+0xc0>
			    	  }
			    	  NewReceivedChars_2 += cnt_2;
 8002014:	4b08      	ldr	r3, [pc, #32]	@ (8002038 <UART_String_Handling_CH2+0x108>)
 8002016:	781b      	ldrb	r3, [r3, #0]
 8002018:	b2db      	uxtb	r3, r3
 800201a:	461a      	mov	r2, r3
 800201c:	4b08      	ldr	r3, [pc, #32]	@ (8002040 <UART_String_Handling_CH2+0x110>)
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	4413      	add	r3, r2
 8002022:	4a07      	ldr	r2, [pc, #28]	@ (8002040 <UART_String_Handling_CH2+0x110>)
 8002024:	6013      	str	r3, [r2, #0]
			      }
			}

		}
		last_size_2 = cnt_2;
 8002026:	4b04      	ldr	r3, [pc, #16]	@ (8002038 <UART_String_Handling_CH2+0x108>)
 8002028:	781b      	ldrb	r3, [r3, #0]
 800202a:	b2da      	uxtb	r2, r3
 800202c:	4b03      	ldr	r3, [pc, #12]	@ (800203c <UART_String_Handling_CH2+0x10c>)
 800202e:	701a      	strb	r2, [r3, #0]
}
 8002030:	bf00      	nop
 8002032:	3708      	adds	r7, #8
 8002034:	46bd      	mov	sp, r7
 8002036:	bd80      	pop	{r7, pc}
 8002038:	2000087d 	.word	0x2000087d
 800203c:	2000087f 	.word	0x2000087f
 8002040:	20000878 	.word	0x20000878
 8002044:	20000708 	.word	0x20000708
 8002048:	20000508 	.word	0x20000508

0800204c <MX_UART5_Init>:
DMA_HandleTypeDef hdma_usart1_rx;
DMA_HandleTypeDef hdma_usart1_tx;

/* UART5 init function */
void MX_UART5_Init(void)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8002050:	4b11      	ldr	r3, [pc, #68]	@ (8002098 <MX_UART5_Init+0x4c>)
 8002052:	4a12      	ldr	r2, [pc, #72]	@ (800209c <MX_UART5_Init+0x50>)
 8002054:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 230400;
 8002056:	4b10      	ldr	r3, [pc, #64]	@ (8002098 <MX_UART5_Init+0x4c>)
 8002058:	f44f 3261 	mov.w	r2, #230400	@ 0x38400
 800205c:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 800205e:	4b0e      	ldr	r3, [pc, #56]	@ (8002098 <MX_UART5_Init+0x4c>)
 8002060:	2200      	movs	r2, #0
 8002062:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8002064:	4b0c      	ldr	r3, [pc, #48]	@ (8002098 <MX_UART5_Init+0x4c>)
 8002066:	2200      	movs	r2, #0
 8002068:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 800206a:	4b0b      	ldr	r3, [pc, #44]	@ (8002098 <MX_UART5_Init+0x4c>)
 800206c:	2200      	movs	r2, #0
 800206e:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8002070:	4b09      	ldr	r3, [pc, #36]	@ (8002098 <MX_UART5_Init+0x4c>)
 8002072:	220c      	movs	r2, #12
 8002074:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002076:	4b08      	ldr	r3, [pc, #32]	@ (8002098 <MX_UART5_Init+0x4c>)
 8002078:	2200      	movs	r2, #0
 800207a:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 800207c:	4b06      	ldr	r3, [pc, #24]	@ (8002098 <MX_UART5_Init+0x4c>)
 800207e:	2200      	movs	r2, #0
 8002080:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8002082:	4805      	ldr	r0, [pc, #20]	@ (8002098 <MX_UART5_Init+0x4c>)
 8002084:	f004 fb00 	bl	8006688 <HAL_UART_Init>
 8002088:	4603      	mov	r3, r0
 800208a:	2b00      	cmp	r3, #0
 800208c:	d001      	beq.n	8002092 <MX_UART5_Init+0x46>
  {
    Error_Handler();
 800208e:	f7ff fcad 	bl	80019ec <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8002092:	bf00      	nop
 8002094:	bd80      	pop	{r7, pc}
 8002096:	bf00      	nop
 8002098:	20000880 	.word	0x20000880
 800209c:	40005000 	.word	0x40005000

080020a0 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80020a4:	4b11      	ldr	r3, [pc, #68]	@ (80020ec <MX_USART1_UART_Init+0x4c>)
 80020a6:	4a12      	ldr	r2, [pc, #72]	@ (80020f0 <MX_USART1_UART_Init+0x50>)
 80020a8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80020aa:	4b10      	ldr	r3, [pc, #64]	@ (80020ec <MX_USART1_UART_Init+0x4c>)
 80020ac:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80020b0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80020b2:	4b0e      	ldr	r3, [pc, #56]	@ (80020ec <MX_USART1_UART_Init+0x4c>)
 80020b4:	2200      	movs	r2, #0
 80020b6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80020b8:	4b0c      	ldr	r3, [pc, #48]	@ (80020ec <MX_USART1_UART_Init+0x4c>)
 80020ba:	2200      	movs	r2, #0
 80020bc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80020be:	4b0b      	ldr	r3, [pc, #44]	@ (80020ec <MX_USART1_UART_Init+0x4c>)
 80020c0:	2200      	movs	r2, #0
 80020c2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80020c4:	4b09      	ldr	r3, [pc, #36]	@ (80020ec <MX_USART1_UART_Init+0x4c>)
 80020c6:	220c      	movs	r2, #12
 80020c8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80020ca:	4b08      	ldr	r3, [pc, #32]	@ (80020ec <MX_USART1_UART_Init+0x4c>)
 80020cc:	2200      	movs	r2, #0
 80020ce:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80020d0:	4b06      	ldr	r3, [pc, #24]	@ (80020ec <MX_USART1_UART_Init+0x4c>)
 80020d2:	2200      	movs	r2, #0
 80020d4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80020d6:	4805      	ldr	r0, [pc, #20]	@ (80020ec <MX_USART1_UART_Init+0x4c>)
 80020d8:	f004 fad6 	bl	8006688 <HAL_UART_Init>
 80020dc:	4603      	mov	r3, r0
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d001      	beq.n	80020e6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80020e2:	f7ff fc83 	bl	80019ec <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80020e6:	bf00      	nop
 80020e8:	bd80      	pop	{r7, pc}
 80020ea:	bf00      	nop
 80020ec:	200008c8 	.word	0x200008c8
 80020f0:	40011000 	.word	0x40011000

080020f4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b08c      	sub	sp, #48	@ 0x30
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020fc:	f107 031c 	add.w	r3, r7, #28
 8002100:	2200      	movs	r2, #0
 8002102:	601a      	str	r2, [r3, #0]
 8002104:	605a      	str	r2, [r3, #4]
 8002106:	609a      	str	r2, [r3, #8]
 8002108:	60da      	str	r2, [r3, #12]
 800210a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART5)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	4a5b      	ldr	r2, [pc, #364]	@ (8002280 <HAL_UART_MspInit+0x18c>)
 8002112:	4293      	cmp	r3, r2
 8002114:	f040 80c4 	bne.w	80022a0 <HAL_UART_MspInit+0x1ac>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* UART5 clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8002118:	2300      	movs	r3, #0
 800211a:	61bb      	str	r3, [r7, #24]
 800211c:	4b59      	ldr	r3, [pc, #356]	@ (8002284 <HAL_UART_MspInit+0x190>)
 800211e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002120:	4a58      	ldr	r2, [pc, #352]	@ (8002284 <HAL_UART_MspInit+0x190>)
 8002122:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002126:	6413      	str	r3, [r2, #64]	@ 0x40
 8002128:	4b56      	ldr	r3, [pc, #344]	@ (8002284 <HAL_UART_MspInit+0x190>)
 800212a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800212c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002130:	61bb      	str	r3, [r7, #24]
 8002132:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002134:	2300      	movs	r3, #0
 8002136:	617b      	str	r3, [r7, #20]
 8002138:	4b52      	ldr	r3, [pc, #328]	@ (8002284 <HAL_UART_MspInit+0x190>)
 800213a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800213c:	4a51      	ldr	r2, [pc, #324]	@ (8002284 <HAL_UART_MspInit+0x190>)
 800213e:	f043 0304 	orr.w	r3, r3, #4
 8002142:	6313      	str	r3, [r2, #48]	@ 0x30
 8002144:	4b4f      	ldr	r3, [pc, #316]	@ (8002284 <HAL_UART_MspInit+0x190>)
 8002146:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002148:	f003 0304 	and.w	r3, r3, #4
 800214c:	617b      	str	r3, [r7, #20]
 800214e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002150:	2300      	movs	r3, #0
 8002152:	613b      	str	r3, [r7, #16]
 8002154:	4b4b      	ldr	r3, [pc, #300]	@ (8002284 <HAL_UART_MspInit+0x190>)
 8002156:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002158:	4a4a      	ldr	r2, [pc, #296]	@ (8002284 <HAL_UART_MspInit+0x190>)
 800215a:	f043 0308 	orr.w	r3, r3, #8
 800215e:	6313      	str	r3, [r2, #48]	@ 0x30
 8002160:	4b48      	ldr	r3, [pc, #288]	@ (8002284 <HAL_UART_MspInit+0x190>)
 8002162:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002164:	f003 0308 	and.w	r3, r3, #8
 8002168:	613b      	str	r3, [r7, #16]
 800216a:	693b      	ldr	r3, [r7, #16]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800216c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002170:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002172:	2302      	movs	r3, #2
 8002174:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002176:	2300      	movs	r3, #0
 8002178:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800217a:	2303      	movs	r3, #3
 800217c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 800217e:	2308      	movs	r3, #8
 8002180:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002182:	f107 031c 	add.w	r3, r7, #28
 8002186:	4619      	mov	r1, r3
 8002188:	483f      	ldr	r0, [pc, #252]	@ (8002288 <HAL_UART_MspInit+0x194>)
 800218a:	f000 ff23 	bl	8002fd4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800218e:	2304      	movs	r3, #4
 8002190:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002192:	2302      	movs	r3, #2
 8002194:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002196:	2300      	movs	r3, #0
 8002198:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800219a:	2303      	movs	r3, #3
 800219c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 800219e:	2308      	movs	r3, #8
 80021a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80021a2:	f107 031c 	add.w	r3, r7, #28
 80021a6:	4619      	mov	r1, r3
 80021a8:	4838      	ldr	r0, [pc, #224]	@ (800228c <HAL_UART_MspInit+0x198>)
 80021aa:	f000 ff13 	bl	8002fd4 <HAL_GPIO_Init>

    /* UART5 DMA Init */
    /* UART5_RX Init */
    hdma_uart5_rx.Instance = DMA1_Stream0;
 80021ae:	4b38      	ldr	r3, [pc, #224]	@ (8002290 <HAL_UART_MspInit+0x19c>)
 80021b0:	4a38      	ldr	r2, [pc, #224]	@ (8002294 <HAL_UART_MspInit+0x1a0>)
 80021b2:	601a      	str	r2, [r3, #0]
    hdma_uart5_rx.Init.Channel = DMA_CHANNEL_4;
 80021b4:	4b36      	ldr	r3, [pc, #216]	@ (8002290 <HAL_UART_MspInit+0x19c>)
 80021b6:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80021ba:	605a      	str	r2, [r3, #4]
    hdma_uart5_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80021bc:	4b34      	ldr	r3, [pc, #208]	@ (8002290 <HAL_UART_MspInit+0x19c>)
 80021be:	2200      	movs	r2, #0
 80021c0:	609a      	str	r2, [r3, #8]
    hdma_uart5_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80021c2:	4b33      	ldr	r3, [pc, #204]	@ (8002290 <HAL_UART_MspInit+0x19c>)
 80021c4:	2200      	movs	r2, #0
 80021c6:	60da      	str	r2, [r3, #12]
    hdma_uart5_rx.Init.MemInc = DMA_MINC_ENABLE;
 80021c8:	4b31      	ldr	r3, [pc, #196]	@ (8002290 <HAL_UART_MspInit+0x19c>)
 80021ca:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80021ce:	611a      	str	r2, [r3, #16]
    hdma_uart5_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80021d0:	4b2f      	ldr	r3, [pc, #188]	@ (8002290 <HAL_UART_MspInit+0x19c>)
 80021d2:	2200      	movs	r2, #0
 80021d4:	615a      	str	r2, [r3, #20]
    hdma_uart5_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80021d6:	4b2e      	ldr	r3, [pc, #184]	@ (8002290 <HAL_UART_MspInit+0x19c>)
 80021d8:	2200      	movs	r2, #0
 80021da:	619a      	str	r2, [r3, #24]
    hdma_uart5_rx.Init.Mode = DMA_CIRCULAR;
 80021dc:	4b2c      	ldr	r3, [pc, #176]	@ (8002290 <HAL_UART_MspInit+0x19c>)
 80021de:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80021e2:	61da      	str	r2, [r3, #28]
    hdma_uart5_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 80021e4:	4b2a      	ldr	r3, [pc, #168]	@ (8002290 <HAL_UART_MspInit+0x19c>)
 80021e6:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80021ea:	621a      	str	r2, [r3, #32]
    hdma_uart5_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80021ec:	4b28      	ldr	r3, [pc, #160]	@ (8002290 <HAL_UART_MspInit+0x19c>)
 80021ee:	2200      	movs	r2, #0
 80021f0:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart5_rx) != HAL_OK)
 80021f2:	4827      	ldr	r0, [pc, #156]	@ (8002290 <HAL_UART_MspInit+0x19c>)
 80021f4:	f000 fad2 	bl	800279c <HAL_DMA_Init>
 80021f8:	4603      	mov	r3, r0
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d001      	beq.n	8002202 <HAL_UART_MspInit+0x10e>
    {
      Error_Handler();
 80021fe:	f7ff fbf5 	bl	80019ec <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart5_rx);
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	4a22      	ldr	r2, [pc, #136]	@ (8002290 <HAL_UART_MspInit+0x19c>)
 8002206:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002208:	4a21      	ldr	r2, [pc, #132]	@ (8002290 <HAL_UART_MspInit+0x19c>)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	6393      	str	r3, [r2, #56]	@ 0x38

    /* UART5_TX Init */
    hdma_uart5_tx.Instance = DMA1_Stream7;
 800220e:	4b22      	ldr	r3, [pc, #136]	@ (8002298 <HAL_UART_MspInit+0x1a4>)
 8002210:	4a22      	ldr	r2, [pc, #136]	@ (800229c <HAL_UART_MspInit+0x1a8>)
 8002212:	601a      	str	r2, [r3, #0]
    hdma_uart5_tx.Init.Channel = DMA_CHANNEL_4;
 8002214:	4b20      	ldr	r3, [pc, #128]	@ (8002298 <HAL_UART_MspInit+0x1a4>)
 8002216:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800221a:	605a      	str	r2, [r3, #4]
    hdma_uart5_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800221c:	4b1e      	ldr	r3, [pc, #120]	@ (8002298 <HAL_UART_MspInit+0x1a4>)
 800221e:	2240      	movs	r2, #64	@ 0x40
 8002220:	609a      	str	r2, [r3, #8]
    hdma_uart5_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002222:	4b1d      	ldr	r3, [pc, #116]	@ (8002298 <HAL_UART_MspInit+0x1a4>)
 8002224:	2200      	movs	r2, #0
 8002226:	60da      	str	r2, [r3, #12]
    hdma_uart5_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002228:	4b1b      	ldr	r3, [pc, #108]	@ (8002298 <HAL_UART_MspInit+0x1a4>)
 800222a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800222e:	611a      	str	r2, [r3, #16]
    hdma_uart5_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002230:	4b19      	ldr	r3, [pc, #100]	@ (8002298 <HAL_UART_MspInit+0x1a4>)
 8002232:	2200      	movs	r2, #0
 8002234:	615a      	str	r2, [r3, #20]
    hdma_uart5_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002236:	4b18      	ldr	r3, [pc, #96]	@ (8002298 <HAL_UART_MspInit+0x1a4>)
 8002238:	2200      	movs	r2, #0
 800223a:	619a      	str	r2, [r3, #24]
    hdma_uart5_tx.Init.Mode = DMA_NORMAL;
 800223c:	4b16      	ldr	r3, [pc, #88]	@ (8002298 <HAL_UART_MspInit+0x1a4>)
 800223e:	2200      	movs	r2, #0
 8002240:	61da      	str	r2, [r3, #28]
    hdma_uart5_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8002242:	4b15      	ldr	r3, [pc, #84]	@ (8002298 <HAL_UART_MspInit+0x1a4>)
 8002244:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8002248:	621a      	str	r2, [r3, #32]
    hdma_uart5_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800224a:	4b13      	ldr	r3, [pc, #76]	@ (8002298 <HAL_UART_MspInit+0x1a4>)
 800224c:	2200      	movs	r2, #0
 800224e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart5_tx) != HAL_OK)
 8002250:	4811      	ldr	r0, [pc, #68]	@ (8002298 <HAL_UART_MspInit+0x1a4>)
 8002252:	f000 faa3 	bl	800279c <HAL_DMA_Init>
 8002256:	4603      	mov	r3, r0
 8002258:	2b00      	cmp	r3, #0
 800225a:	d001      	beq.n	8002260 <HAL_UART_MspInit+0x16c>
    {
      Error_Handler();
 800225c:	f7ff fbc6 	bl	80019ec <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_uart5_tx);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	4a0d      	ldr	r2, [pc, #52]	@ (8002298 <HAL_UART_MspInit+0x1a4>)
 8002264:	639a      	str	r2, [r3, #56]	@ 0x38
 8002266:	4a0c      	ldr	r2, [pc, #48]	@ (8002298 <HAL_UART_MspInit+0x1a4>)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	6393      	str	r3, [r2, #56]	@ 0x38

    /* UART5 interrupt Init */
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 800226c:	2200      	movs	r2, #0
 800226e:	2100      	movs	r1, #0
 8002270:	2035      	movs	r0, #53	@ 0x35
 8002272:	f000 fa5c 	bl	800272e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8002276:	2035      	movs	r0, #53	@ 0x35
 8002278:	f000 fa75 	bl	8002766 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800227c:	e0a9      	b.n	80023d2 <HAL_UART_MspInit+0x2de>
 800227e:	bf00      	nop
 8002280:	40005000 	.word	0x40005000
 8002284:	40023800 	.word	0x40023800
 8002288:	40020800 	.word	0x40020800
 800228c:	40020c00 	.word	0x40020c00
 8002290:	20000910 	.word	0x20000910
 8002294:	40026010 	.word	0x40026010
 8002298:	20000970 	.word	0x20000970
 800229c:	400260b8 	.word	0x400260b8
  else if(uartHandle->Instance==USART1)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	4a4d      	ldr	r2, [pc, #308]	@ (80023dc <HAL_UART_MspInit+0x2e8>)
 80022a6:	4293      	cmp	r3, r2
 80022a8:	f040 8093 	bne.w	80023d2 <HAL_UART_MspInit+0x2de>
    __HAL_RCC_USART1_CLK_ENABLE();
 80022ac:	2300      	movs	r3, #0
 80022ae:	60fb      	str	r3, [r7, #12]
 80022b0:	4b4b      	ldr	r3, [pc, #300]	@ (80023e0 <HAL_UART_MspInit+0x2ec>)
 80022b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022b4:	4a4a      	ldr	r2, [pc, #296]	@ (80023e0 <HAL_UART_MspInit+0x2ec>)
 80022b6:	f043 0310 	orr.w	r3, r3, #16
 80022ba:	6453      	str	r3, [r2, #68]	@ 0x44
 80022bc:	4b48      	ldr	r3, [pc, #288]	@ (80023e0 <HAL_UART_MspInit+0x2ec>)
 80022be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022c0:	f003 0310 	and.w	r3, r3, #16
 80022c4:	60fb      	str	r3, [r7, #12]
 80022c6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80022c8:	2300      	movs	r3, #0
 80022ca:	60bb      	str	r3, [r7, #8]
 80022cc:	4b44      	ldr	r3, [pc, #272]	@ (80023e0 <HAL_UART_MspInit+0x2ec>)
 80022ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022d0:	4a43      	ldr	r2, [pc, #268]	@ (80023e0 <HAL_UART_MspInit+0x2ec>)
 80022d2:	f043 0302 	orr.w	r3, r3, #2
 80022d6:	6313      	str	r3, [r2, #48]	@ 0x30
 80022d8:	4b41      	ldr	r3, [pc, #260]	@ (80023e0 <HAL_UART_MspInit+0x2ec>)
 80022da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022dc:	f003 0302 	and.w	r3, r3, #2
 80022e0:	60bb      	str	r3, [r7, #8]
 80022e2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80022e4:	23c0      	movs	r3, #192	@ 0xc0
 80022e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022e8:	2302      	movs	r3, #2
 80022ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022ec:	2300      	movs	r3, #0
 80022ee:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022f0:	2303      	movs	r3, #3
 80022f2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80022f4:	2307      	movs	r3, #7
 80022f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022f8:	f107 031c 	add.w	r3, r7, #28
 80022fc:	4619      	mov	r1, r3
 80022fe:	4839      	ldr	r0, [pc, #228]	@ (80023e4 <HAL_UART_MspInit+0x2f0>)
 8002300:	f000 fe68 	bl	8002fd4 <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8002304:	4b38      	ldr	r3, [pc, #224]	@ (80023e8 <HAL_UART_MspInit+0x2f4>)
 8002306:	4a39      	ldr	r2, [pc, #228]	@ (80023ec <HAL_UART_MspInit+0x2f8>)
 8002308:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 800230a:	4b37      	ldr	r3, [pc, #220]	@ (80023e8 <HAL_UART_MspInit+0x2f4>)
 800230c:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8002310:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002312:	4b35      	ldr	r3, [pc, #212]	@ (80023e8 <HAL_UART_MspInit+0x2f4>)
 8002314:	2200      	movs	r2, #0
 8002316:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002318:	4b33      	ldr	r3, [pc, #204]	@ (80023e8 <HAL_UART_MspInit+0x2f4>)
 800231a:	2200      	movs	r2, #0
 800231c:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800231e:	4b32      	ldr	r3, [pc, #200]	@ (80023e8 <HAL_UART_MspInit+0x2f4>)
 8002320:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002324:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002326:	4b30      	ldr	r3, [pc, #192]	@ (80023e8 <HAL_UART_MspInit+0x2f4>)
 8002328:	2200      	movs	r2, #0
 800232a:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800232c:	4b2e      	ldr	r3, [pc, #184]	@ (80023e8 <HAL_UART_MspInit+0x2f4>)
 800232e:	2200      	movs	r2, #0
 8002330:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8002332:	4b2d      	ldr	r3, [pc, #180]	@ (80023e8 <HAL_UART_MspInit+0x2f4>)
 8002334:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002338:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800233a:	4b2b      	ldr	r3, [pc, #172]	@ (80023e8 <HAL_UART_MspInit+0x2f4>)
 800233c:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8002340:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002342:	4b29      	ldr	r3, [pc, #164]	@ (80023e8 <HAL_UART_MspInit+0x2f4>)
 8002344:	2200      	movs	r2, #0
 8002346:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8002348:	4827      	ldr	r0, [pc, #156]	@ (80023e8 <HAL_UART_MspInit+0x2f4>)
 800234a:	f000 fa27 	bl	800279c <HAL_DMA_Init>
 800234e:	4603      	mov	r3, r0
 8002350:	2b00      	cmp	r3, #0
 8002352:	d001      	beq.n	8002358 <HAL_UART_MspInit+0x264>
      Error_Handler();
 8002354:	f7ff fb4a 	bl	80019ec <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	4a23      	ldr	r2, [pc, #140]	@ (80023e8 <HAL_UART_MspInit+0x2f4>)
 800235c:	63da      	str	r2, [r3, #60]	@ 0x3c
 800235e:	4a22      	ldr	r2, [pc, #136]	@ (80023e8 <HAL_UART_MspInit+0x2f4>)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_usart1_tx.Instance = DMA2_Stream7;
 8002364:	4b22      	ldr	r3, [pc, #136]	@ (80023f0 <HAL_UART_MspInit+0x2fc>)
 8002366:	4a23      	ldr	r2, [pc, #140]	@ (80023f4 <HAL_UART_MspInit+0x300>)
 8002368:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 800236a:	4b21      	ldr	r3, [pc, #132]	@ (80023f0 <HAL_UART_MspInit+0x2fc>)
 800236c:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8002370:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002372:	4b1f      	ldr	r3, [pc, #124]	@ (80023f0 <HAL_UART_MspInit+0x2fc>)
 8002374:	2240      	movs	r2, #64	@ 0x40
 8002376:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002378:	4b1d      	ldr	r3, [pc, #116]	@ (80023f0 <HAL_UART_MspInit+0x2fc>)
 800237a:	2200      	movs	r2, #0
 800237c:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800237e:	4b1c      	ldr	r3, [pc, #112]	@ (80023f0 <HAL_UART_MspInit+0x2fc>)
 8002380:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002384:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002386:	4b1a      	ldr	r3, [pc, #104]	@ (80023f0 <HAL_UART_MspInit+0x2fc>)
 8002388:	2200      	movs	r2, #0
 800238a:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800238c:	4b18      	ldr	r3, [pc, #96]	@ (80023f0 <HAL_UART_MspInit+0x2fc>)
 800238e:	2200      	movs	r2, #0
 8002390:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8002392:	4b17      	ldr	r3, [pc, #92]	@ (80023f0 <HAL_UART_MspInit+0x2fc>)
 8002394:	2200      	movs	r2, #0
 8002396:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002398:	4b15      	ldr	r3, [pc, #84]	@ (80023f0 <HAL_UART_MspInit+0x2fc>)
 800239a:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 800239e:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80023a0:	4b13      	ldr	r3, [pc, #76]	@ (80023f0 <HAL_UART_MspInit+0x2fc>)
 80023a2:	2200      	movs	r2, #0
 80023a4:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80023a6:	4812      	ldr	r0, [pc, #72]	@ (80023f0 <HAL_UART_MspInit+0x2fc>)
 80023a8:	f000 f9f8 	bl	800279c <HAL_DMA_Init>
 80023ac:	4603      	mov	r3, r0
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d001      	beq.n	80023b6 <HAL_UART_MspInit+0x2c2>
      Error_Handler();
 80023b2:	f7ff fb1b 	bl	80019ec <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	4a0d      	ldr	r2, [pc, #52]	@ (80023f0 <HAL_UART_MspInit+0x2fc>)
 80023ba:	639a      	str	r2, [r3, #56]	@ 0x38
 80023bc:	4a0c      	ldr	r2, [pc, #48]	@ (80023f0 <HAL_UART_MspInit+0x2fc>)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80023c2:	2200      	movs	r2, #0
 80023c4:	2100      	movs	r1, #0
 80023c6:	2025      	movs	r0, #37	@ 0x25
 80023c8:	f000 f9b1 	bl	800272e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80023cc:	2025      	movs	r0, #37	@ 0x25
 80023ce:	f000 f9ca 	bl	8002766 <HAL_NVIC_EnableIRQ>
}
 80023d2:	bf00      	nop
 80023d4:	3730      	adds	r7, #48	@ 0x30
 80023d6:	46bd      	mov	sp, r7
 80023d8:	bd80      	pop	{r7, pc}
 80023da:	bf00      	nop
 80023dc:	40011000 	.word	0x40011000
 80023e0:	40023800 	.word	0x40023800
 80023e4:	40020400 	.word	0x40020400
 80023e8:	200009d0 	.word	0x200009d0
 80023ec:	40026440 	.word	0x40026440
 80023f0:	20000a30 	.word	0x20000a30
 80023f4:	400264b8 	.word	0x400264b8

080023f8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80023f8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002430 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80023fc:	f7ff fc7e 	bl	8001cfc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002400:	480c      	ldr	r0, [pc, #48]	@ (8002434 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002402:	490d      	ldr	r1, [pc, #52]	@ (8002438 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002404:	4a0d      	ldr	r2, [pc, #52]	@ (800243c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002406:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002408:	e002      	b.n	8002410 <LoopCopyDataInit>

0800240a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800240a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800240c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800240e:	3304      	adds	r3, #4

08002410 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002410:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002412:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002414:	d3f9      	bcc.n	800240a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002416:	4a0a      	ldr	r2, [pc, #40]	@ (8002440 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002418:	4c0a      	ldr	r4, [pc, #40]	@ (8002444 <LoopFillZerobss+0x22>)
  movs r3, #0
 800241a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800241c:	e001      	b.n	8002422 <LoopFillZerobss>

0800241e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800241e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002420:	3204      	adds	r2, #4

08002422 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002422:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002424:	d3fb      	bcc.n	800241e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002426:	f006 f955 	bl	80086d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800242a:	f7fe ff2d 	bl	8001288 <main>
  bx  lr    
 800242e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002430:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002434:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002438:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 800243c:	0800ac48 	.word	0x0800ac48
  ldr r2, =_sbss
 8002440:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8002444:	20000be0 	.word	0x20000be0

08002448 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002448:	e7fe      	b.n	8002448 <ADC_IRQHandler>
	...

0800244c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002450:	4b0e      	ldr	r3, [pc, #56]	@ (800248c <HAL_Init+0x40>)
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	4a0d      	ldr	r2, [pc, #52]	@ (800248c <HAL_Init+0x40>)
 8002456:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800245a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800245c:	4b0b      	ldr	r3, [pc, #44]	@ (800248c <HAL_Init+0x40>)
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	4a0a      	ldr	r2, [pc, #40]	@ (800248c <HAL_Init+0x40>)
 8002462:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002466:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002468:	4b08      	ldr	r3, [pc, #32]	@ (800248c <HAL_Init+0x40>)
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	4a07      	ldr	r2, [pc, #28]	@ (800248c <HAL_Init+0x40>)
 800246e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002472:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002474:	2003      	movs	r0, #3
 8002476:	f000 f94f 	bl	8002718 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800247a:	200f      	movs	r0, #15
 800247c:	f000 f808 	bl	8002490 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002480:	f7ff faba 	bl	80019f8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002484:	2300      	movs	r3, #0
}
 8002486:	4618      	mov	r0, r3
 8002488:	bd80      	pop	{r7, pc}
 800248a:	bf00      	nop
 800248c:	40023c00 	.word	0x40023c00

08002490 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	b082      	sub	sp, #8
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002498:	4b12      	ldr	r3, [pc, #72]	@ (80024e4 <HAL_InitTick+0x54>)
 800249a:	681a      	ldr	r2, [r3, #0]
 800249c:	4b12      	ldr	r3, [pc, #72]	@ (80024e8 <HAL_InitTick+0x58>)
 800249e:	781b      	ldrb	r3, [r3, #0]
 80024a0:	4619      	mov	r1, r3
 80024a2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80024a6:	fbb3 f3f1 	udiv	r3, r3, r1
 80024aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80024ae:	4618      	mov	r0, r3
 80024b0:	f000 f967 	bl	8002782 <HAL_SYSTICK_Config>
 80024b4:	4603      	mov	r3, r0
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d001      	beq.n	80024be <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80024ba:	2301      	movs	r3, #1
 80024bc:	e00e      	b.n	80024dc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	2b0f      	cmp	r3, #15
 80024c2:	d80a      	bhi.n	80024da <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80024c4:	2200      	movs	r2, #0
 80024c6:	6879      	ldr	r1, [r7, #4]
 80024c8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80024cc:	f000 f92f 	bl	800272e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80024d0:	4a06      	ldr	r2, [pc, #24]	@ (80024ec <HAL_InitTick+0x5c>)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80024d6:	2300      	movs	r3, #0
 80024d8:	e000      	b.n	80024dc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80024da:	2301      	movs	r3, #1
}
 80024dc:	4618      	mov	r0, r3
 80024de:	3708      	adds	r7, #8
 80024e0:	46bd      	mov	sp, r7
 80024e2:	bd80      	pop	{r7, pc}
 80024e4:	20000004 	.word	0x20000004
 80024e8:	2000000c 	.word	0x2000000c
 80024ec:	20000008 	.word	0x20000008

080024f0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80024f0:	b480      	push	{r7}
 80024f2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80024f4:	4b06      	ldr	r3, [pc, #24]	@ (8002510 <HAL_IncTick+0x20>)
 80024f6:	781b      	ldrb	r3, [r3, #0]
 80024f8:	461a      	mov	r2, r3
 80024fa:	4b06      	ldr	r3, [pc, #24]	@ (8002514 <HAL_IncTick+0x24>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	4413      	add	r3, r2
 8002500:	4a04      	ldr	r2, [pc, #16]	@ (8002514 <HAL_IncTick+0x24>)
 8002502:	6013      	str	r3, [r2, #0]
}
 8002504:	bf00      	nop
 8002506:	46bd      	mov	sp, r7
 8002508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250c:	4770      	bx	lr
 800250e:	bf00      	nop
 8002510:	2000000c 	.word	0x2000000c
 8002514:	20000a90 	.word	0x20000a90

08002518 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002518:	b480      	push	{r7}
 800251a:	af00      	add	r7, sp, #0
  return uwTick;
 800251c:	4b03      	ldr	r3, [pc, #12]	@ (800252c <HAL_GetTick+0x14>)
 800251e:	681b      	ldr	r3, [r3, #0]
}
 8002520:	4618      	mov	r0, r3
 8002522:	46bd      	mov	sp, r7
 8002524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002528:	4770      	bx	lr
 800252a:	bf00      	nop
 800252c:	20000a90 	.word	0x20000a90

08002530 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	b084      	sub	sp, #16
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002538:	f7ff ffee 	bl	8002518 <HAL_GetTick>
 800253c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002548:	d005      	beq.n	8002556 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800254a:	4b0a      	ldr	r3, [pc, #40]	@ (8002574 <HAL_Delay+0x44>)
 800254c:	781b      	ldrb	r3, [r3, #0]
 800254e:	461a      	mov	r2, r3
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	4413      	add	r3, r2
 8002554:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002556:	bf00      	nop
 8002558:	f7ff ffde 	bl	8002518 <HAL_GetTick>
 800255c:	4602      	mov	r2, r0
 800255e:	68bb      	ldr	r3, [r7, #8]
 8002560:	1ad3      	subs	r3, r2, r3
 8002562:	68fa      	ldr	r2, [r7, #12]
 8002564:	429a      	cmp	r2, r3
 8002566:	d8f7      	bhi.n	8002558 <HAL_Delay+0x28>
  {
  }
}
 8002568:	bf00      	nop
 800256a:	bf00      	nop
 800256c:	3710      	adds	r7, #16
 800256e:	46bd      	mov	sp, r7
 8002570:	bd80      	pop	{r7, pc}
 8002572:	bf00      	nop
 8002574:	2000000c 	.word	0x2000000c

08002578 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002578:	b480      	push	{r7}
 800257a:	b085      	sub	sp, #20
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	f003 0307 	and.w	r3, r3, #7
 8002586:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002588:	4b0c      	ldr	r3, [pc, #48]	@ (80025bc <__NVIC_SetPriorityGrouping+0x44>)
 800258a:	68db      	ldr	r3, [r3, #12]
 800258c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800258e:	68ba      	ldr	r2, [r7, #8]
 8002590:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002594:	4013      	ands	r3, r2
 8002596:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800259c:	68bb      	ldr	r3, [r7, #8]
 800259e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80025a0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80025a4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80025a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80025aa:	4a04      	ldr	r2, [pc, #16]	@ (80025bc <__NVIC_SetPriorityGrouping+0x44>)
 80025ac:	68bb      	ldr	r3, [r7, #8]
 80025ae:	60d3      	str	r3, [r2, #12]
}
 80025b0:	bf00      	nop
 80025b2:	3714      	adds	r7, #20
 80025b4:	46bd      	mov	sp, r7
 80025b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ba:	4770      	bx	lr
 80025bc:	e000ed00 	.word	0xe000ed00

080025c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80025c0:	b480      	push	{r7}
 80025c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80025c4:	4b04      	ldr	r3, [pc, #16]	@ (80025d8 <__NVIC_GetPriorityGrouping+0x18>)
 80025c6:	68db      	ldr	r3, [r3, #12]
 80025c8:	0a1b      	lsrs	r3, r3, #8
 80025ca:	f003 0307 	and.w	r3, r3, #7
}
 80025ce:	4618      	mov	r0, r3
 80025d0:	46bd      	mov	sp, r7
 80025d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d6:	4770      	bx	lr
 80025d8:	e000ed00 	.word	0xe000ed00

080025dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025dc:	b480      	push	{r7}
 80025de:	b083      	sub	sp, #12
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	4603      	mov	r3, r0
 80025e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	db0b      	blt.n	8002606 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80025ee:	79fb      	ldrb	r3, [r7, #7]
 80025f0:	f003 021f 	and.w	r2, r3, #31
 80025f4:	4907      	ldr	r1, [pc, #28]	@ (8002614 <__NVIC_EnableIRQ+0x38>)
 80025f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025fa:	095b      	lsrs	r3, r3, #5
 80025fc:	2001      	movs	r0, #1
 80025fe:	fa00 f202 	lsl.w	r2, r0, r2
 8002602:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002606:	bf00      	nop
 8002608:	370c      	adds	r7, #12
 800260a:	46bd      	mov	sp, r7
 800260c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002610:	4770      	bx	lr
 8002612:	bf00      	nop
 8002614:	e000e100 	.word	0xe000e100

08002618 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002618:	b480      	push	{r7}
 800261a:	b083      	sub	sp, #12
 800261c:	af00      	add	r7, sp, #0
 800261e:	4603      	mov	r3, r0
 8002620:	6039      	str	r1, [r7, #0]
 8002622:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002624:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002628:	2b00      	cmp	r3, #0
 800262a:	db0a      	blt.n	8002642 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	b2da      	uxtb	r2, r3
 8002630:	490c      	ldr	r1, [pc, #48]	@ (8002664 <__NVIC_SetPriority+0x4c>)
 8002632:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002636:	0112      	lsls	r2, r2, #4
 8002638:	b2d2      	uxtb	r2, r2
 800263a:	440b      	add	r3, r1
 800263c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002640:	e00a      	b.n	8002658 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002642:	683b      	ldr	r3, [r7, #0]
 8002644:	b2da      	uxtb	r2, r3
 8002646:	4908      	ldr	r1, [pc, #32]	@ (8002668 <__NVIC_SetPriority+0x50>)
 8002648:	79fb      	ldrb	r3, [r7, #7]
 800264a:	f003 030f 	and.w	r3, r3, #15
 800264e:	3b04      	subs	r3, #4
 8002650:	0112      	lsls	r2, r2, #4
 8002652:	b2d2      	uxtb	r2, r2
 8002654:	440b      	add	r3, r1
 8002656:	761a      	strb	r2, [r3, #24]
}
 8002658:	bf00      	nop
 800265a:	370c      	adds	r7, #12
 800265c:	46bd      	mov	sp, r7
 800265e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002662:	4770      	bx	lr
 8002664:	e000e100 	.word	0xe000e100
 8002668:	e000ed00 	.word	0xe000ed00

0800266c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800266c:	b480      	push	{r7}
 800266e:	b089      	sub	sp, #36	@ 0x24
 8002670:	af00      	add	r7, sp, #0
 8002672:	60f8      	str	r0, [r7, #12]
 8002674:	60b9      	str	r1, [r7, #8]
 8002676:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	f003 0307 	and.w	r3, r3, #7
 800267e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002680:	69fb      	ldr	r3, [r7, #28]
 8002682:	f1c3 0307 	rsb	r3, r3, #7
 8002686:	2b04      	cmp	r3, #4
 8002688:	bf28      	it	cs
 800268a:	2304      	movcs	r3, #4
 800268c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800268e:	69fb      	ldr	r3, [r7, #28]
 8002690:	3304      	adds	r3, #4
 8002692:	2b06      	cmp	r3, #6
 8002694:	d902      	bls.n	800269c <NVIC_EncodePriority+0x30>
 8002696:	69fb      	ldr	r3, [r7, #28]
 8002698:	3b03      	subs	r3, #3
 800269a:	e000      	b.n	800269e <NVIC_EncodePriority+0x32>
 800269c:	2300      	movs	r3, #0
 800269e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026a0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80026a4:	69bb      	ldr	r3, [r7, #24]
 80026a6:	fa02 f303 	lsl.w	r3, r2, r3
 80026aa:	43da      	mvns	r2, r3
 80026ac:	68bb      	ldr	r3, [r7, #8]
 80026ae:	401a      	ands	r2, r3
 80026b0:	697b      	ldr	r3, [r7, #20]
 80026b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80026b4:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80026b8:	697b      	ldr	r3, [r7, #20]
 80026ba:	fa01 f303 	lsl.w	r3, r1, r3
 80026be:	43d9      	mvns	r1, r3
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026c4:	4313      	orrs	r3, r2
         );
}
 80026c6:	4618      	mov	r0, r3
 80026c8:	3724      	adds	r7, #36	@ 0x24
 80026ca:	46bd      	mov	sp, r7
 80026cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d0:	4770      	bx	lr
	...

080026d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b082      	sub	sp, #8
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	3b01      	subs	r3, #1
 80026e0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80026e4:	d301      	bcc.n	80026ea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80026e6:	2301      	movs	r3, #1
 80026e8:	e00f      	b.n	800270a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80026ea:	4a0a      	ldr	r2, [pc, #40]	@ (8002714 <SysTick_Config+0x40>)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	3b01      	subs	r3, #1
 80026f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80026f2:	210f      	movs	r1, #15
 80026f4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80026f8:	f7ff ff8e 	bl	8002618 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80026fc:	4b05      	ldr	r3, [pc, #20]	@ (8002714 <SysTick_Config+0x40>)
 80026fe:	2200      	movs	r2, #0
 8002700:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002702:	4b04      	ldr	r3, [pc, #16]	@ (8002714 <SysTick_Config+0x40>)
 8002704:	2207      	movs	r2, #7
 8002706:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002708:	2300      	movs	r3, #0
}
 800270a:	4618      	mov	r0, r3
 800270c:	3708      	adds	r7, #8
 800270e:	46bd      	mov	sp, r7
 8002710:	bd80      	pop	{r7, pc}
 8002712:	bf00      	nop
 8002714:	e000e010 	.word	0xe000e010

08002718 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	b082      	sub	sp, #8
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002720:	6878      	ldr	r0, [r7, #4]
 8002722:	f7ff ff29 	bl	8002578 <__NVIC_SetPriorityGrouping>
}
 8002726:	bf00      	nop
 8002728:	3708      	adds	r7, #8
 800272a:	46bd      	mov	sp, r7
 800272c:	bd80      	pop	{r7, pc}

0800272e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800272e:	b580      	push	{r7, lr}
 8002730:	b086      	sub	sp, #24
 8002732:	af00      	add	r7, sp, #0
 8002734:	4603      	mov	r3, r0
 8002736:	60b9      	str	r1, [r7, #8]
 8002738:	607a      	str	r2, [r7, #4]
 800273a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800273c:	2300      	movs	r3, #0
 800273e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002740:	f7ff ff3e 	bl	80025c0 <__NVIC_GetPriorityGrouping>
 8002744:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002746:	687a      	ldr	r2, [r7, #4]
 8002748:	68b9      	ldr	r1, [r7, #8]
 800274a:	6978      	ldr	r0, [r7, #20]
 800274c:	f7ff ff8e 	bl	800266c <NVIC_EncodePriority>
 8002750:	4602      	mov	r2, r0
 8002752:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002756:	4611      	mov	r1, r2
 8002758:	4618      	mov	r0, r3
 800275a:	f7ff ff5d 	bl	8002618 <__NVIC_SetPriority>
}
 800275e:	bf00      	nop
 8002760:	3718      	adds	r7, #24
 8002762:	46bd      	mov	sp, r7
 8002764:	bd80      	pop	{r7, pc}

08002766 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002766:	b580      	push	{r7, lr}
 8002768:	b082      	sub	sp, #8
 800276a:	af00      	add	r7, sp, #0
 800276c:	4603      	mov	r3, r0
 800276e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002770:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002774:	4618      	mov	r0, r3
 8002776:	f7ff ff31 	bl	80025dc <__NVIC_EnableIRQ>
}
 800277a:	bf00      	nop
 800277c:	3708      	adds	r7, #8
 800277e:	46bd      	mov	sp, r7
 8002780:	bd80      	pop	{r7, pc}

08002782 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002782:	b580      	push	{r7, lr}
 8002784:	b082      	sub	sp, #8
 8002786:	af00      	add	r7, sp, #0
 8002788:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800278a:	6878      	ldr	r0, [r7, #4]
 800278c:	f7ff ffa2 	bl	80026d4 <SysTick_Config>
 8002790:	4603      	mov	r3, r0
}
 8002792:	4618      	mov	r0, r3
 8002794:	3708      	adds	r7, #8
 8002796:	46bd      	mov	sp, r7
 8002798:	bd80      	pop	{r7, pc}
	...

0800279c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800279c:	b580      	push	{r7, lr}
 800279e:	b086      	sub	sp, #24
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80027a4:	2300      	movs	r3, #0
 80027a6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80027a8:	f7ff feb6 	bl	8002518 <HAL_GetTick>
 80027ac:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d101      	bne.n	80027b8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80027b4:	2301      	movs	r3, #1
 80027b6:	e099      	b.n	80028ec <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	2202      	movs	r2, #2
 80027bc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	2200      	movs	r2, #0
 80027c4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	681a      	ldr	r2, [r3, #0]
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f022 0201 	bic.w	r2, r2, #1
 80027d6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80027d8:	e00f      	b.n	80027fa <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80027da:	f7ff fe9d 	bl	8002518 <HAL_GetTick>
 80027de:	4602      	mov	r2, r0
 80027e0:	693b      	ldr	r3, [r7, #16]
 80027e2:	1ad3      	subs	r3, r2, r3
 80027e4:	2b05      	cmp	r3, #5
 80027e6:	d908      	bls.n	80027fa <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	2220      	movs	r2, #32
 80027ec:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	2203      	movs	r2, #3
 80027f2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80027f6:	2303      	movs	r3, #3
 80027f8:	e078      	b.n	80028ec <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f003 0301 	and.w	r3, r3, #1
 8002804:	2b00      	cmp	r3, #0
 8002806:	d1e8      	bne.n	80027da <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002810:	697a      	ldr	r2, [r7, #20]
 8002812:	4b38      	ldr	r3, [pc, #224]	@ (80028f4 <HAL_DMA_Init+0x158>)
 8002814:	4013      	ands	r3, r2
 8002816:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	685a      	ldr	r2, [r3, #4]
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	689b      	ldr	r3, [r3, #8]
 8002820:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002826:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	691b      	ldr	r3, [r3, #16]
 800282c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002832:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	699b      	ldr	r3, [r3, #24]
 8002838:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800283e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	6a1b      	ldr	r3, [r3, #32]
 8002844:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002846:	697a      	ldr	r2, [r7, #20]
 8002848:	4313      	orrs	r3, r2
 800284a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002850:	2b04      	cmp	r3, #4
 8002852:	d107      	bne.n	8002864 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800285c:	4313      	orrs	r3, r2
 800285e:	697a      	ldr	r2, [r7, #20]
 8002860:	4313      	orrs	r3, r2
 8002862:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	697a      	ldr	r2, [r7, #20]
 800286a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	695b      	ldr	r3, [r3, #20]
 8002872:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002874:	697b      	ldr	r3, [r7, #20]
 8002876:	f023 0307 	bic.w	r3, r3, #7
 800287a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002880:	697a      	ldr	r2, [r7, #20]
 8002882:	4313      	orrs	r3, r2
 8002884:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800288a:	2b04      	cmp	r3, #4
 800288c:	d117      	bne.n	80028be <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002892:	697a      	ldr	r2, [r7, #20]
 8002894:	4313      	orrs	r3, r2
 8002896:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800289c:	2b00      	cmp	r3, #0
 800289e:	d00e      	beq.n	80028be <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80028a0:	6878      	ldr	r0, [r7, #4]
 80028a2:	f000 fb1b 	bl	8002edc <DMA_CheckFifoParam>
 80028a6:	4603      	mov	r3, r0
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d008      	beq.n	80028be <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	2240      	movs	r2, #64	@ 0x40
 80028b0:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	2201      	movs	r2, #1
 80028b6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80028ba:	2301      	movs	r3, #1
 80028bc:	e016      	b.n	80028ec <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	697a      	ldr	r2, [r7, #20]
 80028c4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80028c6:	6878      	ldr	r0, [r7, #4]
 80028c8:	f000 fad2 	bl	8002e70 <DMA_CalcBaseAndBitshift>
 80028cc:	4603      	mov	r3, r0
 80028ce:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028d4:	223f      	movs	r2, #63	@ 0x3f
 80028d6:	409a      	lsls	r2, r3
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	2200      	movs	r2, #0
 80028e0:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	2201      	movs	r2, #1
 80028e6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80028ea:	2300      	movs	r3, #0
}
 80028ec:	4618      	mov	r0, r3
 80028ee:	3718      	adds	r7, #24
 80028f0:	46bd      	mov	sp, r7
 80028f2:	bd80      	pop	{r7, pc}
 80028f4:	f010803f 	.word	0xf010803f

080028f8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b086      	sub	sp, #24
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	60f8      	str	r0, [r7, #12]
 8002900:	60b9      	str	r1, [r7, #8]
 8002902:	607a      	str	r2, [r7, #4]
 8002904:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002906:	2300      	movs	r3, #0
 8002908:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800290e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002916:	2b01      	cmp	r3, #1
 8002918:	d101      	bne.n	800291e <HAL_DMA_Start_IT+0x26>
 800291a:	2302      	movs	r3, #2
 800291c:	e040      	b.n	80029a0 <HAL_DMA_Start_IT+0xa8>
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	2201      	movs	r2, #1
 8002922:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800292c:	b2db      	uxtb	r3, r3
 800292e:	2b01      	cmp	r3, #1
 8002930:	d12f      	bne.n	8002992 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	2202      	movs	r2, #2
 8002936:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	2200      	movs	r2, #0
 800293e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002940:	683b      	ldr	r3, [r7, #0]
 8002942:	687a      	ldr	r2, [r7, #4]
 8002944:	68b9      	ldr	r1, [r7, #8]
 8002946:	68f8      	ldr	r0, [r7, #12]
 8002948:	f000 fa64 	bl	8002e14 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002950:	223f      	movs	r2, #63	@ 0x3f
 8002952:	409a      	lsls	r2, r3
 8002954:	693b      	ldr	r3, [r7, #16]
 8002956:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	681a      	ldr	r2, [r3, #0]
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f042 0216 	orr.w	r2, r2, #22
 8002966:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800296c:	2b00      	cmp	r3, #0
 800296e:	d007      	beq.n	8002980 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	681a      	ldr	r2, [r3, #0]
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f042 0208 	orr.w	r2, r2, #8
 800297e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	681a      	ldr	r2, [r3, #0]
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f042 0201 	orr.w	r2, r2, #1
 800298e:	601a      	str	r2, [r3, #0]
 8002990:	e005      	b.n	800299e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	2200      	movs	r2, #0
 8002996:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800299a:	2302      	movs	r3, #2
 800299c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800299e:	7dfb      	ldrb	r3, [r7, #23]
}
 80029a0:	4618      	mov	r0, r3
 80029a2:	3718      	adds	r7, #24
 80029a4:	46bd      	mov	sp, r7
 80029a6:	bd80      	pop	{r7, pc}

080029a8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b084      	sub	sp, #16
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029b4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80029b6:	f7ff fdaf 	bl	8002518 <HAL_GetTick>
 80029ba:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80029c2:	b2db      	uxtb	r3, r3
 80029c4:	2b02      	cmp	r3, #2
 80029c6:	d008      	beq.n	80029da <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	2280      	movs	r2, #128	@ 0x80
 80029cc:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	2200      	movs	r2, #0
 80029d2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80029d6:	2301      	movs	r3, #1
 80029d8:	e052      	b.n	8002a80 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	681a      	ldr	r2, [r3, #0]
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f022 0216 	bic.w	r2, r2, #22
 80029e8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	695a      	ldr	r2, [r3, #20]
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80029f8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d103      	bne.n	8002a0a <HAL_DMA_Abort+0x62>
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d007      	beq.n	8002a1a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	681a      	ldr	r2, [r3, #0]
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f022 0208 	bic.w	r2, r2, #8
 8002a18:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	681a      	ldr	r2, [r3, #0]
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f022 0201 	bic.w	r2, r2, #1
 8002a28:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002a2a:	e013      	b.n	8002a54 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002a2c:	f7ff fd74 	bl	8002518 <HAL_GetTick>
 8002a30:	4602      	mov	r2, r0
 8002a32:	68bb      	ldr	r3, [r7, #8]
 8002a34:	1ad3      	subs	r3, r2, r3
 8002a36:	2b05      	cmp	r3, #5
 8002a38:	d90c      	bls.n	8002a54 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	2220      	movs	r2, #32
 8002a3e:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	2203      	movs	r2, #3
 8002a44:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8002a50:	2303      	movs	r3, #3
 8002a52:	e015      	b.n	8002a80 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f003 0301 	and.w	r3, r3, #1
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d1e4      	bne.n	8002a2c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a66:	223f      	movs	r2, #63	@ 0x3f
 8002a68:	409a      	lsls	r2, r3
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	2201      	movs	r2, #1
 8002a72:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	2200      	movs	r2, #0
 8002a7a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8002a7e:	2300      	movs	r3, #0
}
 8002a80:	4618      	mov	r0, r3
 8002a82:	3710      	adds	r7, #16
 8002a84:	46bd      	mov	sp, r7
 8002a86:	bd80      	pop	{r7, pc}

08002a88 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002a88:	b480      	push	{r7}
 8002a8a:	b083      	sub	sp, #12
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002a96:	b2db      	uxtb	r3, r3
 8002a98:	2b02      	cmp	r3, #2
 8002a9a:	d004      	beq.n	8002aa6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	2280      	movs	r2, #128	@ 0x80
 8002aa0:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002aa2:	2301      	movs	r3, #1
 8002aa4:	e00c      	b.n	8002ac0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	2205      	movs	r2, #5
 8002aaa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	681a      	ldr	r2, [r3, #0]
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f022 0201 	bic.w	r2, r2, #1
 8002abc:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002abe:	2300      	movs	r3, #0
}
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	370c      	adds	r7, #12
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aca:	4770      	bx	lr

08002acc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b086      	sub	sp, #24
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002ad4:	2300      	movs	r3, #0
 8002ad6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002ad8:	4b8e      	ldr	r3, [pc, #568]	@ (8002d14 <HAL_DMA_IRQHandler+0x248>)
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	4a8e      	ldr	r2, [pc, #568]	@ (8002d18 <HAL_DMA_IRQHandler+0x24c>)
 8002ade:	fba2 2303 	umull	r2, r3, r2, r3
 8002ae2:	0a9b      	lsrs	r3, r3, #10
 8002ae4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002aea:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002aec:	693b      	ldr	r3, [r7, #16]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002af6:	2208      	movs	r2, #8
 8002af8:	409a      	lsls	r2, r3
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	4013      	ands	r3, r2
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d01a      	beq.n	8002b38 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f003 0304 	and.w	r3, r3, #4
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d013      	beq.n	8002b38 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	681a      	ldr	r2, [r3, #0]
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f022 0204 	bic.w	r2, r2, #4
 8002b1e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b24:	2208      	movs	r2, #8
 8002b26:	409a      	lsls	r2, r3
 8002b28:	693b      	ldr	r3, [r7, #16]
 8002b2a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b30:	f043 0201 	orr.w	r2, r3, #1
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b3c:	2201      	movs	r2, #1
 8002b3e:	409a      	lsls	r2, r3
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	4013      	ands	r3, r2
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d012      	beq.n	8002b6e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	695b      	ldr	r3, [r3, #20]
 8002b4e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d00b      	beq.n	8002b6e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b5a:	2201      	movs	r2, #1
 8002b5c:	409a      	lsls	r2, r3
 8002b5e:	693b      	ldr	r3, [r7, #16]
 8002b60:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b66:	f043 0202 	orr.w	r2, r3, #2
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b72:	2204      	movs	r2, #4
 8002b74:	409a      	lsls	r2, r3
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	4013      	ands	r3, r2
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d012      	beq.n	8002ba4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f003 0302 	and.w	r3, r3, #2
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d00b      	beq.n	8002ba4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b90:	2204      	movs	r2, #4
 8002b92:	409a      	lsls	r2, r3
 8002b94:	693b      	ldr	r3, [r7, #16]
 8002b96:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b9c:	f043 0204 	orr.w	r2, r3, #4
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ba8:	2210      	movs	r2, #16
 8002baa:	409a      	lsls	r2, r3
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	4013      	ands	r3, r2
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d043      	beq.n	8002c3c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f003 0308 	and.w	r3, r3, #8
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d03c      	beq.n	8002c3c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002bc6:	2210      	movs	r2, #16
 8002bc8:	409a      	lsls	r2, r3
 8002bca:	693b      	ldr	r3, [r7, #16]
 8002bcc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d018      	beq.n	8002c0e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d108      	bne.n	8002bfc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d024      	beq.n	8002c3c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bf6:	6878      	ldr	r0, [r7, #4]
 8002bf8:	4798      	blx	r3
 8002bfa:	e01f      	b.n	8002c3c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d01b      	beq.n	8002c3c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002c08:	6878      	ldr	r0, [r7, #4]
 8002c0a:	4798      	blx	r3
 8002c0c:	e016      	b.n	8002c3c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d107      	bne.n	8002c2c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	681a      	ldr	r2, [r3, #0]
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f022 0208 	bic.w	r2, r2, #8
 8002c2a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d003      	beq.n	8002c3c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c38:	6878      	ldr	r0, [r7, #4]
 8002c3a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c40:	2220      	movs	r2, #32
 8002c42:	409a      	lsls	r2, r3
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	4013      	ands	r3, r2
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	f000 808f 	beq.w	8002d6c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f003 0310 	and.w	r3, r3, #16
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	f000 8087 	beq.w	8002d6c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c62:	2220      	movs	r2, #32
 8002c64:	409a      	lsls	r2, r3
 8002c66:	693b      	ldr	r3, [r7, #16]
 8002c68:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002c70:	b2db      	uxtb	r3, r3
 8002c72:	2b05      	cmp	r3, #5
 8002c74:	d136      	bne.n	8002ce4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	681a      	ldr	r2, [r3, #0]
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f022 0216 	bic.w	r2, r2, #22
 8002c84:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	695a      	ldr	r2, [r3, #20]
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002c94:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d103      	bne.n	8002ca6 <HAL_DMA_IRQHandler+0x1da>
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d007      	beq.n	8002cb6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	681a      	ldr	r2, [r3, #0]
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f022 0208 	bic.w	r2, r2, #8
 8002cb4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002cba:	223f      	movs	r2, #63	@ 0x3f
 8002cbc:	409a      	lsls	r2, r3
 8002cbe:	693b      	ldr	r3, [r7, #16]
 8002cc0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	2201      	movs	r2, #1
 8002cc6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	2200      	movs	r2, #0
 8002cce:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d07e      	beq.n	8002dd8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002cde:	6878      	ldr	r0, [r7, #4]
 8002ce0:	4798      	blx	r3
        }
        return;
 8002ce2:	e079      	b.n	8002dd8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d01d      	beq.n	8002d2e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d10d      	bne.n	8002d1c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d031      	beq.n	8002d6c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d0c:	6878      	ldr	r0, [r7, #4]
 8002d0e:	4798      	blx	r3
 8002d10:	e02c      	b.n	8002d6c <HAL_DMA_IRQHandler+0x2a0>
 8002d12:	bf00      	nop
 8002d14:	20000004 	.word	0x20000004
 8002d18:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d023      	beq.n	8002d6c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d28:	6878      	ldr	r0, [r7, #4]
 8002d2a:	4798      	blx	r3
 8002d2c:	e01e      	b.n	8002d6c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d10f      	bne.n	8002d5c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	681a      	ldr	r2, [r3, #0]
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f022 0210 	bic.w	r2, r2, #16
 8002d4a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	2201      	movs	r2, #1
 8002d50:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	2200      	movs	r2, #0
 8002d58:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d003      	beq.n	8002d6c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d68:	6878      	ldr	r0, [r7, #4]
 8002d6a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d032      	beq.n	8002dda <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d78:	f003 0301 	and.w	r3, r3, #1
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d022      	beq.n	8002dc6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	2205      	movs	r2, #5
 8002d84:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	681a      	ldr	r2, [r3, #0]
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f022 0201 	bic.w	r2, r2, #1
 8002d96:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002d98:	68bb      	ldr	r3, [r7, #8]
 8002d9a:	3301      	adds	r3, #1
 8002d9c:	60bb      	str	r3, [r7, #8]
 8002d9e:	697a      	ldr	r2, [r7, #20]
 8002da0:	429a      	cmp	r2, r3
 8002da2:	d307      	bcc.n	8002db4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f003 0301 	and.w	r3, r3, #1
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d1f2      	bne.n	8002d98 <HAL_DMA_IRQHandler+0x2cc>
 8002db2:	e000      	b.n	8002db6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002db4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	2201      	movs	r2, #1
 8002dba:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d005      	beq.n	8002dda <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002dd2:	6878      	ldr	r0, [r7, #4]
 8002dd4:	4798      	blx	r3
 8002dd6:	e000      	b.n	8002dda <HAL_DMA_IRQHandler+0x30e>
        return;
 8002dd8:	bf00      	nop
    }
  }
}
 8002dda:	3718      	adds	r7, #24
 8002ddc:	46bd      	mov	sp, r7
 8002dde:	bd80      	pop	{r7, pc}

08002de0 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8002de0:	b480      	push	{r7}
 8002de2:	b083      	sub	sp, #12
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002dee:	b2db      	uxtb	r3, r3
}
 8002df0:	4618      	mov	r0, r3
 8002df2:	370c      	adds	r7, #12
 8002df4:	46bd      	mov	sp, r7
 8002df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfa:	4770      	bx	lr

08002dfc <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8002dfc:	b480      	push	{r7}
 8002dfe:	b083      	sub	sp, #12
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 8002e08:	4618      	mov	r0, r3
 8002e0a:	370c      	adds	r7, #12
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e12:	4770      	bx	lr

08002e14 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002e14:	b480      	push	{r7}
 8002e16:	b085      	sub	sp, #20
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	60f8      	str	r0, [r7, #12]
 8002e1c:	60b9      	str	r1, [r7, #8]
 8002e1e:	607a      	str	r2, [r7, #4]
 8002e20:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	681a      	ldr	r2, [r3, #0]
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002e30:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	683a      	ldr	r2, [r7, #0]
 8002e38:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	689b      	ldr	r3, [r3, #8]
 8002e3e:	2b40      	cmp	r3, #64	@ 0x40
 8002e40:	d108      	bne.n	8002e54 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	687a      	ldr	r2, [r7, #4]
 8002e48:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	68ba      	ldr	r2, [r7, #8]
 8002e50:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002e52:	e007      	b.n	8002e64 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	68ba      	ldr	r2, [r7, #8]
 8002e5a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	687a      	ldr	r2, [r7, #4]
 8002e62:	60da      	str	r2, [r3, #12]
}
 8002e64:	bf00      	nop
 8002e66:	3714      	adds	r7, #20
 8002e68:	46bd      	mov	sp, r7
 8002e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6e:	4770      	bx	lr

08002e70 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002e70:	b480      	push	{r7}
 8002e72:	b085      	sub	sp, #20
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	b2db      	uxtb	r3, r3
 8002e7e:	3b10      	subs	r3, #16
 8002e80:	4a14      	ldr	r2, [pc, #80]	@ (8002ed4 <DMA_CalcBaseAndBitshift+0x64>)
 8002e82:	fba2 2303 	umull	r2, r3, r2, r3
 8002e86:	091b      	lsrs	r3, r3, #4
 8002e88:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002e8a:	4a13      	ldr	r2, [pc, #76]	@ (8002ed8 <DMA_CalcBaseAndBitshift+0x68>)
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	4413      	add	r3, r2
 8002e90:	781b      	ldrb	r3, [r3, #0]
 8002e92:	461a      	mov	r2, r3
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	2b03      	cmp	r3, #3
 8002e9c:	d909      	bls.n	8002eb2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002ea6:	f023 0303 	bic.w	r3, r3, #3
 8002eaa:	1d1a      	adds	r2, r3, #4
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	659a      	str	r2, [r3, #88]	@ 0x58
 8002eb0:	e007      	b.n	8002ec2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002eba:	f023 0303 	bic.w	r3, r3, #3
 8002ebe:	687a      	ldr	r2, [r7, #4]
 8002ec0:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	3714      	adds	r7, #20
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed0:	4770      	bx	lr
 8002ed2:	bf00      	nop
 8002ed4:	aaaaaaab 	.word	0xaaaaaaab
 8002ed8:	0800a8c0 	.word	0x0800a8c0

08002edc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002edc:	b480      	push	{r7}
 8002ede:	b085      	sub	sp, #20
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002ee4:	2300      	movs	r3, #0
 8002ee6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002eec:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	699b      	ldr	r3, [r3, #24]
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d11f      	bne.n	8002f36 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002ef6:	68bb      	ldr	r3, [r7, #8]
 8002ef8:	2b03      	cmp	r3, #3
 8002efa:	d856      	bhi.n	8002faa <DMA_CheckFifoParam+0xce>
 8002efc:	a201      	add	r2, pc, #4	@ (adr r2, 8002f04 <DMA_CheckFifoParam+0x28>)
 8002efe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f02:	bf00      	nop
 8002f04:	08002f15 	.word	0x08002f15
 8002f08:	08002f27 	.word	0x08002f27
 8002f0c:	08002f15 	.word	0x08002f15
 8002f10:	08002fab 	.word	0x08002fab
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f18:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d046      	beq.n	8002fae <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002f20:	2301      	movs	r3, #1
 8002f22:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f24:	e043      	b.n	8002fae <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f2a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002f2e:	d140      	bne.n	8002fb2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002f30:	2301      	movs	r3, #1
 8002f32:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f34:	e03d      	b.n	8002fb2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	699b      	ldr	r3, [r3, #24]
 8002f3a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002f3e:	d121      	bne.n	8002f84 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002f40:	68bb      	ldr	r3, [r7, #8]
 8002f42:	2b03      	cmp	r3, #3
 8002f44:	d837      	bhi.n	8002fb6 <DMA_CheckFifoParam+0xda>
 8002f46:	a201      	add	r2, pc, #4	@ (adr r2, 8002f4c <DMA_CheckFifoParam+0x70>)
 8002f48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f4c:	08002f5d 	.word	0x08002f5d
 8002f50:	08002f63 	.word	0x08002f63
 8002f54:	08002f5d 	.word	0x08002f5d
 8002f58:	08002f75 	.word	0x08002f75
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002f5c:	2301      	movs	r3, #1
 8002f5e:	73fb      	strb	r3, [r7, #15]
      break;
 8002f60:	e030      	b.n	8002fc4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f66:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d025      	beq.n	8002fba <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002f6e:	2301      	movs	r3, #1
 8002f70:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f72:	e022      	b.n	8002fba <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f78:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002f7c:	d11f      	bne.n	8002fbe <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002f7e:	2301      	movs	r3, #1
 8002f80:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002f82:	e01c      	b.n	8002fbe <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002f84:	68bb      	ldr	r3, [r7, #8]
 8002f86:	2b02      	cmp	r3, #2
 8002f88:	d903      	bls.n	8002f92 <DMA_CheckFifoParam+0xb6>
 8002f8a:	68bb      	ldr	r3, [r7, #8]
 8002f8c:	2b03      	cmp	r3, #3
 8002f8e:	d003      	beq.n	8002f98 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002f90:	e018      	b.n	8002fc4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002f92:	2301      	movs	r3, #1
 8002f94:	73fb      	strb	r3, [r7, #15]
      break;
 8002f96:	e015      	b.n	8002fc4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f9c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d00e      	beq.n	8002fc2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002fa4:	2301      	movs	r3, #1
 8002fa6:	73fb      	strb	r3, [r7, #15]
      break;
 8002fa8:	e00b      	b.n	8002fc2 <DMA_CheckFifoParam+0xe6>
      break;
 8002faa:	bf00      	nop
 8002fac:	e00a      	b.n	8002fc4 <DMA_CheckFifoParam+0xe8>
      break;
 8002fae:	bf00      	nop
 8002fb0:	e008      	b.n	8002fc4 <DMA_CheckFifoParam+0xe8>
      break;
 8002fb2:	bf00      	nop
 8002fb4:	e006      	b.n	8002fc4 <DMA_CheckFifoParam+0xe8>
      break;
 8002fb6:	bf00      	nop
 8002fb8:	e004      	b.n	8002fc4 <DMA_CheckFifoParam+0xe8>
      break;
 8002fba:	bf00      	nop
 8002fbc:	e002      	b.n	8002fc4 <DMA_CheckFifoParam+0xe8>
      break;   
 8002fbe:	bf00      	nop
 8002fc0:	e000      	b.n	8002fc4 <DMA_CheckFifoParam+0xe8>
      break;
 8002fc2:	bf00      	nop
    }
  } 
  
  return status; 
 8002fc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	3714      	adds	r7, #20
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd0:	4770      	bx	lr
 8002fd2:	bf00      	nop

08002fd4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002fd4:	b480      	push	{r7}
 8002fd6:	b089      	sub	sp, #36	@ 0x24
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]
 8002fdc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002fde:	2300      	movs	r3, #0
 8002fe0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002fe2:	2300      	movs	r3, #0
 8002fe4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002fe6:	2300      	movs	r3, #0
 8002fe8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002fea:	2300      	movs	r3, #0
 8002fec:	61fb      	str	r3, [r7, #28]
 8002fee:	e16b      	b.n	80032c8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002ff0:	2201      	movs	r2, #1
 8002ff2:	69fb      	ldr	r3, [r7, #28]
 8002ff4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ff8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002ffa:	683b      	ldr	r3, [r7, #0]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	697a      	ldr	r2, [r7, #20]
 8003000:	4013      	ands	r3, r2
 8003002:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003004:	693a      	ldr	r2, [r7, #16]
 8003006:	697b      	ldr	r3, [r7, #20]
 8003008:	429a      	cmp	r2, r3
 800300a:	f040 815a 	bne.w	80032c2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800300e:	683b      	ldr	r3, [r7, #0]
 8003010:	685b      	ldr	r3, [r3, #4]
 8003012:	f003 0303 	and.w	r3, r3, #3
 8003016:	2b01      	cmp	r3, #1
 8003018:	d005      	beq.n	8003026 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800301a:	683b      	ldr	r3, [r7, #0]
 800301c:	685b      	ldr	r3, [r3, #4]
 800301e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003022:	2b02      	cmp	r3, #2
 8003024:	d130      	bne.n	8003088 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	689b      	ldr	r3, [r3, #8]
 800302a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800302c:	69fb      	ldr	r3, [r7, #28]
 800302e:	005b      	lsls	r3, r3, #1
 8003030:	2203      	movs	r2, #3
 8003032:	fa02 f303 	lsl.w	r3, r2, r3
 8003036:	43db      	mvns	r3, r3
 8003038:	69ba      	ldr	r2, [r7, #24]
 800303a:	4013      	ands	r3, r2
 800303c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800303e:	683b      	ldr	r3, [r7, #0]
 8003040:	68da      	ldr	r2, [r3, #12]
 8003042:	69fb      	ldr	r3, [r7, #28]
 8003044:	005b      	lsls	r3, r3, #1
 8003046:	fa02 f303 	lsl.w	r3, r2, r3
 800304a:	69ba      	ldr	r2, [r7, #24]
 800304c:	4313      	orrs	r3, r2
 800304e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	69ba      	ldr	r2, [r7, #24]
 8003054:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	685b      	ldr	r3, [r3, #4]
 800305a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800305c:	2201      	movs	r2, #1
 800305e:	69fb      	ldr	r3, [r7, #28]
 8003060:	fa02 f303 	lsl.w	r3, r2, r3
 8003064:	43db      	mvns	r3, r3
 8003066:	69ba      	ldr	r2, [r7, #24]
 8003068:	4013      	ands	r3, r2
 800306a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800306c:	683b      	ldr	r3, [r7, #0]
 800306e:	685b      	ldr	r3, [r3, #4]
 8003070:	091b      	lsrs	r3, r3, #4
 8003072:	f003 0201 	and.w	r2, r3, #1
 8003076:	69fb      	ldr	r3, [r7, #28]
 8003078:	fa02 f303 	lsl.w	r3, r2, r3
 800307c:	69ba      	ldr	r2, [r7, #24]
 800307e:	4313      	orrs	r3, r2
 8003080:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	69ba      	ldr	r2, [r7, #24]
 8003086:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003088:	683b      	ldr	r3, [r7, #0]
 800308a:	685b      	ldr	r3, [r3, #4]
 800308c:	f003 0303 	and.w	r3, r3, #3
 8003090:	2b03      	cmp	r3, #3
 8003092:	d017      	beq.n	80030c4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	68db      	ldr	r3, [r3, #12]
 8003098:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800309a:	69fb      	ldr	r3, [r7, #28]
 800309c:	005b      	lsls	r3, r3, #1
 800309e:	2203      	movs	r2, #3
 80030a0:	fa02 f303 	lsl.w	r3, r2, r3
 80030a4:	43db      	mvns	r3, r3
 80030a6:	69ba      	ldr	r2, [r7, #24]
 80030a8:	4013      	ands	r3, r2
 80030aa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80030ac:	683b      	ldr	r3, [r7, #0]
 80030ae:	689a      	ldr	r2, [r3, #8]
 80030b0:	69fb      	ldr	r3, [r7, #28]
 80030b2:	005b      	lsls	r3, r3, #1
 80030b4:	fa02 f303 	lsl.w	r3, r2, r3
 80030b8:	69ba      	ldr	r2, [r7, #24]
 80030ba:	4313      	orrs	r3, r2
 80030bc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	69ba      	ldr	r2, [r7, #24]
 80030c2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80030c4:	683b      	ldr	r3, [r7, #0]
 80030c6:	685b      	ldr	r3, [r3, #4]
 80030c8:	f003 0303 	and.w	r3, r3, #3
 80030cc:	2b02      	cmp	r3, #2
 80030ce:	d123      	bne.n	8003118 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80030d0:	69fb      	ldr	r3, [r7, #28]
 80030d2:	08da      	lsrs	r2, r3, #3
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	3208      	adds	r2, #8
 80030d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80030dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80030de:	69fb      	ldr	r3, [r7, #28]
 80030e0:	f003 0307 	and.w	r3, r3, #7
 80030e4:	009b      	lsls	r3, r3, #2
 80030e6:	220f      	movs	r2, #15
 80030e8:	fa02 f303 	lsl.w	r3, r2, r3
 80030ec:	43db      	mvns	r3, r3
 80030ee:	69ba      	ldr	r2, [r7, #24]
 80030f0:	4013      	ands	r3, r2
 80030f2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80030f4:	683b      	ldr	r3, [r7, #0]
 80030f6:	691a      	ldr	r2, [r3, #16]
 80030f8:	69fb      	ldr	r3, [r7, #28]
 80030fa:	f003 0307 	and.w	r3, r3, #7
 80030fe:	009b      	lsls	r3, r3, #2
 8003100:	fa02 f303 	lsl.w	r3, r2, r3
 8003104:	69ba      	ldr	r2, [r7, #24]
 8003106:	4313      	orrs	r3, r2
 8003108:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800310a:	69fb      	ldr	r3, [r7, #28]
 800310c:	08da      	lsrs	r2, r3, #3
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	3208      	adds	r2, #8
 8003112:	69b9      	ldr	r1, [r7, #24]
 8003114:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800311e:	69fb      	ldr	r3, [r7, #28]
 8003120:	005b      	lsls	r3, r3, #1
 8003122:	2203      	movs	r2, #3
 8003124:	fa02 f303 	lsl.w	r3, r2, r3
 8003128:	43db      	mvns	r3, r3
 800312a:	69ba      	ldr	r2, [r7, #24]
 800312c:	4013      	ands	r3, r2
 800312e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003130:	683b      	ldr	r3, [r7, #0]
 8003132:	685b      	ldr	r3, [r3, #4]
 8003134:	f003 0203 	and.w	r2, r3, #3
 8003138:	69fb      	ldr	r3, [r7, #28]
 800313a:	005b      	lsls	r3, r3, #1
 800313c:	fa02 f303 	lsl.w	r3, r2, r3
 8003140:	69ba      	ldr	r2, [r7, #24]
 8003142:	4313      	orrs	r3, r2
 8003144:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	69ba      	ldr	r2, [r7, #24]
 800314a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800314c:	683b      	ldr	r3, [r7, #0]
 800314e:	685b      	ldr	r3, [r3, #4]
 8003150:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003154:	2b00      	cmp	r3, #0
 8003156:	f000 80b4 	beq.w	80032c2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800315a:	2300      	movs	r3, #0
 800315c:	60fb      	str	r3, [r7, #12]
 800315e:	4b60      	ldr	r3, [pc, #384]	@ (80032e0 <HAL_GPIO_Init+0x30c>)
 8003160:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003162:	4a5f      	ldr	r2, [pc, #380]	@ (80032e0 <HAL_GPIO_Init+0x30c>)
 8003164:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003168:	6453      	str	r3, [r2, #68]	@ 0x44
 800316a:	4b5d      	ldr	r3, [pc, #372]	@ (80032e0 <HAL_GPIO_Init+0x30c>)
 800316c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800316e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003172:	60fb      	str	r3, [r7, #12]
 8003174:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003176:	4a5b      	ldr	r2, [pc, #364]	@ (80032e4 <HAL_GPIO_Init+0x310>)
 8003178:	69fb      	ldr	r3, [r7, #28]
 800317a:	089b      	lsrs	r3, r3, #2
 800317c:	3302      	adds	r3, #2
 800317e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003182:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003184:	69fb      	ldr	r3, [r7, #28]
 8003186:	f003 0303 	and.w	r3, r3, #3
 800318a:	009b      	lsls	r3, r3, #2
 800318c:	220f      	movs	r2, #15
 800318e:	fa02 f303 	lsl.w	r3, r2, r3
 8003192:	43db      	mvns	r3, r3
 8003194:	69ba      	ldr	r2, [r7, #24]
 8003196:	4013      	ands	r3, r2
 8003198:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	4a52      	ldr	r2, [pc, #328]	@ (80032e8 <HAL_GPIO_Init+0x314>)
 800319e:	4293      	cmp	r3, r2
 80031a0:	d02b      	beq.n	80031fa <HAL_GPIO_Init+0x226>
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	4a51      	ldr	r2, [pc, #324]	@ (80032ec <HAL_GPIO_Init+0x318>)
 80031a6:	4293      	cmp	r3, r2
 80031a8:	d025      	beq.n	80031f6 <HAL_GPIO_Init+0x222>
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	4a50      	ldr	r2, [pc, #320]	@ (80032f0 <HAL_GPIO_Init+0x31c>)
 80031ae:	4293      	cmp	r3, r2
 80031b0:	d01f      	beq.n	80031f2 <HAL_GPIO_Init+0x21e>
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	4a4f      	ldr	r2, [pc, #316]	@ (80032f4 <HAL_GPIO_Init+0x320>)
 80031b6:	4293      	cmp	r3, r2
 80031b8:	d019      	beq.n	80031ee <HAL_GPIO_Init+0x21a>
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	4a4e      	ldr	r2, [pc, #312]	@ (80032f8 <HAL_GPIO_Init+0x324>)
 80031be:	4293      	cmp	r3, r2
 80031c0:	d013      	beq.n	80031ea <HAL_GPIO_Init+0x216>
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	4a4d      	ldr	r2, [pc, #308]	@ (80032fc <HAL_GPIO_Init+0x328>)
 80031c6:	4293      	cmp	r3, r2
 80031c8:	d00d      	beq.n	80031e6 <HAL_GPIO_Init+0x212>
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	4a4c      	ldr	r2, [pc, #304]	@ (8003300 <HAL_GPIO_Init+0x32c>)
 80031ce:	4293      	cmp	r3, r2
 80031d0:	d007      	beq.n	80031e2 <HAL_GPIO_Init+0x20e>
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	4a4b      	ldr	r2, [pc, #300]	@ (8003304 <HAL_GPIO_Init+0x330>)
 80031d6:	4293      	cmp	r3, r2
 80031d8:	d101      	bne.n	80031de <HAL_GPIO_Init+0x20a>
 80031da:	2307      	movs	r3, #7
 80031dc:	e00e      	b.n	80031fc <HAL_GPIO_Init+0x228>
 80031de:	2308      	movs	r3, #8
 80031e0:	e00c      	b.n	80031fc <HAL_GPIO_Init+0x228>
 80031e2:	2306      	movs	r3, #6
 80031e4:	e00a      	b.n	80031fc <HAL_GPIO_Init+0x228>
 80031e6:	2305      	movs	r3, #5
 80031e8:	e008      	b.n	80031fc <HAL_GPIO_Init+0x228>
 80031ea:	2304      	movs	r3, #4
 80031ec:	e006      	b.n	80031fc <HAL_GPIO_Init+0x228>
 80031ee:	2303      	movs	r3, #3
 80031f0:	e004      	b.n	80031fc <HAL_GPIO_Init+0x228>
 80031f2:	2302      	movs	r3, #2
 80031f4:	e002      	b.n	80031fc <HAL_GPIO_Init+0x228>
 80031f6:	2301      	movs	r3, #1
 80031f8:	e000      	b.n	80031fc <HAL_GPIO_Init+0x228>
 80031fa:	2300      	movs	r3, #0
 80031fc:	69fa      	ldr	r2, [r7, #28]
 80031fe:	f002 0203 	and.w	r2, r2, #3
 8003202:	0092      	lsls	r2, r2, #2
 8003204:	4093      	lsls	r3, r2
 8003206:	69ba      	ldr	r2, [r7, #24]
 8003208:	4313      	orrs	r3, r2
 800320a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800320c:	4935      	ldr	r1, [pc, #212]	@ (80032e4 <HAL_GPIO_Init+0x310>)
 800320e:	69fb      	ldr	r3, [r7, #28]
 8003210:	089b      	lsrs	r3, r3, #2
 8003212:	3302      	adds	r3, #2
 8003214:	69ba      	ldr	r2, [r7, #24]
 8003216:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800321a:	4b3b      	ldr	r3, [pc, #236]	@ (8003308 <HAL_GPIO_Init+0x334>)
 800321c:	689b      	ldr	r3, [r3, #8]
 800321e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003220:	693b      	ldr	r3, [r7, #16]
 8003222:	43db      	mvns	r3, r3
 8003224:	69ba      	ldr	r2, [r7, #24]
 8003226:	4013      	ands	r3, r2
 8003228:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800322a:	683b      	ldr	r3, [r7, #0]
 800322c:	685b      	ldr	r3, [r3, #4]
 800322e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003232:	2b00      	cmp	r3, #0
 8003234:	d003      	beq.n	800323e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003236:	69ba      	ldr	r2, [r7, #24]
 8003238:	693b      	ldr	r3, [r7, #16]
 800323a:	4313      	orrs	r3, r2
 800323c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800323e:	4a32      	ldr	r2, [pc, #200]	@ (8003308 <HAL_GPIO_Init+0x334>)
 8003240:	69bb      	ldr	r3, [r7, #24]
 8003242:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003244:	4b30      	ldr	r3, [pc, #192]	@ (8003308 <HAL_GPIO_Init+0x334>)
 8003246:	68db      	ldr	r3, [r3, #12]
 8003248:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800324a:	693b      	ldr	r3, [r7, #16]
 800324c:	43db      	mvns	r3, r3
 800324e:	69ba      	ldr	r2, [r7, #24]
 8003250:	4013      	ands	r3, r2
 8003252:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003254:	683b      	ldr	r3, [r7, #0]
 8003256:	685b      	ldr	r3, [r3, #4]
 8003258:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800325c:	2b00      	cmp	r3, #0
 800325e:	d003      	beq.n	8003268 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003260:	69ba      	ldr	r2, [r7, #24]
 8003262:	693b      	ldr	r3, [r7, #16]
 8003264:	4313      	orrs	r3, r2
 8003266:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003268:	4a27      	ldr	r2, [pc, #156]	@ (8003308 <HAL_GPIO_Init+0x334>)
 800326a:	69bb      	ldr	r3, [r7, #24]
 800326c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800326e:	4b26      	ldr	r3, [pc, #152]	@ (8003308 <HAL_GPIO_Init+0x334>)
 8003270:	685b      	ldr	r3, [r3, #4]
 8003272:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003274:	693b      	ldr	r3, [r7, #16]
 8003276:	43db      	mvns	r3, r3
 8003278:	69ba      	ldr	r2, [r7, #24]
 800327a:	4013      	ands	r3, r2
 800327c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800327e:	683b      	ldr	r3, [r7, #0]
 8003280:	685b      	ldr	r3, [r3, #4]
 8003282:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003286:	2b00      	cmp	r3, #0
 8003288:	d003      	beq.n	8003292 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800328a:	69ba      	ldr	r2, [r7, #24]
 800328c:	693b      	ldr	r3, [r7, #16]
 800328e:	4313      	orrs	r3, r2
 8003290:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003292:	4a1d      	ldr	r2, [pc, #116]	@ (8003308 <HAL_GPIO_Init+0x334>)
 8003294:	69bb      	ldr	r3, [r7, #24]
 8003296:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003298:	4b1b      	ldr	r3, [pc, #108]	@ (8003308 <HAL_GPIO_Init+0x334>)
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800329e:	693b      	ldr	r3, [r7, #16]
 80032a0:	43db      	mvns	r3, r3
 80032a2:	69ba      	ldr	r2, [r7, #24]
 80032a4:	4013      	ands	r3, r2
 80032a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80032a8:	683b      	ldr	r3, [r7, #0]
 80032aa:	685b      	ldr	r3, [r3, #4]
 80032ac:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d003      	beq.n	80032bc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80032b4:	69ba      	ldr	r2, [r7, #24]
 80032b6:	693b      	ldr	r3, [r7, #16]
 80032b8:	4313      	orrs	r3, r2
 80032ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80032bc:	4a12      	ldr	r2, [pc, #72]	@ (8003308 <HAL_GPIO_Init+0x334>)
 80032be:	69bb      	ldr	r3, [r7, #24]
 80032c0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80032c2:	69fb      	ldr	r3, [r7, #28]
 80032c4:	3301      	adds	r3, #1
 80032c6:	61fb      	str	r3, [r7, #28]
 80032c8:	69fb      	ldr	r3, [r7, #28]
 80032ca:	2b0f      	cmp	r3, #15
 80032cc:	f67f ae90 	bls.w	8002ff0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80032d0:	bf00      	nop
 80032d2:	bf00      	nop
 80032d4:	3724      	adds	r7, #36	@ 0x24
 80032d6:	46bd      	mov	sp, r7
 80032d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032dc:	4770      	bx	lr
 80032de:	bf00      	nop
 80032e0:	40023800 	.word	0x40023800
 80032e4:	40013800 	.word	0x40013800
 80032e8:	40020000 	.word	0x40020000
 80032ec:	40020400 	.word	0x40020400
 80032f0:	40020800 	.word	0x40020800
 80032f4:	40020c00 	.word	0x40020c00
 80032f8:	40021000 	.word	0x40021000
 80032fc:	40021400 	.word	0x40021400
 8003300:	40021800 	.word	0x40021800
 8003304:	40021c00 	.word	0x40021c00
 8003308:	40013c00 	.word	0x40013c00

0800330c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800330c:	b480      	push	{r7}
 800330e:	b083      	sub	sp, #12
 8003310:	af00      	add	r7, sp, #0
 8003312:	6078      	str	r0, [r7, #4]
 8003314:	460b      	mov	r3, r1
 8003316:	807b      	strh	r3, [r7, #2]
 8003318:	4613      	mov	r3, r2
 800331a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800331c:	787b      	ldrb	r3, [r7, #1]
 800331e:	2b00      	cmp	r3, #0
 8003320:	d003      	beq.n	800332a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003322:	887a      	ldrh	r2, [r7, #2]
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003328:	e003      	b.n	8003332 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800332a:	887b      	ldrh	r3, [r7, #2]
 800332c:	041a      	lsls	r2, r3, #16
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	619a      	str	r2, [r3, #24]
}
 8003332:	bf00      	nop
 8003334:	370c      	adds	r7, #12
 8003336:	46bd      	mov	sp, r7
 8003338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800333c:	4770      	bx	lr

0800333e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800333e:	b480      	push	{r7}
 8003340:	b085      	sub	sp, #20
 8003342:	af00      	add	r7, sp, #0
 8003344:	6078      	str	r0, [r7, #4]
 8003346:	460b      	mov	r3, r1
 8003348:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	695b      	ldr	r3, [r3, #20]
 800334e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003350:	887a      	ldrh	r2, [r7, #2]
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	4013      	ands	r3, r2
 8003356:	041a      	lsls	r2, r3, #16
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	43d9      	mvns	r1, r3
 800335c:	887b      	ldrh	r3, [r7, #2]
 800335e:	400b      	ands	r3, r1
 8003360:	431a      	orrs	r2, r3
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	619a      	str	r2, [r3, #24]
}
 8003366:	bf00      	nop
 8003368:	3714      	adds	r7, #20
 800336a:	46bd      	mov	sp, r7
 800336c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003370:	4770      	bx	lr
	...

08003374 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003374:	b580      	push	{r7, lr}
 8003376:	b084      	sub	sp, #16
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	2b00      	cmp	r3, #0
 8003380:	d101      	bne.n	8003386 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003382:	2301      	movs	r3, #1
 8003384:	e12b      	b.n	80035de <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800338c:	b2db      	uxtb	r3, r3
 800338e:	2b00      	cmp	r3, #0
 8003390:	d106      	bne.n	80033a0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	2200      	movs	r2, #0
 8003396:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800339a:	6878      	ldr	r0, [r7, #4]
 800339c:	f7fd febe 	bl	800111c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	2224      	movs	r2, #36	@ 0x24
 80033a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	681a      	ldr	r2, [r3, #0]
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f022 0201 	bic.w	r2, r2, #1
 80033b6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	681a      	ldr	r2, [r3, #0]
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80033c6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	681a      	ldr	r2, [r3, #0]
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80033d6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80033d8:	f002 fcb8 	bl	8005d4c <HAL_RCC_GetPCLK1Freq>
 80033dc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	685b      	ldr	r3, [r3, #4]
 80033e2:	4a81      	ldr	r2, [pc, #516]	@ (80035e8 <HAL_I2C_Init+0x274>)
 80033e4:	4293      	cmp	r3, r2
 80033e6:	d807      	bhi.n	80033f8 <HAL_I2C_Init+0x84>
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	4a80      	ldr	r2, [pc, #512]	@ (80035ec <HAL_I2C_Init+0x278>)
 80033ec:	4293      	cmp	r3, r2
 80033ee:	bf94      	ite	ls
 80033f0:	2301      	movls	r3, #1
 80033f2:	2300      	movhi	r3, #0
 80033f4:	b2db      	uxtb	r3, r3
 80033f6:	e006      	b.n	8003406 <HAL_I2C_Init+0x92>
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	4a7d      	ldr	r2, [pc, #500]	@ (80035f0 <HAL_I2C_Init+0x27c>)
 80033fc:	4293      	cmp	r3, r2
 80033fe:	bf94      	ite	ls
 8003400:	2301      	movls	r3, #1
 8003402:	2300      	movhi	r3, #0
 8003404:	b2db      	uxtb	r3, r3
 8003406:	2b00      	cmp	r3, #0
 8003408:	d001      	beq.n	800340e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800340a:	2301      	movs	r3, #1
 800340c:	e0e7      	b.n	80035de <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	4a78      	ldr	r2, [pc, #480]	@ (80035f4 <HAL_I2C_Init+0x280>)
 8003412:	fba2 2303 	umull	r2, r3, r2, r3
 8003416:	0c9b      	lsrs	r3, r3, #18
 8003418:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	685b      	ldr	r3, [r3, #4]
 8003420:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	68ba      	ldr	r2, [r7, #8]
 800342a:	430a      	orrs	r2, r1
 800342c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	6a1b      	ldr	r3, [r3, #32]
 8003434:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	685b      	ldr	r3, [r3, #4]
 800343c:	4a6a      	ldr	r2, [pc, #424]	@ (80035e8 <HAL_I2C_Init+0x274>)
 800343e:	4293      	cmp	r3, r2
 8003440:	d802      	bhi.n	8003448 <HAL_I2C_Init+0xd4>
 8003442:	68bb      	ldr	r3, [r7, #8]
 8003444:	3301      	adds	r3, #1
 8003446:	e009      	b.n	800345c <HAL_I2C_Init+0xe8>
 8003448:	68bb      	ldr	r3, [r7, #8]
 800344a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800344e:	fb02 f303 	mul.w	r3, r2, r3
 8003452:	4a69      	ldr	r2, [pc, #420]	@ (80035f8 <HAL_I2C_Init+0x284>)
 8003454:	fba2 2303 	umull	r2, r3, r2, r3
 8003458:	099b      	lsrs	r3, r3, #6
 800345a:	3301      	adds	r3, #1
 800345c:	687a      	ldr	r2, [r7, #4]
 800345e:	6812      	ldr	r2, [r2, #0]
 8003460:	430b      	orrs	r3, r1
 8003462:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	69db      	ldr	r3, [r3, #28]
 800346a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800346e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	685b      	ldr	r3, [r3, #4]
 8003476:	495c      	ldr	r1, [pc, #368]	@ (80035e8 <HAL_I2C_Init+0x274>)
 8003478:	428b      	cmp	r3, r1
 800347a:	d819      	bhi.n	80034b0 <HAL_I2C_Init+0x13c>
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	1e59      	subs	r1, r3, #1
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	685b      	ldr	r3, [r3, #4]
 8003484:	005b      	lsls	r3, r3, #1
 8003486:	fbb1 f3f3 	udiv	r3, r1, r3
 800348a:	1c59      	adds	r1, r3, #1
 800348c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003490:	400b      	ands	r3, r1
 8003492:	2b00      	cmp	r3, #0
 8003494:	d00a      	beq.n	80034ac <HAL_I2C_Init+0x138>
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	1e59      	subs	r1, r3, #1
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	685b      	ldr	r3, [r3, #4]
 800349e:	005b      	lsls	r3, r3, #1
 80034a0:	fbb1 f3f3 	udiv	r3, r1, r3
 80034a4:	3301      	adds	r3, #1
 80034a6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80034aa:	e051      	b.n	8003550 <HAL_I2C_Init+0x1dc>
 80034ac:	2304      	movs	r3, #4
 80034ae:	e04f      	b.n	8003550 <HAL_I2C_Init+0x1dc>
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	689b      	ldr	r3, [r3, #8]
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d111      	bne.n	80034dc <HAL_I2C_Init+0x168>
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	1e58      	subs	r0, r3, #1
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	6859      	ldr	r1, [r3, #4]
 80034c0:	460b      	mov	r3, r1
 80034c2:	005b      	lsls	r3, r3, #1
 80034c4:	440b      	add	r3, r1
 80034c6:	fbb0 f3f3 	udiv	r3, r0, r3
 80034ca:	3301      	adds	r3, #1
 80034cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	bf0c      	ite	eq
 80034d4:	2301      	moveq	r3, #1
 80034d6:	2300      	movne	r3, #0
 80034d8:	b2db      	uxtb	r3, r3
 80034da:	e012      	b.n	8003502 <HAL_I2C_Init+0x18e>
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	1e58      	subs	r0, r3, #1
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	6859      	ldr	r1, [r3, #4]
 80034e4:	460b      	mov	r3, r1
 80034e6:	009b      	lsls	r3, r3, #2
 80034e8:	440b      	add	r3, r1
 80034ea:	0099      	lsls	r1, r3, #2
 80034ec:	440b      	add	r3, r1
 80034ee:	fbb0 f3f3 	udiv	r3, r0, r3
 80034f2:	3301      	adds	r3, #1
 80034f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	bf0c      	ite	eq
 80034fc:	2301      	moveq	r3, #1
 80034fe:	2300      	movne	r3, #0
 8003500:	b2db      	uxtb	r3, r3
 8003502:	2b00      	cmp	r3, #0
 8003504:	d001      	beq.n	800350a <HAL_I2C_Init+0x196>
 8003506:	2301      	movs	r3, #1
 8003508:	e022      	b.n	8003550 <HAL_I2C_Init+0x1dc>
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	689b      	ldr	r3, [r3, #8]
 800350e:	2b00      	cmp	r3, #0
 8003510:	d10e      	bne.n	8003530 <HAL_I2C_Init+0x1bc>
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	1e58      	subs	r0, r3, #1
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	6859      	ldr	r1, [r3, #4]
 800351a:	460b      	mov	r3, r1
 800351c:	005b      	lsls	r3, r3, #1
 800351e:	440b      	add	r3, r1
 8003520:	fbb0 f3f3 	udiv	r3, r0, r3
 8003524:	3301      	adds	r3, #1
 8003526:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800352a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800352e:	e00f      	b.n	8003550 <HAL_I2C_Init+0x1dc>
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	1e58      	subs	r0, r3, #1
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	6859      	ldr	r1, [r3, #4]
 8003538:	460b      	mov	r3, r1
 800353a:	009b      	lsls	r3, r3, #2
 800353c:	440b      	add	r3, r1
 800353e:	0099      	lsls	r1, r3, #2
 8003540:	440b      	add	r3, r1
 8003542:	fbb0 f3f3 	udiv	r3, r0, r3
 8003546:	3301      	adds	r3, #1
 8003548:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800354c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003550:	6879      	ldr	r1, [r7, #4]
 8003552:	6809      	ldr	r1, [r1, #0]
 8003554:	4313      	orrs	r3, r2
 8003556:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	69da      	ldr	r2, [r3, #28]
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	6a1b      	ldr	r3, [r3, #32]
 800356a:	431a      	orrs	r2, r3
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	430a      	orrs	r2, r1
 8003572:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	689b      	ldr	r3, [r3, #8]
 800357a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800357e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003582:	687a      	ldr	r2, [r7, #4]
 8003584:	6911      	ldr	r1, [r2, #16]
 8003586:	687a      	ldr	r2, [r7, #4]
 8003588:	68d2      	ldr	r2, [r2, #12]
 800358a:	4311      	orrs	r1, r2
 800358c:	687a      	ldr	r2, [r7, #4]
 800358e:	6812      	ldr	r2, [r2, #0]
 8003590:	430b      	orrs	r3, r1
 8003592:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	68db      	ldr	r3, [r3, #12]
 800359a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	695a      	ldr	r2, [r3, #20]
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	699b      	ldr	r3, [r3, #24]
 80035a6:	431a      	orrs	r2, r3
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	430a      	orrs	r2, r1
 80035ae:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	681a      	ldr	r2, [r3, #0]
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f042 0201 	orr.w	r2, r2, #1
 80035be:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	2200      	movs	r2, #0
 80035c4:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	2220      	movs	r2, #32
 80035ca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	2200      	movs	r2, #0
 80035d2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	2200      	movs	r2, #0
 80035d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80035dc:	2300      	movs	r3, #0
}
 80035de:	4618      	mov	r0, r3
 80035e0:	3710      	adds	r7, #16
 80035e2:	46bd      	mov	sp, r7
 80035e4:	bd80      	pop	{r7, pc}
 80035e6:	bf00      	nop
 80035e8:	000186a0 	.word	0x000186a0
 80035ec:	001e847f 	.word	0x001e847f
 80035f0:	003d08ff 	.word	0x003d08ff
 80035f4:	431bde83 	.word	0x431bde83
 80035f8:	10624dd3 	.word	0x10624dd3

080035fc <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 80035fc:	b480      	push	{r7}
 80035fe:	b083      	sub	sp, #12
 8003600:	af00      	add	r7, sp, #0
 8003602:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	695b      	ldr	r3, [r3, #20]
 800360a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800360e:	2b80      	cmp	r3, #128	@ 0x80
 8003610:	d103      	bne.n	800361a <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	2200      	movs	r2, #0
 8003618:	611a      	str	r2, [r3, #16]
  }
}
 800361a:	bf00      	nop
 800361c:	370c      	adds	r7, #12
 800361e:	46bd      	mov	sp, r7
 8003620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003624:	4770      	bx	lr
	...

08003628 <HAL_I2C_Master_Transmit_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 8003628:	b580      	push	{r7, lr}
 800362a:	b086      	sub	sp, #24
 800362c:	af00      	add	r7, sp, #0
 800362e:	60f8      	str	r0, [r7, #12]
 8003630:	607a      	str	r2, [r7, #4]
 8003632:	461a      	mov	r2, r3
 8003634:	460b      	mov	r3, r1
 8003636:	817b      	strh	r3, [r7, #10]
 8003638:	4613      	mov	r3, r2
 800363a:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 800363c:	2300      	movs	r3, #0
 800363e:	613b      	str	r3, [r7, #16]
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003646:	b2db      	uxtb	r3, r3
 8003648:	2b20      	cmp	r3, #32
 800364a:	f040 8109 	bne.w	8003860 <HAL_I2C_Master_Transmit_DMA+0x238>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 800364e:	4b87      	ldr	r3, [pc, #540]	@ (800386c <HAL_I2C_Master_Transmit_DMA+0x244>)
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	08db      	lsrs	r3, r3, #3
 8003654:	4a86      	ldr	r2, [pc, #536]	@ (8003870 <HAL_I2C_Master_Transmit_DMA+0x248>)
 8003656:	fba2 2303 	umull	r2, r3, r2, r3
 800365a:	0a1a      	lsrs	r2, r3, #8
 800365c:	4613      	mov	r3, r2
 800365e:	009b      	lsls	r3, r3, #2
 8003660:	4413      	add	r3, r2
 8003662:	009a      	lsls	r2, r3, #2
 8003664:	4413      	add	r3, r2
 8003666:	613b      	str	r3, [r7, #16]
    do
    {
      count--;
 8003668:	693b      	ldr	r3, [r7, #16]
 800366a:	3b01      	subs	r3, #1
 800366c:	613b      	str	r3, [r7, #16]
      if (count == 0U)
 800366e:	693b      	ldr	r3, [r7, #16]
 8003670:	2b00      	cmp	r3, #0
 8003672:	d112      	bne.n	800369a <HAL_I2C_Master_Transmit_DMA+0x72>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	2200      	movs	r2, #0
 8003678:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	2220      	movs	r2, #32
 800367e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	2200      	movs	r2, #0
 8003686:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800368e:	f043 0220 	orr.w	r2, r3, #32
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	641a      	str	r2, [r3, #64]	@ 0x40

        return HAL_BUSY;
 8003696:	2302      	movs	r3, #2
 8003698:	e0e3      	b.n	8003862 <HAL_I2C_Master_Transmit_DMA+0x23a>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	699b      	ldr	r3, [r3, #24]
 80036a0:	f003 0302 	and.w	r3, r3, #2
 80036a4:	2b02      	cmp	r3, #2
 80036a6:	d0df      	beq.n	8003668 <HAL_I2C_Master_Transmit_DMA+0x40>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80036ae:	2b01      	cmp	r3, #1
 80036b0:	d101      	bne.n	80036b6 <HAL_I2C_Master_Transmit_DMA+0x8e>
 80036b2:	2302      	movs	r3, #2
 80036b4:	e0d5      	b.n	8003862 <HAL_I2C_Master_Transmit_DMA+0x23a>
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	2201      	movs	r2, #1
 80036ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f003 0301 	and.w	r3, r3, #1
 80036c8:	2b01      	cmp	r3, #1
 80036ca:	d007      	beq.n	80036dc <HAL_I2C_Master_Transmit_DMA+0xb4>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	681a      	ldr	r2, [r3, #0]
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f042 0201 	orr.w	r2, r2, #1
 80036da:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	681a      	ldr	r2, [r3, #0]
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80036ea:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	2221      	movs	r2, #33	@ 0x21
 80036f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	2210      	movs	r2, #16
 80036f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	2200      	movs	r2, #0
 8003700:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	687a      	ldr	r2, [r7, #4]
 8003706:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	893a      	ldrh	r2, [r7, #8]
 800370c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003712:	b29a      	uxth	r2, r3
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	4a56      	ldr	r2, [pc, #344]	@ (8003874 <HAL_I2C_Master_Transmit_DMA+0x24c>)
 800371c:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->Devaddress  = DevAddress;
 800371e:	897a      	ldrh	r2, [r7, #10]
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	645a      	str	r2, [r3, #68]	@ 0x44

    if (hi2c->XferSize > 0U)
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003728:	2b00      	cmp	r3, #0
 800372a:	d07b      	beq.n	8003824 <HAL_I2C_Master_Transmit_DMA+0x1fc>
    {
      if (hi2c->hdmatx != NULL)
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003730:	2b00      	cmp	r3, #0
 8003732:	d02a      	beq.n	800378a <HAL_I2C_Master_Transmit_DMA+0x162>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAXferCplt;
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003738:	4a4f      	ldr	r2, [pc, #316]	@ (8003878 <HAL_I2C_Master_Transmit_DMA+0x250>)
 800373a:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003740:	4a4e      	ldr	r2, [pc, #312]	@ (800387c <HAL_I2C_Master_Transmit_DMA+0x254>)
 8003742:	64da      	str	r2, [r3, #76]	@ 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003748:	2200      	movs	r2, #0
 800374a:	641a      	str	r2, [r3, #64]	@ 0x40
        hi2c->hdmatx->XferM1CpltCallback = NULL;
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003750:	2200      	movs	r2, #0
 8003752:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->hdmatx->XferM1HalfCpltCallback = NULL;
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003758:	2200      	movs	r2, #0
 800375a:	649a      	str	r2, [r3, #72]	@ 0x48
        hi2c->hdmatx->XferAbortCallback = NULL;
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003760:	2200      	movs	r2, #0
 8003762:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->DR, hi2c->XferSize);
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800376c:	4619      	mov	r1, r3
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	3310      	adds	r3, #16
 8003774:	461a      	mov	r2, r3
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800377a:	f7ff f8bd 	bl	80028f8 <HAL_DMA_Start_IT>
 800377e:	4603      	mov	r3, r0
 8003780:	75fb      	strb	r3, [r7, #23]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8003782:	7dfb      	ldrb	r3, [r7, #23]
 8003784:	2b00      	cmp	r3, #0
 8003786:	d139      	bne.n	80037fc <HAL_I2C_Master_Transmit_DMA+0x1d4>
 8003788:	e013      	b.n	80037b2 <HAL_I2C_Master_Transmit_DMA+0x18a>
        hi2c->State     = HAL_I2C_STATE_READY;
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	2220      	movs	r2, #32
 800378e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	2200      	movs	r2, #0
 8003796:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800379e:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	641a      	str	r2, [r3, #64]	@ 0x40
        __HAL_UNLOCK(hi2c);
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	2200      	movs	r2, #0
 80037aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        return HAL_ERROR;
 80037ae:	2301      	movs	r3, #1
 80037b0:	e057      	b.n	8003862 <HAL_I2C_Master_Transmit_DMA+0x23a>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	2200      	movs	r2, #0
 80037b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */

        /* Enable EVT and ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	685a      	ldr	r2, [r3, #4]
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 80037c8:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	685a      	ldr	r2, [r3, #4]
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80037d8:	605a      	str	r2, [r3, #4]

        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	681a      	ldr	r2, [r3, #0]
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80037e8:	601a      	str	r2, [r3, #0]

        /* Generate Start */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	681a      	ldr	r2, [r3, #0]
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80037f8:	601a      	str	r2, [r3, #0]
 80037fa:	e02f      	b.n	800385c <HAL_I2C_Master_Transmit_DMA+0x234>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	2220      	movs	r2, #32
 8003800:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	2200      	movs	r2, #0
 8003808:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003810:	f043 0210 	orr.w	r2, r3, #16
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	2200      	movs	r2, #0
 800381c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8003820:	2301      	movs	r3, #1
 8003822:	e01e      	b.n	8003862 <HAL_I2C_Master_Transmit_DMA+0x23a>
      }
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	681a      	ldr	r2, [r3, #0]
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003832:	601a      	str	r2, [r3, #0]

      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	681a      	ldr	r2, [r3, #0]
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003842:	601a      	str	r2, [r3, #0]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	2200      	movs	r2, #0
 8003848:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */

      /* Enable EVT, BUF and ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	685a      	ldr	r2, [r3, #4]
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f442 62e0 	orr.w	r2, r2, #1792	@ 0x700
 800385a:	605a      	str	r2, [r3, #4]
    }

    return HAL_OK;
 800385c:	2300      	movs	r3, #0
 800385e:	e000      	b.n	8003862 <HAL_I2C_Master_Transmit_DMA+0x23a>
  }
  else
  {
    return HAL_BUSY;
 8003860:	2302      	movs	r3, #2
  }
}
 8003862:	4618      	mov	r0, r3
 8003864:	3718      	adds	r7, #24
 8003866:	46bd      	mov	sp, r7
 8003868:	bd80      	pop	{r7, pc}
 800386a:	bf00      	nop
 800386c:	20000004 	.word	0x20000004
 8003870:	14f8b589 	.word	0x14f8b589
 8003874:	ffff0000 	.word	0xffff0000
 8003878:	08005049 	.word	0x08005049
 800387c:	08005207 	.word	0x08005207

08003880 <HAL_I2C_Master_Receive_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 8003880:	b580      	push	{r7, lr}
 8003882:	b086      	sub	sp, #24
 8003884:	af00      	add	r7, sp, #0
 8003886:	60f8      	str	r0, [r7, #12]
 8003888:	607a      	str	r2, [r7, #4]
 800388a:	461a      	mov	r2, r3
 800388c:	460b      	mov	r3, r1
 800388e:	817b      	strh	r3, [r7, #10]
 8003890:	4613      	mov	r3, r2
 8003892:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8003894:	2300      	movs	r3, #0
 8003896:	613b      	str	r3, [r7, #16]
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800389e:	b2db      	uxtb	r3, r3
 80038a0:	2b20      	cmp	r3, #32
 80038a2:	f040 8109 	bne.w	8003ab8 <HAL_I2C_Master_Receive_DMA+0x238>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 80038a6:	4b87      	ldr	r3, [pc, #540]	@ (8003ac4 <HAL_I2C_Master_Receive_DMA+0x244>)
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	08db      	lsrs	r3, r3, #3
 80038ac:	4a86      	ldr	r2, [pc, #536]	@ (8003ac8 <HAL_I2C_Master_Receive_DMA+0x248>)
 80038ae:	fba2 2303 	umull	r2, r3, r2, r3
 80038b2:	0a1a      	lsrs	r2, r3, #8
 80038b4:	4613      	mov	r3, r2
 80038b6:	009b      	lsls	r3, r3, #2
 80038b8:	4413      	add	r3, r2
 80038ba:	009a      	lsls	r2, r3, #2
 80038bc:	4413      	add	r3, r2
 80038be:	613b      	str	r3, [r7, #16]
    do
    {
      count--;
 80038c0:	693b      	ldr	r3, [r7, #16]
 80038c2:	3b01      	subs	r3, #1
 80038c4:	613b      	str	r3, [r7, #16]
      if (count == 0U)
 80038c6:	693b      	ldr	r3, [r7, #16]
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d112      	bne.n	80038f2 <HAL_I2C_Master_Receive_DMA+0x72>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	2200      	movs	r2, #0
 80038d0:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	2220      	movs	r2, #32
 80038d6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	2200      	movs	r2, #0
 80038de:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038e6:	f043 0220 	orr.w	r2, r3, #32
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	641a      	str	r2, [r3, #64]	@ 0x40

        return HAL_BUSY;
 80038ee:	2302      	movs	r3, #2
 80038f0:	e0e3      	b.n	8003aba <HAL_I2C_Master_Receive_DMA+0x23a>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	699b      	ldr	r3, [r3, #24]
 80038f8:	f003 0302 	and.w	r3, r3, #2
 80038fc:	2b02      	cmp	r3, #2
 80038fe:	d0df      	beq.n	80038c0 <HAL_I2C_Master_Receive_DMA+0x40>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003906:	2b01      	cmp	r3, #1
 8003908:	d101      	bne.n	800390e <HAL_I2C_Master_Receive_DMA+0x8e>
 800390a:	2302      	movs	r3, #2
 800390c:	e0d5      	b.n	8003aba <HAL_I2C_Master_Receive_DMA+0x23a>
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	2201      	movs	r2, #1
 8003912:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f003 0301 	and.w	r3, r3, #1
 8003920:	2b01      	cmp	r3, #1
 8003922:	d007      	beq.n	8003934 <HAL_I2C_Master_Receive_DMA+0xb4>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	681a      	ldr	r2, [r3, #0]
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f042 0201 	orr.w	r2, r2, #1
 8003932:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	681a      	ldr	r2, [r3, #0]
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003942:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	2222      	movs	r2, #34	@ 0x22
 8003948:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	2210      	movs	r2, #16
 8003950:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	2200      	movs	r2, #0
 8003958:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	687a      	ldr	r2, [r7, #4]
 800395e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	893a      	ldrh	r2, [r7, #8]
 8003964:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800396a:	b29a      	uxth	r2, r3
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	4a56      	ldr	r2, [pc, #344]	@ (8003acc <HAL_I2C_Master_Receive_DMA+0x24c>)
 8003974:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->Devaddress  = DevAddress;
 8003976:	897a      	ldrh	r2, [r7, #10]
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	645a      	str	r2, [r3, #68]	@ 0x44

    if (hi2c->XferSize > 0U)
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003980:	2b00      	cmp	r3, #0
 8003982:	d07b      	beq.n	8003a7c <HAL_I2C_Master_Receive_DMA+0x1fc>
    {
      if (hi2c->hdmarx != NULL)
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003988:	2b00      	cmp	r3, #0
 800398a:	d02a      	beq.n	80039e2 <HAL_I2C_Master_Receive_DMA+0x162>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAXferCplt;
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003990:	4a4f      	ldr	r2, [pc, #316]	@ (8003ad0 <HAL_I2C_Master_Receive_DMA+0x250>)
 8003992:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003998:	4a4e      	ldr	r2, [pc, #312]	@ (8003ad4 <HAL_I2C_Master_Receive_DMA+0x254>)
 800399a:	64da      	str	r2, [r3, #76]	@ 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80039a0:	2200      	movs	r2, #0
 80039a2:	641a      	str	r2, [r3, #64]	@ 0x40
        hi2c->hdmarx->XferM1CpltCallback = NULL;
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80039a8:	2200      	movs	r2, #0
 80039aa:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->hdmarx->XferM1HalfCpltCallback = NULL;
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80039b0:	2200      	movs	r2, #0
 80039b2:	649a      	str	r2, [r3, #72]	@ 0x48
        hi2c->hdmarx->XferAbortCallback = NULL;
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80039b8:	2200      	movs	r2, #0
 80039ba:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->DR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize);
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	3310      	adds	r3, #16
 80039c6:	4619      	mov	r1, r3
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039cc:	461a      	mov	r2, r3
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80039d2:	f7fe ff91 	bl	80028f8 <HAL_DMA_Start_IT>
 80039d6:	4603      	mov	r3, r0
 80039d8:	75fb      	strb	r3, [r7, #23]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 80039da:	7dfb      	ldrb	r3, [r7, #23]
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d139      	bne.n	8003a54 <HAL_I2C_Master_Receive_DMA+0x1d4>
 80039e0:	e013      	b.n	8003a0a <HAL_I2C_Master_Receive_DMA+0x18a>
        hi2c->State     = HAL_I2C_STATE_READY;
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	2220      	movs	r2, #32
 80039e6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	2200      	movs	r2, #0
 80039ee:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039f6:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	641a      	str	r2, [r3, #64]	@ 0x40
        __HAL_UNLOCK(hi2c);
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	2200      	movs	r2, #0
 8003a02:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        return HAL_ERROR;
 8003a06:	2301      	movs	r3, #1
 8003a08:	e057      	b.n	8003aba <HAL_I2C_Master_Receive_DMA+0x23a>
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	681a      	ldr	r2, [r3, #0]
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003a18:	601a      	str	r2, [r3, #0]

        /* Generate Start */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	681a      	ldr	r2, [r3, #0]
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003a28:	601a      	str	r2, [r3, #0]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	2200      	movs	r2, #0
 8003a2e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */

        /* Enable EVT and ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	685a      	ldr	r2, [r3, #4]
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8003a40:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	685a      	ldr	r2, [r3, #4]
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003a50:	605a      	str	r2, [r3, #4]
 8003a52:	e02f      	b.n	8003ab4 <HAL_I2C_Master_Receive_DMA+0x234>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	2220      	movs	r2, #32
 8003a58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	2200      	movs	r2, #0
 8003a60:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a68:	f043 0210 	orr.w	r2, r3, #16
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	2200      	movs	r2, #0
 8003a74:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8003a78:	2301      	movs	r3, #1
 8003a7a:	e01e      	b.n	8003aba <HAL_I2C_Master_Receive_DMA+0x23a>
      }
    }
    else
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	2200      	movs	r2, #0
 8003a80:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */

      /* Enable EVT, BUF and ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	685a      	ldr	r2, [r3, #4]
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f442 62e0 	orr.w	r2, r2, #1792	@ 0x700
 8003a92:	605a      	str	r2, [r3, #4]

      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	681a      	ldr	r2, [r3, #0]
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003aa2:	601a      	str	r2, [r3, #0]

      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	681a      	ldr	r2, [r3, #0]
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003ab2:	601a      	str	r2, [r3, #0]
    }

    return HAL_OK;
 8003ab4:	2300      	movs	r3, #0
 8003ab6:	e000      	b.n	8003aba <HAL_I2C_Master_Receive_DMA+0x23a>
  }
  else
  {
    return HAL_BUSY;
 8003ab8:	2302      	movs	r3, #2
  }
}
 8003aba:	4618      	mov	r0, r3
 8003abc:	3718      	adds	r7, #24
 8003abe:	46bd      	mov	sp, r7
 8003ac0:	bd80      	pop	{r7, pc}
 8003ac2:	bf00      	nop
 8003ac4:	20000004 	.word	0x20000004
 8003ac8:	14f8b589 	.word	0x14f8b589
 8003acc:	ffff0000 	.word	0xffff0000
 8003ad0:	08005049 	.word	0x08005049
 8003ad4:	08005207 	.word	0x08005207

08003ad8 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	b088      	sub	sp, #32
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8003ae0:	2300      	movs	r3, #0
 8003ae2:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	685b      	ldr	r3, [r3, #4]
 8003aea:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003af0:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003af8:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003b00:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8003b02:	7bfb      	ldrb	r3, [r7, #15]
 8003b04:	2b10      	cmp	r3, #16
 8003b06:	d003      	beq.n	8003b10 <HAL_I2C_EV_IRQHandler+0x38>
 8003b08:	7bfb      	ldrb	r3, [r7, #15]
 8003b0a:	2b40      	cmp	r3, #64	@ 0x40
 8003b0c:	f040 80b1 	bne.w	8003c72 <HAL_I2C_EV_IRQHandler+0x19a>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	699b      	ldr	r3, [r3, #24]
 8003b16:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	695b      	ldr	r3, [r3, #20]
 8003b1e:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8003b20:	69fb      	ldr	r3, [r7, #28]
 8003b22:	f003 0301 	and.w	r3, r3, #1
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d10d      	bne.n	8003b46 <HAL_I2C_EV_IRQHandler+0x6e>
 8003b2a:	693b      	ldr	r3, [r7, #16]
 8003b2c:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8003b30:	d003      	beq.n	8003b3a <HAL_I2C_EV_IRQHandler+0x62>
 8003b32:	693b      	ldr	r3, [r7, #16]
 8003b34:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8003b38:	d101      	bne.n	8003b3e <HAL_I2C_EV_IRQHandler+0x66>
 8003b3a:	2301      	movs	r3, #1
 8003b3c:	e000      	b.n	8003b40 <HAL_I2C_EV_IRQHandler+0x68>
 8003b3e:	2300      	movs	r3, #0
 8003b40:	2b01      	cmp	r3, #1
 8003b42:	f000 8114 	beq.w	8003d6e <HAL_I2C_EV_IRQHandler+0x296>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003b46:	69fb      	ldr	r3, [r7, #28]
 8003b48:	f003 0301 	and.w	r3, r3, #1
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d00b      	beq.n	8003b68 <HAL_I2C_EV_IRQHandler+0x90>
 8003b50:	697b      	ldr	r3, [r7, #20]
 8003b52:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d006      	beq.n	8003b68 <HAL_I2C_EV_IRQHandler+0x90>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8003b5a:	6878      	ldr	r0, [r7, #4]
 8003b5c:	f001 fc6a 	bl	8005434 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8003b60:	6878      	ldr	r0, [r7, #4]
 8003b62:	f000 fcc7 	bl	80044f4 <I2C_Master_SB>
 8003b66:	e083      	b.n	8003c70 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003b68:	69fb      	ldr	r3, [r7, #28]
 8003b6a:	f003 0308 	and.w	r3, r3, #8
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d008      	beq.n	8003b84 <HAL_I2C_EV_IRQHandler+0xac>
 8003b72:	697b      	ldr	r3, [r7, #20]
 8003b74:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d003      	beq.n	8003b84 <HAL_I2C_EV_IRQHandler+0xac>
    {
      I2C_Master_ADD10(hi2c);
 8003b7c:	6878      	ldr	r0, [r7, #4]
 8003b7e:	f000 fd3f 	bl	8004600 <I2C_Master_ADD10>
 8003b82:	e075      	b.n	8003c70 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003b84:	69fb      	ldr	r3, [r7, #28]
 8003b86:	f003 0302 	and.w	r3, r3, #2
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d008      	beq.n	8003ba0 <HAL_I2C_EV_IRQHandler+0xc8>
 8003b8e:	697b      	ldr	r3, [r7, #20]
 8003b90:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d003      	beq.n	8003ba0 <HAL_I2C_EV_IRQHandler+0xc8>
    {
      I2C_Master_ADDR(hi2c);
 8003b98:	6878      	ldr	r0, [r7, #4]
 8003b9a:	f000 fd5b 	bl	8004654 <I2C_Master_ADDR>
 8003b9e:	e067      	b.n	8003c70 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8003ba0:	69bb      	ldr	r3, [r7, #24]
 8003ba2:	f003 0304 	and.w	r3, r3, #4
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d036      	beq.n	8003c18 <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	685b      	ldr	r3, [r3, #4]
 8003bb0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003bb4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003bb8:	f000 80db 	beq.w	8003d72 <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003bbc:	69fb      	ldr	r3, [r7, #28]
 8003bbe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d00d      	beq.n	8003be2 <HAL_I2C_EV_IRQHandler+0x10a>
 8003bc6:	697b      	ldr	r3, [r7, #20]
 8003bc8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d008      	beq.n	8003be2 <HAL_I2C_EV_IRQHandler+0x10a>
 8003bd0:	69fb      	ldr	r3, [r7, #28]
 8003bd2:	f003 0304 	and.w	r3, r3, #4
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d103      	bne.n	8003be2 <HAL_I2C_EV_IRQHandler+0x10a>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8003bda:	6878      	ldr	r0, [r7, #4]
 8003bdc:	f000 f923 	bl	8003e26 <I2C_MasterTransmit_TXE>
 8003be0:	e046      	b.n	8003c70 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003be2:	69fb      	ldr	r3, [r7, #28]
 8003be4:	f003 0304 	and.w	r3, r3, #4
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	f000 80c2 	beq.w	8003d72 <HAL_I2C_EV_IRQHandler+0x29a>
 8003bee:	697b      	ldr	r3, [r7, #20]
 8003bf0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	f000 80bc 	beq.w	8003d72 <HAL_I2C_EV_IRQHandler+0x29a>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8003bfa:	7bbb      	ldrb	r3, [r7, #14]
 8003bfc:	2b21      	cmp	r3, #33	@ 0x21
 8003bfe:	d103      	bne.n	8003c08 <HAL_I2C_EV_IRQHandler+0x130>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8003c00:	6878      	ldr	r0, [r7, #4]
 8003c02:	f000 f9ac 	bl	8003f5e <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003c06:	e0b4      	b.n	8003d72 <HAL_I2C_EV_IRQHandler+0x29a>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8003c08:	7bfb      	ldrb	r3, [r7, #15]
 8003c0a:	2b40      	cmp	r3, #64	@ 0x40
 8003c0c:	f040 80b1 	bne.w	8003d72 <HAL_I2C_EV_IRQHandler+0x29a>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8003c10:	6878      	ldr	r0, [r7, #4]
 8003c12:	f000 fa1a 	bl	800404a <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003c16:	e0ac      	b.n	8003d72 <HAL_I2C_EV_IRQHandler+0x29a>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	685b      	ldr	r3, [r3, #4]
 8003c1e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003c22:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003c26:	f000 80a4 	beq.w	8003d72 <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003c2a:	69fb      	ldr	r3, [r7, #28]
 8003c2c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d00d      	beq.n	8003c50 <HAL_I2C_EV_IRQHandler+0x178>
 8003c34:	697b      	ldr	r3, [r7, #20]
 8003c36:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d008      	beq.n	8003c50 <HAL_I2C_EV_IRQHandler+0x178>
 8003c3e:	69fb      	ldr	r3, [r7, #28]
 8003c40:	f003 0304 	and.w	r3, r3, #4
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d103      	bne.n	8003c50 <HAL_I2C_EV_IRQHandler+0x178>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8003c48:	6878      	ldr	r0, [r7, #4]
 8003c4a:	f000 fa96 	bl	800417a <I2C_MasterReceive_RXNE>
 8003c4e:	e00f      	b.n	8003c70 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003c50:	69fb      	ldr	r3, [r7, #28]
 8003c52:	f003 0304 	and.w	r3, r3, #4
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	f000 808b 	beq.w	8003d72 <HAL_I2C_EV_IRQHandler+0x29a>
 8003c5c:	697b      	ldr	r3, [r7, #20]
 8003c5e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	f000 8085 	beq.w	8003d72 <HAL_I2C_EV_IRQHandler+0x29a>
        {
          I2C_MasterReceive_BTF(hi2c);
 8003c68:	6878      	ldr	r0, [r7, #4]
 8003c6a:	f000 fb4e 	bl	800430a <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003c6e:	e080      	b.n	8003d72 <HAL_I2C_EV_IRQHandler+0x29a>
 8003c70:	e07f      	b.n	8003d72 <HAL_I2C_EV_IRQHandler+0x29a>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d004      	beq.n	8003c84 <HAL_I2C_EV_IRQHandler+0x1ac>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	695b      	ldr	r3, [r3, #20]
 8003c80:	61fb      	str	r3, [r7, #28]
 8003c82:	e007      	b.n	8003c94 <HAL_I2C_EV_IRQHandler+0x1bc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	699b      	ldr	r3, [r3, #24]
 8003c8a:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	695b      	ldr	r3, [r3, #20]
 8003c92:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003c94:	69fb      	ldr	r3, [r7, #28]
 8003c96:	f003 0302 	and.w	r3, r3, #2
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d011      	beq.n	8003cc2 <HAL_I2C_EV_IRQHandler+0x1ea>
 8003c9e:	697b      	ldr	r3, [r7, #20]
 8003ca0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d00c      	beq.n	8003cc2 <HAL_I2C_EV_IRQHandler+0x1ea>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d003      	beq.n	8003cb8 <HAL_I2C_EV_IRQHandler+0x1e0>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	699b      	ldr	r3, [r3, #24]
 8003cb6:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8003cb8:	69b9      	ldr	r1, [r7, #24]
 8003cba:	6878      	ldr	r0, [r7, #4]
 8003cbc:	f000 ff19 	bl	8004af2 <I2C_Slave_ADDR>
 8003cc0:	e05a      	b.n	8003d78 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003cc2:	69fb      	ldr	r3, [r7, #28]
 8003cc4:	f003 0310 	and.w	r3, r3, #16
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d008      	beq.n	8003cde <HAL_I2C_EV_IRQHandler+0x206>
 8003ccc:	697b      	ldr	r3, [r7, #20]
 8003cce:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d003      	beq.n	8003cde <HAL_I2C_EV_IRQHandler+0x206>
    {
      I2C_Slave_STOPF(hi2c);
 8003cd6:	6878      	ldr	r0, [r7, #4]
 8003cd8:	f000 ff54 	bl	8004b84 <I2C_Slave_STOPF>
 8003cdc:	e04c      	b.n	8003d78 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003cde:	7bbb      	ldrb	r3, [r7, #14]
 8003ce0:	2b21      	cmp	r3, #33	@ 0x21
 8003ce2:	d002      	beq.n	8003cea <HAL_I2C_EV_IRQHandler+0x212>
 8003ce4:	7bbb      	ldrb	r3, [r7, #14]
 8003ce6:	2b29      	cmp	r3, #41	@ 0x29
 8003ce8:	d120      	bne.n	8003d2c <HAL_I2C_EV_IRQHandler+0x254>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003cea:	69fb      	ldr	r3, [r7, #28]
 8003cec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d00d      	beq.n	8003d10 <HAL_I2C_EV_IRQHandler+0x238>
 8003cf4:	697b      	ldr	r3, [r7, #20]
 8003cf6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d008      	beq.n	8003d10 <HAL_I2C_EV_IRQHandler+0x238>
 8003cfe:	69fb      	ldr	r3, [r7, #28]
 8003d00:	f003 0304 	and.w	r3, r3, #4
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d103      	bne.n	8003d10 <HAL_I2C_EV_IRQHandler+0x238>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8003d08:	6878      	ldr	r0, [r7, #4]
 8003d0a:	f000 fe34 	bl	8004976 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003d0e:	e032      	b.n	8003d76 <HAL_I2C_EV_IRQHandler+0x29e>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003d10:	69fb      	ldr	r3, [r7, #28]
 8003d12:	f003 0304 	and.w	r3, r3, #4
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d02d      	beq.n	8003d76 <HAL_I2C_EV_IRQHandler+0x29e>
 8003d1a:	697b      	ldr	r3, [r7, #20]
 8003d1c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d028      	beq.n	8003d76 <HAL_I2C_EV_IRQHandler+0x29e>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8003d24:	6878      	ldr	r0, [r7, #4]
 8003d26:	f000 fe63 	bl	80049f0 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003d2a:	e024      	b.n	8003d76 <HAL_I2C_EV_IRQHandler+0x29e>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003d2c:	69fb      	ldr	r3, [r7, #28]
 8003d2e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d00d      	beq.n	8003d52 <HAL_I2C_EV_IRQHandler+0x27a>
 8003d36:	697b      	ldr	r3, [r7, #20]
 8003d38:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d008      	beq.n	8003d52 <HAL_I2C_EV_IRQHandler+0x27a>
 8003d40:	69fb      	ldr	r3, [r7, #28]
 8003d42:	f003 0304 	and.w	r3, r3, #4
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d103      	bne.n	8003d52 <HAL_I2C_EV_IRQHandler+0x27a>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8003d4a:	6878      	ldr	r0, [r7, #4]
 8003d4c:	f000 fe71 	bl	8004a32 <I2C_SlaveReceive_RXNE>
 8003d50:	e012      	b.n	8003d78 <HAL_I2C_EV_IRQHandler+0x2a0>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003d52:	69fb      	ldr	r3, [r7, #28]
 8003d54:	f003 0304 	and.w	r3, r3, #4
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d00d      	beq.n	8003d78 <HAL_I2C_EV_IRQHandler+0x2a0>
 8003d5c:	697b      	ldr	r3, [r7, #20]
 8003d5e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d008      	beq.n	8003d78 <HAL_I2C_EV_IRQHandler+0x2a0>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8003d66:	6878      	ldr	r0, [r7, #4]
 8003d68:	f000 fea1 	bl	8004aae <I2C_SlaveReceive_BTF>
 8003d6c:	e004      	b.n	8003d78 <HAL_I2C_EV_IRQHandler+0x2a0>
      return;
 8003d6e:	bf00      	nop
 8003d70:	e002      	b.n	8003d78 <HAL_I2C_EV_IRQHandler+0x2a0>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003d72:	bf00      	nop
 8003d74:	e000      	b.n	8003d78 <HAL_I2C_EV_IRQHandler+0x2a0>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003d76:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8003d78:	3720      	adds	r7, #32
 8003d7a:	46bd      	mov	sp, r7
 8003d7c:	bd80      	pop	{r7, pc}

08003d7e <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003d7e:	b480      	push	{r7}
 8003d80:	b083      	sub	sp, #12
 8003d82:	af00      	add	r7, sp, #0
 8003d84:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8003d86:	bf00      	nop
 8003d88:	370c      	adds	r7, #12
 8003d8a:	46bd      	mov	sp, r7
 8003d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d90:	4770      	bx	lr

08003d92 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003d92:	b480      	push	{r7}
 8003d94:	b083      	sub	sp, #12
 8003d96:	af00      	add	r7, sp, #0
 8003d98:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8003d9a:	bf00      	nop
 8003d9c:	370c      	adds	r7, #12
 8003d9e:	46bd      	mov	sp, r7
 8003da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da4:	4770      	bx	lr

08003da6 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8003da6:	b480      	push	{r7}
 8003da8:	b083      	sub	sp, #12
 8003daa:	af00      	add	r7, sp, #0
 8003dac:	6078      	str	r0, [r7, #4]
 8003dae:	460b      	mov	r3, r1
 8003db0:	70fb      	strb	r3, [r7, #3]
 8003db2:	4613      	mov	r3, r2
 8003db4:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8003db6:	bf00      	nop
 8003db8:	370c      	adds	r7, #12
 8003dba:	46bd      	mov	sp, r7
 8003dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc0:	4770      	bx	lr

08003dc2 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003dc2:	b480      	push	{r7}
 8003dc4:	b083      	sub	sp, #12
 8003dc6:	af00      	add	r7, sp, #0
 8003dc8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8003dca:	bf00      	nop
 8003dcc:	370c      	adds	r7, #12
 8003dce:	46bd      	mov	sp, r7
 8003dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd4:	4770      	bx	lr

08003dd6 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003dd6:	b480      	push	{r7}
 8003dd8:	b083      	sub	sp, #12
 8003dda:	af00      	add	r7, sp, #0
 8003ddc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8003dde:	bf00      	nop
 8003de0:	370c      	adds	r7, #12
 8003de2:	46bd      	mov	sp, r7
 8003de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de8:	4770      	bx	lr

08003dea <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003dea:	b480      	push	{r7}
 8003dec:	b083      	sub	sp, #12
 8003dee:	af00      	add	r7, sp, #0
 8003df0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8003df2:	bf00      	nop
 8003df4:	370c      	adds	r7, #12
 8003df6:	46bd      	mov	sp, r7
 8003df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfc:	4770      	bx	lr

08003dfe <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003dfe:	b480      	push	{r7}
 8003e00:	b083      	sub	sp, #12
 8003e02:	af00      	add	r7, sp, #0
 8003e04:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8003e06:	bf00      	nop
 8003e08:	370c      	adds	r7, #12
 8003e0a:	46bd      	mov	sp, r7
 8003e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e10:	4770      	bx	lr

08003e12 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003e12:	b480      	push	{r7}
 8003e14:	b083      	sub	sp, #12
 8003e16:	af00      	add	r7, sp, #0
 8003e18:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8003e1a:	bf00      	nop
 8003e1c:	370c      	adds	r7, #12
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e24:	4770      	bx	lr

08003e26 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8003e26:	b580      	push	{r7, lr}
 8003e28:	b084      	sub	sp, #16
 8003e2a:	af00      	add	r7, sp, #0
 8003e2c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003e34:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003e3c:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e42:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d150      	bne.n	8003eee <I2C_MasterTransmit_TXE+0xc8>
 8003e4c:	7bfb      	ldrb	r3, [r7, #15]
 8003e4e:	2b21      	cmp	r3, #33	@ 0x21
 8003e50:	d14d      	bne.n	8003eee <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003e52:	68bb      	ldr	r3, [r7, #8]
 8003e54:	2b08      	cmp	r3, #8
 8003e56:	d01d      	beq.n	8003e94 <I2C_MasterTransmit_TXE+0x6e>
 8003e58:	68bb      	ldr	r3, [r7, #8]
 8003e5a:	2b20      	cmp	r3, #32
 8003e5c:	d01a      	beq.n	8003e94 <I2C_MasterTransmit_TXE+0x6e>
 8003e5e:	68bb      	ldr	r3, [r7, #8]
 8003e60:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003e64:	d016      	beq.n	8003e94 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	685a      	ldr	r2, [r3, #4]
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003e74:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	2211      	movs	r2, #17
 8003e7a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	2200      	movs	r2, #0
 8003e80:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	2220      	movs	r2, #32
 8003e88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8003e8c:	6878      	ldr	r0, [r7, #4]
 8003e8e:	f7fd fcd1 	bl	8001834 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003e92:	e060      	b.n	8003f56 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	685a      	ldr	r2, [r3, #4]
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003ea2:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	681a      	ldr	r2, [r3, #0]
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003eb2:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	2220      	movs	r2, #32
 8003ebe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003ec8:	b2db      	uxtb	r3, r3
 8003eca:	2b40      	cmp	r3, #64	@ 0x40
 8003ecc:	d107      	bne.n	8003ede <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	2200      	movs	r2, #0
 8003ed2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8003ed6:	6878      	ldr	r0, [r7, #4]
 8003ed8:	f7ff ff7d 	bl	8003dd6 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003edc:	e03b      	b.n	8003f56 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	2200      	movs	r2, #0
 8003ee2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003ee6:	6878      	ldr	r0, [r7, #4]
 8003ee8:	f7fd fca4 	bl	8001834 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003eec:	e033      	b.n	8003f56 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8003eee:	7bfb      	ldrb	r3, [r7, #15]
 8003ef0:	2b21      	cmp	r3, #33	@ 0x21
 8003ef2:	d005      	beq.n	8003f00 <I2C_MasterTransmit_TXE+0xda>
 8003ef4:	7bbb      	ldrb	r3, [r7, #14]
 8003ef6:	2b40      	cmp	r3, #64	@ 0x40
 8003ef8:	d12d      	bne.n	8003f56 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8003efa:	7bfb      	ldrb	r3, [r7, #15]
 8003efc:	2b22      	cmp	r3, #34	@ 0x22
 8003efe:	d12a      	bne.n	8003f56 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f04:	b29b      	uxth	r3, r3
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d108      	bne.n	8003f1c <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	685a      	ldr	r2, [r3, #4]
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003f18:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8003f1a:	e01c      	b.n	8003f56 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003f22:	b2db      	uxtb	r3, r3
 8003f24:	2b40      	cmp	r3, #64	@ 0x40
 8003f26:	d103      	bne.n	8003f30 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8003f28:	6878      	ldr	r0, [r7, #4]
 8003f2a:	f000 f88e 	bl	800404a <I2C_MemoryTransmit_TXE_BTF>
}
 8003f2e:	e012      	b.n	8003f56 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f34:	781a      	ldrb	r2, [r3, #0]
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f40:	1c5a      	adds	r2, r3, #1
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f4a:	b29b      	uxth	r3, r3
 8003f4c:	3b01      	subs	r3, #1
 8003f4e:	b29a      	uxth	r2, r3
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8003f54:	e7ff      	b.n	8003f56 <I2C_MasterTransmit_TXE+0x130>
 8003f56:	bf00      	nop
 8003f58:	3710      	adds	r7, #16
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	bd80      	pop	{r7, pc}

08003f5e <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8003f5e:	b580      	push	{r7, lr}
 8003f60:	b084      	sub	sp, #16
 8003f62:	af00      	add	r7, sp, #0
 8003f64:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f6a:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003f72:	b2db      	uxtb	r3, r3
 8003f74:	2b21      	cmp	r3, #33	@ 0x21
 8003f76:	d164      	bne.n	8004042 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f7c:	b29b      	uxth	r3, r3
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d012      	beq.n	8003fa8 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f86:	781a      	ldrb	r2, [r3, #0]
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f92:	1c5a      	adds	r2, r3, #1
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f9c:	b29b      	uxth	r3, r3
 8003f9e:	3b01      	subs	r3, #1
 8003fa0:	b29a      	uxth	r2, r3
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8003fa6:	e04c      	b.n	8004042 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	2b08      	cmp	r3, #8
 8003fac:	d01d      	beq.n	8003fea <I2C_MasterTransmit_BTF+0x8c>
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	2b20      	cmp	r3, #32
 8003fb2:	d01a      	beq.n	8003fea <I2C_MasterTransmit_BTF+0x8c>
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003fba:	d016      	beq.n	8003fea <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	685a      	ldr	r2, [r3, #4]
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003fca:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	2211      	movs	r2, #17
 8003fd0:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	2200      	movs	r2, #0
 8003fd6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	2220      	movs	r2, #32
 8003fde:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003fe2:	6878      	ldr	r0, [r7, #4]
 8003fe4:	f7fd fc26 	bl	8001834 <HAL_I2C_MasterTxCpltCallback>
}
 8003fe8:	e02b      	b.n	8004042 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	685a      	ldr	r2, [r3, #4]
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003ff8:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	681a      	ldr	r2, [r3, #0]
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004008:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	2200      	movs	r2, #0
 800400e:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	2220      	movs	r2, #32
 8004014:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800401e:	b2db      	uxtb	r3, r3
 8004020:	2b40      	cmp	r3, #64	@ 0x40
 8004022:	d107      	bne.n	8004034 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	2200      	movs	r2, #0
 8004028:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 800402c:	6878      	ldr	r0, [r7, #4]
 800402e:	f7ff fed2 	bl	8003dd6 <HAL_I2C_MemTxCpltCallback>
}
 8004032:	e006      	b.n	8004042 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	2200      	movs	r2, #0
 8004038:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 800403c:	6878      	ldr	r0, [r7, #4]
 800403e:	f7fd fbf9 	bl	8001834 <HAL_I2C_MasterTxCpltCallback>
}
 8004042:	bf00      	nop
 8004044:	3710      	adds	r7, #16
 8004046:	46bd      	mov	sp, r7
 8004048:	bd80      	pop	{r7, pc}

0800404a <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 800404a:	b580      	push	{r7, lr}
 800404c:	b084      	sub	sp, #16
 800404e:	af00      	add	r7, sp, #0
 8004050:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004058:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800405e:	2b00      	cmp	r3, #0
 8004060:	d11d      	bne.n	800409e <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004066:	2b01      	cmp	r3, #1
 8004068:	d10b      	bne.n	8004082 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800406e:	b2da      	uxtb	r2, r3
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800407a:	1c9a      	adds	r2, r3, #2
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 8004080:	e077      	b.n	8004172 <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004086:	b29b      	uxth	r3, r3
 8004088:	121b      	asrs	r3, r3, #8
 800408a:	b2da      	uxtb	r2, r3
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004096:	1c5a      	adds	r2, r3, #1
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800409c:	e069      	b.n	8004172 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80040a2:	2b01      	cmp	r3, #1
 80040a4:	d10b      	bne.n	80040be <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80040aa:	b2da      	uxtb	r2, r3
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80040b6:	1c5a      	adds	r2, r3, #1
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80040bc:	e059      	b.n	8004172 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80040c2:	2b02      	cmp	r3, #2
 80040c4:	d152      	bne.n	800416c <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 80040c6:	7bfb      	ldrb	r3, [r7, #15]
 80040c8:	2b22      	cmp	r3, #34	@ 0x22
 80040ca:	d10d      	bne.n	80040e8 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	681a      	ldr	r2, [r3, #0]
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80040da:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80040e0:	1c5a      	adds	r2, r3, #1
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80040e6:	e044      	b.n	8004172 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80040ec:	b29b      	uxth	r3, r3
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d015      	beq.n	800411e <I2C_MemoryTransmit_TXE_BTF+0xd4>
 80040f2:	7bfb      	ldrb	r3, [r7, #15]
 80040f4:	2b21      	cmp	r3, #33	@ 0x21
 80040f6:	d112      	bne.n	800411e <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040fc:	781a      	ldrb	r2, [r3, #0]
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004108:	1c5a      	adds	r2, r3, #1
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	625a      	str	r2, [r3, #36]	@ 0x24
      hi2c->XferCount--;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004112:	b29b      	uxth	r3, r3
 8004114:	3b01      	subs	r3, #1
 8004116:	b29a      	uxth	r2, r3
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 800411c:	e029      	b.n	8004172 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004122:	b29b      	uxth	r3, r3
 8004124:	2b00      	cmp	r3, #0
 8004126:	d124      	bne.n	8004172 <I2C_MemoryTransmit_TXE_BTF+0x128>
 8004128:	7bfb      	ldrb	r3, [r7, #15]
 800412a:	2b21      	cmp	r3, #33	@ 0x21
 800412c:	d121      	bne.n	8004172 <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	685a      	ldr	r2, [r3, #4]
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800413c:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	681a      	ldr	r2, [r3, #0]
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800414c:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	2200      	movs	r2, #0
 8004152:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	2220      	movs	r2, #32
 8004158:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	2200      	movs	r2, #0
 8004160:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8004164:	6878      	ldr	r0, [r7, #4]
 8004166:	f7ff fe36 	bl	8003dd6 <HAL_I2C_MemTxCpltCallback>
}
 800416a:	e002      	b.n	8004172 <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 800416c:	6878      	ldr	r0, [r7, #4]
 800416e:	f7ff fa45 	bl	80035fc <I2C_Flush_DR>
}
 8004172:	bf00      	nop
 8004174:	3710      	adds	r7, #16
 8004176:	46bd      	mov	sp, r7
 8004178:	bd80      	pop	{r7, pc}

0800417a <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800417a:	b580      	push	{r7, lr}
 800417c:	b084      	sub	sp, #16
 800417e:	af00      	add	r7, sp, #0
 8004180:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004188:	b2db      	uxtb	r3, r3
 800418a:	2b22      	cmp	r3, #34	@ 0x22
 800418c:	f040 80b9 	bne.w	8004302 <I2C_MasterReceive_RXNE+0x188>
  {
    uint32_t tmp;
    uint32_t CurrentXferOptions;

    CurrentXferOptions = hi2c->XferOptions;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004194:	60fb      	str	r3, [r7, #12]
    tmp = hi2c->XferCount;
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800419a:	b29b      	uxth	r3, r3
 800419c:	60bb      	str	r3, [r7, #8]
    if (tmp > 3U)
 800419e:	68bb      	ldr	r3, [r7, #8]
 80041a0:	2b03      	cmp	r3, #3
 80041a2:	d921      	bls.n	80041e8 <I2C_MasterReceive_RXNE+0x6e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	691a      	ldr	r2, [r3, #16]
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041ae:	b2d2      	uxtb	r2, r2
 80041b0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041b6:	1c5a      	adds	r2, r3, #1
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041c0:	b29b      	uxth	r3, r3
 80041c2:	3b01      	subs	r3, #1
 80041c4:	b29a      	uxth	r2, r3
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041ce:	b29b      	uxth	r3, r3
 80041d0:	2b03      	cmp	r3, #3
 80041d2:	f040 8096 	bne.w	8004302 <I2C_MasterReceive_RXNE+0x188>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	685a      	ldr	r2, [r3, #4]
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80041e4:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 80041e6:	e08c      	b.n	8004302 <I2C_MasterReceive_RXNE+0x188>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041ec:	2b02      	cmp	r3, #2
 80041ee:	d07f      	beq.n	80042f0 <I2C_MasterReceive_RXNE+0x176>
 80041f0:	68bb      	ldr	r3, [r7, #8]
 80041f2:	2b01      	cmp	r3, #1
 80041f4:	d002      	beq.n	80041fc <I2C_MasterReceive_RXNE+0x82>
 80041f6:	68bb      	ldr	r3, [r7, #8]
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d179      	bne.n	80042f0 <I2C_MasterReceive_RXNE+0x176>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80041fc:	6878      	ldr	r0, [r7, #4]
 80041fe:	f001 f8e7 	bl	80053d0 <I2C_WaitOnSTOPRequestThroughIT>
 8004202:	4603      	mov	r3, r0
 8004204:	2b00      	cmp	r3, #0
 8004206:	d14c      	bne.n	80042a2 <I2C_MasterReceive_RXNE+0x128>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	681a      	ldr	r2, [r3, #0]
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004216:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	685a      	ldr	r2, [r3, #4]
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004226:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	691a      	ldr	r2, [r3, #16]
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004232:	b2d2      	uxtb	r2, r2
 8004234:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800423a:	1c5a      	adds	r2, r3, #1
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004244:	b29b      	uxth	r3, r3
 8004246:	3b01      	subs	r3, #1
 8004248:	b29a      	uxth	r2, r3
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	2220      	movs	r2, #32
 8004252:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800425c:	b2db      	uxtb	r3, r3
 800425e:	2b40      	cmp	r3, #64	@ 0x40
 8004260:	d10a      	bne.n	8004278 <I2C_MasterReceive_RXNE+0xfe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	2200      	movs	r2, #0
 8004266:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	2200      	movs	r2, #0
 800426e:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8004270:	6878      	ldr	r0, [r7, #4]
 8004272:	f7ff fdba 	bl	8003dea <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004276:	e044      	b.n	8004302 <I2C_MasterReceive_RXNE+0x188>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	2200      	movs	r2, #0
 800427c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	2b08      	cmp	r3, #8
 8004284:	d002      	beq.n	800428c <I2C_MasterReceive_RXNE+0x112>
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	2b20      	cmp	r3, #32
 800428a:	d103      	bne.n	8004294 <I2C_MasterReceive_RXNE+0x11a>
            hi2c->PreviousState = I2C_STATE_NONE;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	2200      	movs	r2, #0
 8004290:	631a      	str	r2, [r3, #48]	@ 0x30
 8004292:	e002      	b.n	800429a <I2C_MasterReceive_RXNE+0x120>
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	2212      	movs	r2, #18
 8004298:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 800429a:	6878      	ldr	r0, [r7, #4]
 800429c:	f7fd fada 	bl	8001854 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80042a0:	e02f      	b.n	8004302 <I2C_MasterReceive_RXNE+0x188>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	685a      	ldr	r2, [r3, #4]
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80042b0:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	691a      	ldr	r2, [r3, #16]
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042bc:	b2d2      	uxtb	r2, r2
 80042be:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042c4:	1c5a      	adds	r2, r3, #1
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80042ce:	b29b      	uxth	r3, r3
 80042d0:	3b01      	subs	r3, #1
 80042d2:	b29a      	uxth	r2, r3
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	2220      	movs	r2, #32
 80042dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	2200      	movs	r2, #0
 80042e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 80042e8:	6878      	ldr	r0, [r7, #4]
 80042ea:	f7ff fd88 	bl	8003dfe <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80042ee:	e008      	b.n	8004302 <I2C_MasterReceive_RXNE+0x188>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	685a      	ldr	r2, [r3, #4]
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80042fe:	605a      	str	r2, [r3, #4]
}
 8004300:	e7ff      	b.n	8004302 <I2C_MasterReceive_RXNE+0x188>
 8004302:	bf00      	nop
 8004304:	3710      	adds	r7, #16
 8004306:	46bd      	mov	sp, r7
 8004308:	bd80      	pop	{r7, pc}

0800430a <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800430a:	b580      	push	{r7, lr}
 800430c:	b084      	sub	sp, #16
 800430e:	af00      	add	r7, sp, #0
 8004310:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004316:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800431c:	b29b      	uxth	r3, r3
 800431e:	2b04      	cmp	r3, #4
 8004320:	d11b      	bne.n	800435a <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	685a      	ldr	r2, [r3, #4]
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004330:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	691a      	ldr	r2, [r3, #16]
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800433c:	b2d2      	uxtb	r2, r2
 800433e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004344:	1c5a      	adds	r2, r3, #1
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800434e:	b29b      	uxth	r3, r3
 8004350:	3b01      	subs	r3, #1
 8004352:	b29a      	uxth	r2, r3
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8004358:	e0c8      	b.n	80044ec <I2C_MasterReceive_BTF+0x1e2>
  else if (hi2c->XferCount == 3U)
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800435e:	b29b      	uxth	r3, r3
 8004360:	2b03      	cmp	r3, #3
 8004362:	d129      	bne.n	80043b8 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	685a      	ldr	r2, [r3, #4]
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004372:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	2b04      	cmp	r3, #4
 8004378:	d00a      	beq.n	8004390 <I2C_MasterReceive_BTF+0x86>
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	2b02      	cmp	r3, #2
 800437e:	d007      	beq.n	8004390 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	681a      	ldr	r2, [r3, #0]
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800438e:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	691a      	ldr	r2, [r3, #16]
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800439a:	b2d2      	uxtb	r2, r2
 800439c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043a2:	1c5a      	adds	r2, r3, #1
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80043ac:	b29b      	uxth	r3, r3
 80043ae:	3b01      	subs	r3, #1
 80043b0:	b29a      	uxth	r2, r3
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 80043b6:	e099      	b.n	80044ec <I2C_MasterReceive_BTF+0x1e2>
  else if (hi2c->XferCount == 2U)
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80043bc:	b29b      	uxth	r3, r3
 80043be:	2b02      	cmp	r3, #2
 80043c0:	f040 8081 	bne.w	80044c6 <I2C_MasterReceive_BTF+0x1bc>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	2b01      	cmp	r3, #1
 80043c8:	d002      	beq.n	80043d0 <I2C_MasterReceive_BTF+0xc6>
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	2b10      	cmp	r3, #16
 80043ce:	d108      	bne.n	80043e2 <I2C_MasterReceive_BTF+0xd8>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	681a      	ldr	r2, [r3, #0]
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80043de:	601a      	str	r2, [r3, #0]
 80043e0:	e019      	b.n	8004416 <I2C_MasterReceive_BTF+0x10c>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	2b04      	cmp	r3, #4
 80043e6:	d002      	beq.n	80043ee <I2C_MasterReceive_BTF+0xe4>
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	2b02      	cmp	r3, #2
 80043ec:	d108      	bne.n	8004400 <I2C_MasterReceive_BTF+0xf6>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	681a      	ldr	r2, [r3, #0]
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80043fc:	601a      	str	r2, [r3, #0]
 80043fe:	e00a      	b.n	8004416 <I2C_MasterReceive_BTF+0x10c>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	2b10      	cmp	r3, #16
 8004404:	d007      	beq.n	8004416 <I2C_MasterReceive_BTF+0x10c>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	681a      	ldr	r2, [r3, #0]
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004414:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	691a      	ldr	r2, [r3, #16]
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004420:	b2d2      	uxtb	r2, r2
 8004422:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004428:	1c5a      	adds	r2, r3, #1
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004432:	b29b      	uxth	r3, r3
 8004434:	3b01      	subs	r3, #1
 8004436:	b29a      	uxth	r2, r3
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	691a      	ldr	r2, [r3, #16]
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004446:	b2d2      	uxtb	r2, r2
 8004448:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800444e:	1c5a      	adds	r2, r3, #1
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004458:	b29b      	uxth	r3, r3
 800445a:	3b01      	subs	r3, #1
 800445c:	b29a      	uxth	r2, r3
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	855a      	strh	r2, [r3, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	685a      	ldr	r2, [r3, #4]
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8004470:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	2220      	movs	r2, #32
 8004476:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004480:	b2db      	uxtb	r3, r3
 8004482:	2b40      	cmp	r3, #64	@ 0x40
 8004484:	d10a      	bne.n	800449c <I2C_MasterReceive_BTF+0x192>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	2200      	movs	r2, #0
 800448a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	2200      	movs	r2, #0
 8004492:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8004494:	6878      	ldr	r0, [r7, #4]
 8004496:	f7ff fca8 	bl	8003dea <HAL_I2C_MemRxCpltCallback>
}
 800449a:	e027      	b.n	80044ec <I2C_MasterReceive_BTF+0x1e2>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	2200      	movs	r2, #0
 80044a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	2b08      	cmp	r3, #8
 80044a8:	d002      	beq.n	80044b0 <I2C_MasterReceive_BTF+0x1a6>
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	2b20      	cmp	r3, #32
 80044ae:	d103      	bne.n	80044b8 <I2C_MasterReceive_BTF+0x1ae>
        hi2c->PreviousState = I2C_STATE_NONE;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	2200      	movs	r2, #0
 80044b4:	631a      	str	r2, [r3, #48]	@ 0x30
 80044b6:	e002      	b.n	80044be <I2C_MasterReceive_BTF+0x1b4>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	2212      	movs	r2, #18
 80044bc:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80044be:	6878      	ldr	r0, [r7, #4]
 80044c0:	f7fd f9c8 	bl	8001854 <HAL_I2C_MasterRxCpltCallback>
}
 80044c4:	e012      	b.n	80044ec <I2C_MasterReceive_BTF+0x1e2>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	691a      	ldr	r2, [r3, #16]
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044d0:	b2d2      	uxtb	r2, r2
 80044d2:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044d8:	1c5a      	adds	r2, r3, #1
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80044e2:	b29b      	uxth	r3, r3
 80044e4:	3b01      	subs	r3, #1
 80044e6:	b29a      	uxth	r2, r3
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 80044ec:	bf00      	nop
 80044ee:	3710      	adds	r7, #16
 80044f0:	46bd      	mov	sp, r7
 80044f2:	bd80      	pop	{r7, pc}

080044f4 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 80044f4:	b480      	push	{r7}
 80044f6:	b083      	sub	sp, #12
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004502:	b2db      	uxtb	r3, r3
 8004504:	2b40      	cmp	r3, #64	@ 0x40
 8004506:	d117      	bne.n	8004538 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800450c:	2b00      	cmp	r3, #0
 800450e:	d109      	bne.n	8004524 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004514:	b2db      	uxtb	r3, r3
 8004516:	461a      	mov	r2, r3
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004520:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8004522:	e067      	b.n	80045f4 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004528:	b2db      	uxtb	r3, r3
 800452a:	f043 0301 	orr.w	r3, r3, #1
 800452e:	b2da      	uxtb	r2, r3
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	611a      	str	r2, [r3, #16]
}
 8004536:	e05d      	b.n	80045f4 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	691b      	ldr	r3, [r3, #16]
 800453c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004540:	d133      	bne.n	80045aa <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004548:	b2db      	uxtb	r3, r3
 800454a:	2b21      	cmp	r3, #33	@ 0x21
 800454c:	d109      	bne.n	8004562 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004552:	b2db      	uxtb	r3, r3
 8004554:	461a      	mov	r2, r3
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800455e:	611a      	str	r2, [r3, #16]
 8004560:	e008      	b.n	8004574 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004566:	b2db      	uxtb	r3, r3
 8004568:	f043 0301 	orr.w	r3, r3, #1
 800456c:	b2da      	uxtb	r2, r3
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004578:	2b00      	cmp	r3, #0
 800457a:	d004      	beq.n	8004586 <I2C_Master_SB+0x92>
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004580:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004582:	2b00      	cmp	r3, #0
 8004584:	d108      	bne.n	8004598 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800458a:	2b00      	cmp	r3, #0
 800458c:	d032      	beq.n	80045f4 <I2C_Master_SB+0x100>
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004592:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004594:	2b00      	cmp	r3, #0
 8004596:	d02d      	beq.n	80045f4 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	685a      	ldr	r2, [r3, #4]
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80045a6:	605a      	str	r2, [r3, #4]
}
 80045a8:	e024      	b.n	80045f4 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d10e      	bne.n	80045d0 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80045b6:	b29b      	uxth	r3, r3
 80045b8:	11db      	asrs	r3, r3, #7
 80045ba:	b2db      	uxtb	r3, r3
 80045bc:	f003 0306 	and.w	r3, r3, #6
 80045c0:	b2db      	uxtb	r3, r3
 80045c2:	f063 030f 	orn	r3, r3, #15
 80045c6:	b2da      	uxtb	r2, r3
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	611a      	str	r2, [r3, #16]
}
 80045ce:	e011      	b.n	80045f4 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80045d4:	2b01      	cmp	r3, #1
 80045d6:	d10d      	bne.n	80045f4 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80045dc:	b29b      	uxth	r3, r3
 80045de:	11db      	asrs	r3, r3, #7
 80045e0:	b2db      	uxtb	r3, r3
 80045e2:	f003 0306 	and.w	r3, r3, #6
 80045e6:	b2db      	uxtb	r3, r3
 80045e8:	f063 030e 	orn	r3, r3, #14
 80045ec:	b2da      	uxtb	r2, r3
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	611a      	str	r2, [r3, #16]
}
 80045f4:	bf00      	nop
 80045f6:	370c      	adds	r7, #12
 80045f8:	46bd      	mov	sp, r7
 80045fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045fe:	4770      	bx	lr

08004600 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8004600:	b480      	push	{r7}
 8004602:	b083      	sub	sp, #12
 8004604:	af00      	add	r7, sp, #0
 8004606:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800460c:	b2da      	uxtb	r2, r3
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004618:	2b00      	cmp	r3, #0
 800461a:	d004      	beq.n	8004626 <I2C_Master_ADD10+0x26>
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004620:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004622:	2b00      	cmp	r3, #0
 8004624:	d108      	bne.n	8004638 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800462a:	2b00      	cmp	r3, #0
 800462c:	d00c      	beq.n	8004648 <I2C_Master_ADD10+0x48>
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004632:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004634:	2b00      	cmp	r3, #0
 8004636:	d007      	beq.n	8004648 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	685a      	ldr	r2, [r3, #4]
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004646:	605a      	str	r2, [r3, #4]
  }
}
 8004648:	bf00      	nop
 800464a:	370c      	adds	r7, #12
 800464c:	46bd      	mov	sp, r7
 800464e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004652:	4770      	bx	lr

08004654 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8004654:	b480      	push	{r7}
 8004656:	b091      	sub	sp, #68	@ 0x44
 8004658:	af00      	add	r7, sp, #0
 800465a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004662:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800466a:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004670:	637b      	str	r3, [r7, #52]	@ 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004678:	b2db      	uxtb	r3, r3
 800467a:	2b22      	cmp	r3, #34	@ 0x22
 800467c:	f040 8169 	bne.w	8004952 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004684:	2b00      	cmp	r3, #0
 8004686:	d10f      	bne.n	80046a8 <I2C_Master_ADDR+0x54>
 8004688:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800468c:	2b40      	cmp	r3, #64	@ 0x40
 800468e:	d10b      	bne.n	80046a8 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004690:	2300      	movs	r3, #0
 8004692:	633b      	str	r3, [r7, #48]	@ 0x30
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	695b      	ldr	r3, [r3, #20]
 800469a:	633b      	str	r3, [r7, #48]	@ 0x30
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	699b      	ldr	r3, [r3, #24]
 80046a2:	633b      	str	r3, [r7, #48]	@ 0x30
 80046a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046a6:	e160      	b.n	800496a <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d11d      	bne.n	80046ec <I2C_Master_ADDR+0x98>
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	691b      	ldr	r3, [r3, #16]
 80046b4:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80046b8:	d118      	bne.n	80046ec <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80046ba:	2300      	movs	r3, #0
 80046bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	695b      	ldr	r3, [r3, #20]
 80046c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	699b      	ldr	r3, [r3, #24]
 80046cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80046ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	681a      	ldr	r2, [r3, #0]
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80046de:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80046e4:	1c5a      	adds	r2, r3, #1
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	651a      	str	r2, [r3, #80]	@ 0x50
 80046ea:	e13e      	b.n	800496a <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80046f0:	b29b      	uxth	r3, r3
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d113      	bne.n	800471e <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80046f6:	2300      	movs	r3, #0
 80046f8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	695b      	ldr	r3, [r3, #20]
 8004700:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	699b      	ldr	r3, [r3, #24]
 8004708:	62bb      	str	r3, [r7, #40]	@ 0x28
 800470a:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	681a      	ldr	r2, [r3, #0]
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800471a:	601a      	str	r2, [r3, #0]
 800471c:	e115      	b.n	800494a <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004722:	b29b      	uxth	r3, r3
 8004724:	2b01      	cmp	r3, #1
 8004726:	f040 808a 	bne.w	800483e <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 800472a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800472c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004730:	d137      	bne.n	80047a2 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	681a      	ldr	r2, [r3, #0]
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004740:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	685b      	ldr	r3, [r3, #4]
 8004748:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800474c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004750:	d113      	bne.n	800477a <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	681a      	ldr	r2, [r3, #0]
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004760:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004762:	2300      	movs	r3, #0
 8004764:	627b      	str	r3, [r7, #36]	@ 0x24
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	695b      	ldr	r3, [r3, #20]
 800476c:	627b      	str	r3, [r7, #36]	@ 0x24
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	699b      	ldr	r3, [r3, #24]
 8004774:	627b      	str	r3, [r7, #36]	@ 0x24
 8004776:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004778:	e0e7      	b.n	800494a <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800477a:	2300      	movs	r3, #0
 800477c:	623b      	str	r3, [r7, #32]
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	695b      	ldr	r3, [r3, #20]
 8004784:	623b      	str	r3, [r7, #32]
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	699b      	ldr	r3, [r3, #24]
 800478c:	623b      	str	r3, [r7, #32]
 800478e:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	681a      	ldr	r2, [r3, #0]
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800479e:	601a      	str	r2, [r3, #0]
 80047a0:	e0d3      	b.n	800494a <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 80047a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80047a4:	2b08      	cmp	r3, #8
 80047a6:	d02e      	beq.n	8004806 <I2C_Master_ADDR+0x1b2>
 80047a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80047aa:	2b20      	cmp	r3, #32
 80047ac:	d02b      	beq.n	8004806 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 80047ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80047b0:	2b12      	cmp	r3, #18
 80047b2:	d102      	bne.n	80047ba <I2C_Master_ADDR+0x166>
 80047b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80047b6:	2b01      	cmp	r3, #1
 80047b8:	d125      	bne.n	8004806 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80047ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80047bc:	2b04      	cmp	r3, #4
 80047be:	d00e      	beq.n	80047de <I2C_Master_ADDR+0x18a>
 80047c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80047c2:	2b02      	cmp	r3, #2
 80047c4:	d00b      	beq.n	80047de <I2C_Master_ADDR+0x18a>
 80047c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80047c8:	2b10      	cmp	r3, #16
 80047ca:	d008      	beq.n	80047de <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	681a      	ldr	r2, [r3, #0]
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80047da:	601a      	str	r2, [r3, #0]
 80047dc:	e007      	b.n	80047ee <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	681a      	ldr	r2, [r3, #0]
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80047ec:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80047ee:	2300      	movs	r3, #0
 80047f0:	61fb      	str	r3, [r7, #28]
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	695b      	ldr	r3, [r3, #20]
 80047f8:	61fb      	str	r3, [r7, #28]
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	699b      	ldr	r3, [r3, #24]
 8004800:	61fb      	str	r3, [r7, #28]
 8004802:	69fb      	ldr	r3, [r7, #28]
 8004804:	e0a1      	b.n	800494a <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	681a      	ldr	r2, [r3, #0]
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004814:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004816:	2300      	movs	r3, #0
 8004818:	61bb      	str	r3, [r7, #24]
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	695b      	ldr	r3, [r3, #20]
 8004820:	61bb      	str	r3, [r7, #24]
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	699b      	ldr	r3, [r3, #24]
 8004828:	61bb      	str	r3, [r7, #24]
 800482a:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	681a      	ldr	r2, [r3, #0]
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800483a:	601a      	str	r2, [r3, #0]
 800483c:	e085      	b.n	800494a <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004842:	b29b      	uxth	r3, r3
 8004844:	2b02      	cmp	r3, #2
 8004846:	d14d      	bne.n	80048e4 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8004848:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800484a:	2b04      	cmp	r3, #4
 800484c:	d016      	beq.n	800487c <I2C_Master_ADDR+0x228>
 800484e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004850:	2b02      	cmp	r3, #2
 8004852:	d013      	beq.n	800487c <I2C_Master_ADDR+0x228>
 8004854:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004856:	2b10      	cmp	r3, #16
 8004858:	d010      	beq.n	800487c <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	681a      	ldr	r2, [r3, #0]
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004868:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	681a      	ldr	r2, [r3, #0]
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004878:	601a      	str	r2, [r3, #0]
 800487a:	e007      	b.n	800488c <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	681a      	ldr	r2, [r3, #0]
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800488a:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	685b      	ldr	r3, [r3, #4]
 8004892:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004896:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800489a:	d117      	bne.n	80048cc <I2C_Master_ADDR+0x278>
 800489c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800489e:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80048a2:	d00b      	beq.n	80048bc <I2C_Master_ADDR+0x268>
 80048a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80048a6:	2b01      	cmp	r3, #1
 80048a8:	d008      	beq.n	80048bc <I2C_Master_ADDR+0x268>
 80048aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80048ac:	2b08      	cmp	r3, #8
 80048ae:	d005      	beq.n	80048bc <I2C_Master_ADDR+0x268>
 80048b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80048b2:	2b10      	cmp	r3, #16
 80048b4:	d002      	beq.n	80048bc <I2C_Master_ADDR+0x268>
 80048b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80048b8:	2b20      	cmp	r3, #32
 80048ba:	d107      	bne.n	80048cc <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	685a      	ldr	r2, [r3, #4]
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80048ca:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80048cc:	2300      	movs	r3, #0
 80048ce:	617b      	str	r3, [r7, #20]
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	695b      	ldr	r3, [r3, #20]
 80048d6:	617b      	str	r3, [r7, #20]
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	699b      	ldr	r3, [r3, #24]
 80048de:	617b      	str	r3, [r7, #20]
 80048e0:	697b      	ldr	r3, [r7, #20]
 80048e2:	e032      	b.n	800494a <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	681a      	ldr	r2, [r3, #0]
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80048f2:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	685b      	ldr	r3, [r3, #4]
 80048fa:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80048fe:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004902:	d117      	bne.n	8004934 <I2C_Master_ADDR+0x2e0>
 8004904:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004906:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800490a:	d00b      	beq.n	8004924 <I2C_Master_ADDR+0x2d0>
 800490c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800490e:	2b01      	cmp	r3, #1
 8004910:	d008      	beq.n	8004924 <I2C_Master_ADDR+0x2d0>
 8004912:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004914:	2b08      	cmp	r3, #8
 8004916:	d005      	beq.n	8004924 <I2C_Master_ADDR+0x2d0>
 8004918:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800491a:	2b10      	cmp	r3, #16
 800491c:	d002      	beq.n	8004924 <I2C_Master_ADDR+0x2d0>
 800491e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004920:	2b20      	cmp	r3, #32
 8004922:	d107      	bne.n	8004934 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	685a      	ldr	r2, [r3, #4]
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004932:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004934:	2300      	movs	r3, #0
 8004936:	613b      	str	r3, [r7, #16]
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	695b      	ldr	r3, [r3, #20]
 800493e:	613b      	str	r3, [r7, #16]
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	699b      	ldr	r3, [r3, #24]
 8004946:	613b      	str	r3, [r7, #16]
 8004948:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	2200      	movs	r2, #0
 800494e:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8004950:	e00b      	b.n	800496a <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004952:	2300      	movs	r3, #0
 8004954:	60fb      	str	r3, [r7, #12]
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	695b      	ldr	r3, [r3, #20]
 800495c:	60fb      	str	r3, [r7, #12]
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	699b      	ldr	r3, [r3, #24]
 8004964:	60fb      	str	r3, [r7, #12]
 8004966:	68fb      	ldr	r3, [r7, #12]
}
 8004968:	e7ff      	b.n	800496a <I2C_Master_ADDR+0x316>
 800496a:	bf00      	nop
 800496c:	3744      	adds	r7, #68	@ 0x44
 800496e:	46bd      	mov	sp, r7
 8004970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004974:	4770      	bx	lr

08004976 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8004976:	b580      	push	{r7, lr}
 8004978:	b084      	sub	sp, #16
 800497a:	af00      	add	r7, sp, #0
 800497c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004984:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800498a:	b29b      	uxth	r3, r3
 800498c:	2b00      	cmp	r3, #0
 800498e:	d02b      	beq.n	80049e8 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004994:	781a      	ldrb	r2, [r3, #0]
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049a0:	1c5a      	adds	r2, r3, #1
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80049aa:	b29b      	uxth	r3, r3
 80049ac:	3b01      	subs	r3, #1
 80049ae:	b29a      	uxth	r2, r3
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80049b8:	b29b      	uxth	r3, r3
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d114      	bne.n	80049e8 <I2C_SlaveTransmit_TXE+0x72>
 80049be:	7bfb      	ldrb	r3, [r7, #15]
 80049c0:	2b29      	cmp	r3, #41	@ 0x29
 80049c2:	d111      	bne.n	80049e8 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	685a      	ldr	r2, [r3, #4]
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80049d2:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	2221      	movs	r2, #33	@ 0x21
 80049d8:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	2228      	movs	r2, #40	@ 0x28
 80049de:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80049e2:	6878      	ldr	r0, [r7, #4]
 80049e4:	f7ff f9cb 	bl	8003d7e <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80049e8:	bf00      	nop
 80049ea:	3710      	adds	r7, #16
 80049ec:	46bd      	mov	sp, r7
 80049ee:	bd80      	pop	{r7, pc}

080049f0 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80049f0:	b480      	push	{r7}
 80049f2:	b083      	sub	sp, #12
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80049fc:	b29b      	uxth	r3, r3
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d011      	beq.n	8004a26 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a06:	781a      	ldrb	r2, [r3, #0]
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a12:	1c5a      	adds	r2, r3, #1
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a1c:	b29b      	uxth	r3, r3
 8004a1e:	3b01      	subs	r3, #1
 8004a20:	b29a      	uxth	r2, r3
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8004a26:	bf00      	nop
 8004a28:	370c      	adds	r7, #12
 8004a2a:	46bd      	mov	sp, r7
 8004a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a30:	4770      	bx	lr

08004a32 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8004a32:	b580      	push	{r7, lr}
 8004a34:	b084      	sub	sp, #16
 8004a36:	af00      	add	r7, sp, #0
 8004a38:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004a40:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a46:	b29b      	uxth	r3, r3
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d02c      	beq.n	8004aa6 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	691a      	ldr	r2, [r3, #16]
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a56:	b2d2      	uxtb	r2, r2
 8004a58:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a5e:	1c5a      	adds	r2, r3, #1
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a68:	b29b      	uxth	r3, r3
 8004a6a:	3b01      	subs	r3, #1
 8004a6c:	b29a      	uxth	r2, r3
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a76:	b29b      	uxth	r3, r3
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d114      	bne.n	8004aa6 <I2C_SlaveReceive_RXNE+0x74>
 8004a7c:	7bfb      	ldrb	r3, [r7, #15]
 8004a7e:	2b2a      	cmp	r3, #42	@ 0x2a
 8004a80:	d111      	bne.n	8004aa6 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	685a      	ldr	r2, [r3, #4]
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004a90:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	2222      	movs	r2, #34	@ 0x22
 8004a96:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	2228      	movs	r2, #40	@ 0x28
 8004a9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004aa0:	6878      	ldr	r0, [r7, #4]
 8004aa2:	f7ff f976 	bl	8003d92 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8004aa6:	bf00      	nop
 8004aa8:	3710      	adds	r7, #16
 8004aaa:	46bd      	mov	sp, r7
 8004aac:	bd80      	pop	{r7, pc}

08004aae <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8004aae:	b480      	push	{r7}
 8004ab0:	b083      	sub	sp, #12
 8004ab2:	af00      	add	r7, sp, #0
 8004ab4:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004aba:	b29b      	uxth	r3, r3
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d012      	beq.n	8004ae6 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	691a      	ldr	r2, [r3, #16]
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004aca:	b2d2      	uxtb	r2, r2
 8004acc:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ad2:	1c5a      	adds	r2, r3, #1
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004adc:	b29b      	uxth	r3, r3
 8004ade:	3b01      	subs	r3, #1
 8004ae0:	b29a      	uxth	r2, r3
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8004ae6:	bf00      	nop
 8004ae8:	370c      	adds	r7, #12
 8004aea:	46bd      	mov	sp, r7
 8004aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af0:	4770      	bx	lr

08004af2 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8004af2:	b580      	push	{r7, lr}
 8004af4:	b084      	sub	sp, #16
 8004af6:	af00      	add	r7, sp, #0
 8004af8:	6078      	str	r0, [r7, #4]
 8004afa:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8004afc:	2300      	movs	r3, #0
 8004afe:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004b06:	b2db      	uxtb	r3, r3
 8004b08:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004b0c:	2b28      	cmp	r3, #40	@ 0x28
 8004b0e:	d125      	bne.n	8004b5c <I2C_Slave_ADDR+0x6a>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	685a      	ldr	r2, [r3, #4]
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004b1e:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8004b20:	683b      	ldr	r3, [r7, #0]
 8004b22:	f003 0304 	and.w	r3, r3, #4
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d101      	bne.n	8004b2e <I2C_Slave_ADDR+0x3c>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8004b2a:	2301      	movs	r3, #1
 8004b2c:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8004b2e:	683b      	ldr	r3, [r7, #0]
 8004b30:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d103      	bne.n	8004b40 <I2C_Slave_ADDR+0x4e>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	68db      	ldr	r3, [r3, #12]
 8004b3c:	81bb      	strh	r3, [r7, #12]
 8004b3e:	e002      	b.n	8004b46 <I2C_Slave_ADDR+0x54>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	699b      	ldr	r3, [r3, #24]
 8004b44:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	2200      	movs	r2, #0
 8004b4a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8004b4e:	89ba      	ldrh	r2, [r7, #12]
 8004b50:	7bfb      	ldrb	r3, [r7, #15]
 8004b52:	4619      	mov	r1, r3
 8004b54:	6878      	ldr	r0, [r7, #4]
 8004b56:	f7ff f926 	bl	8003da6 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8004b5a:	e00e      	b.n	8004b7a <I2C_Slave_ADDR+0x88>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004b5c:	2300      	movs	r3, #0
 8004b5e:	60bb      	str	r3, [r7, #8]
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	695b      	ldr	r3, [r3, #20]
 8004b66:	60bb      	str	r3, [r7, #8]
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	699b      	ldr	r3, [r3, #24]
 8004b6e:	60bb      	str	r3, [r7, #8]
 8004b70:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	2200      	movs	r2, #0
 8004b76:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 8004b7a:	bf00      	nop
 8004b7c:	3710      	adds	r7, #16
 8004b7e:	46bd      	mov	sp, r7
 8004b80:	bd80      	pop	{r7, pc}
	...

08004b84 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8004b84:	b580      	push	{r7, lr}
 8004b86:	b084      	sub	sp, #16
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004b92:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	685a      	ldr	r2, [r3, #4]
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004ba2:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8004ba4:	2300      	movs	r3, #0
 8004ba6:	60bb      	str	r3, [r7, #8]
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	695b      	ldr	r3, [r3, #20]
 8004bae:	60bb      	str	r3, [r7, #8]
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	681a      	ldr	r2, [r3, #0]
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	f042 0201 	orr.w	r2, r2, #1
 8004bbe:	601a      	str	r2, [r3, #0]
 8004bc0:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	681a      	ldr	r2, [r3, #0]
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004bd0:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	685b      	ldr	r3, [r3, #4]
 8004bd8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004bdc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004be0:	d172      	bne.n	8004cc8 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004be2:	7bfb      	ldrb	r3, [r7, #15]
 8004be4:	2b22      	cmp	r3, #34	@ 0x22
 8004be6:	d002      	beq.n	8004bee <I2C_Slave_STOPF+0x6a>
 8004be8:	7bfb      	ldrb	r3, [r7, #15]
 8004bea:	2b2a      	cmp	r3, #42	@ 0x2a
 8004bec:	d135      	bne.n	8004c5a <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	685b      	ldr	r3, [r3, #4]
 8004bf6:	b29a      	uxth	r2, r3
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c00:	b29b      	uxth	r3, r3
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d005      	beq.n	8004c12 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c0a:	f043 0204 	orr.w	r2, r3, #4
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	685a      	ldr	r2, [r3, #4]
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004c20:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c26:	4618      	mov	r0, r3
 8004c28:	f7fe f8da 	bl	8002de0 <HAL_DMA_GetState>
 8004c2c:	4603      	mov	r3, r0
 8004c2e:	2b01      	cmp	r3, #1
 8004c30:	d049      	beq.n	8004cc6 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c36:	4a69      	ldr	r2, [pc, #420]	@ (8004ddc <I2C_Slave_STOPF+0x258>)
 8004c38:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c3e:	4618      	mov	r0, r3
 8004c40:	f7fd ff22 	bl	8002a88 <HAL_DMA_Abort_IT>
 8004c44:	4603      	mov	r3, r0
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d03d      	beq.n	8004cc6 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c4e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004c50:	687a      	ldr	r2, [r7, #4]
 8004c52:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004c54:	4610      	mov	r0, r2
 8004c56:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004c58:	e035      	b.n	8004cc6 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	685b      	ldr	r3, [r3, #4]
 8004c62:	b29a      	uxth	r2, r3
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c6c:	b29b      	uxth	r3, r3
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d005      	beq.n	8004c7e <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c76:	f043 0204 	orr.w	r2, r3, #4
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	685a      	ldr	r2, [r3, #4]
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004c8c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004c92:	4618      	mov	r0, r3
 8004c94:	f7fe f8a4 	bl	8002de0 <HAL_DMA_GetState>
 8004c98:	4603      	mov	r3, r0
 8004c9a:	2b01      	cmp	r3, #1
 8004c9c:	d014      	beq.n	8004cc8 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004ca2:	4a4e      	ldr	r2, [pc, #312]	@ (8004ddc <I2C_Slave_STOPF+0x258>)
 8004ca4:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004caa:	4618      	mov	r0, r3
 8004cac:	f7fd feec 	bl	8002a88 <HAL_DMA_Abort_IT>
 8004cb0:	4603      	mov	r3, r0
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d008      	beq.n	8004cc8 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004cba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004cbc:	687a      	ldr	r2, [r7, #4]
 8004cbe:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004cc0:	4610      	mov	r0, r2
 8004cc2:	4798      	blx	r3
 8004cc4:	e000      	b.n	8004cc8 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004cc6:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ccc:	b29b      	uxth	r3, r3
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d03e      	beq.n	8004d50 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	695b      	ldr	r3, [r3, #20]
 8004cd8:	f003 0304 	and.w	r3, r3, #4
 8004cdc:	2b04      	cmp	r3, #4
 8004cde:	d112      	bne.n	8004d06 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	691a      	ldr	r2, [r3, #16]
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cea:	b2d2      	uxtb	r2, r2
 8004cec:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cf2:	1c5a      	adds	r2, r3, #1
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004cfc:	b29b      	uxth	r3, r3
 8004cfe:	3b01      	subs	r3, #1
 8004d00:	b29a      	uxth	r2, r3
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	695b      	ldr	r3, [r3, #20]
 8004d0c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d10:	2b40      	cmp	r3, #64	@ 0x40
 8004d12:	d112      	bne.n	8004d3a <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	691a      	ldr	r2, [r3, #16]
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d1e:	b2d2      	uxtb	r2, r2
 8004d20:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d26:	1c5a      	adds	r2, r3, #1
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d30:	b29b      	uxth	r3, r3
 8004d32:	3b01      	subs	r3, #1
 8004d34:	b29a      	uxth	r2, r3
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if (hi2c->XferCount != 0U)
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d3e:	b29b      	uxth	r3, r3
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d005      	beq.n	8004d50 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d48:	f043 0204 	orr.w	r2, r3, #4
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d003      	beq.n	8004d60 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8004d58:	6878      	ldr	r0, [r7, #4]
 8004d5a:	f000 f843 	bl	8004de4 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8004d5e:	e039      	b.n	8004dd4 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8004d60:	7bfb      	ldrb	r3, [r7, #15]
 8004d62:	2b2a      	cmp	r3, #42	@ 0x2a
 8004d64:	d109      	bne.n	8004d7a <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	2200      	movs	r2, #0
 8004d6a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	2228      	movs	r2, #40	@ 0x28
 8004d70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004d74:	6878      	ldr	r0, [r7, #4]
 8004d76:	f7ff f80c 	bl	8003d92 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004d80:	b2db      	uxtb	r3, r3
 8004d82:	2b28      	cmp	r3, #40	@ 0x28
 8004d84:	d111      	bne.n	8004daa <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	4a15      	ldr	r2, [pc, #84]	@ (8004de0 <I2C_Slave_STOPF+0x25c>)
 8004d8a:	62da      	str	r2, [r3, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	2200      	movs	r2, #0
 8004d90:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	2220      	movs	r2, #32
 8004d96:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	2200      	movs	r2, #0
 8004d9e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8004da2:	6878      	ldr	r0, [r7, #4]
 8004da4:	f7ff f80d 	bl	8003dc2 <HAL_I2C_ListenCpltCallback>
}
 8004da8:	e014      	b.n	8004dd4 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004dae:	2b22      	cmp	r3, #34	@ 0x22
 8004db0:	d002      	beq.n	8004db8 <I2C_Slave_STOPF+0x234>
 8004db2:	7bfb      	ldrb	r3, [r7, #15]
 8004db4:	2b22      	cmp	r3, #34	@ 0x22
 8004db6:	d10d      	bne.n	8004dd4 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	2200      	movs	r2, #0
 8004dbc:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	2220      	movs	r2, #32
 8004dc2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	2200      	movs	r2, #0
 8004dca:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004dce:	6878      	ldr	r0, [r7, #4]
 8004dd0:	f7fe ffdf 	bl	8003d92 <HAL_I2C_SlaveRxCpltCallback>
}
 8004dd4:	bf00      	nop
 8004dd6:	3710      	adds	r7, #16
 8004dd8:	46bd      	mov	sp, r7
 8004dda:	bd80      	pop	{r7, pc}
 8004ddc:	08005281 	.word	0x08005281
 8004de0:	ffff0000 	.word	0xffff0000

08004de4 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8004de4:	b580      	push	{r7, lr}
 8004de6:	b084      	sub	sp, #16
 8004de8:	af00      	add	r7, sp, #0
 8004dea:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004df2:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004dfa:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004dfc:	7bbb      	ldrb	r3, [r7, #14]
 8004dfe:	2b10      	cmp	r3, #16
 8004e00:	d002      	beq.n	8004e08 <I2C_ITError+0x24>
 8004e02:	7bbb      	ldrb	r3, [r7, #14]
 8004e04:	2b40      	cmp	r3, #64	@ 0x40
 8004e06:	d10a      	bne.n	8004e1e <I2C_ITError+0x3a>
 8004e08:	7bfb      	ldrb	r3, [r7, #15]
 8004e0a:	2b22      	cmp	r3, #34	@ 0x22
 8004e0c:	d107      	bne.n	8004e1e <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	681a      	ldr	r2, [r3, #0]
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004e1c:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004e1e:	7bfb      	ldrb	r3, [r7, #15]
 8004e20:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004e24:	2b28      	cmp	r3, #40	@ 0x28
 8004e26:	d107      	bne.n	8004e38 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	2200      	movs	r2, #0
 8004e2c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	2228      	movs	r2, #40	@ 0x28
 8004e32:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8004e36:	e015      	b.n	8004e64 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	685b      	ldr	r3, [r3, #4]
 8004e3e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004e42:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004e46:	d00a      	beq.n	8004e5e <I2C_ITError+0x7a>
 8004e48:	7bfb      	ldrb	r3, [r7, #15]
 8004e4a:	2b60      	cmp	r3, #96	@ 0x60
 8004e4c:	d007      	beq.n	8004e5e <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	2220      	movs	r2, #32
 8004e52:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	2200      	movs	r2, #0
 8004e5a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	2200      	movs	r2, #0
 8004e62:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	685b      	ldr	r3, [r3, #4]
 8004e6a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004e6e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004e72:	d162      	bne.n	8004f3a <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	685a      	ldr	r2, [r3, #4]
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004e82:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004e88:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004e8c:	b2db      	uxtb	r3, r3
 8004e8e:	2b01      	cmp	r3, #1
 8004e90:	d020      	beq.n	8004ed4 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004e96:	4a6a      	ldr	r2, [pc, #424]	@ (8005040 <I2C_ITError+0x25c>)
 8004e98:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004e9e:	4618      	mov	r0, r3
 8004ea0:	f7fd fdf2 	bl	8002a88 <HAL_DMA_Abort_IT>
 8004ea4:	4603      	mov	r3, r0
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	f000 8089 	beq.w	8004fbe <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	681a      	ldr	r2, [r3, #0]
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	f022 0201 	bic.w	r2, r2, #1
 8004eba:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	2220      	movs	r2, #32
 8004ec0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004ec8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004eca:	687a      	ldr	r2, [r7, #4]
 8004ecc:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004ece:	4610      	mov	r0, r2
 8004ed0:	4798      	blx	r3
 8004ed2:	e074      	b.n	8004fbe <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ed8:	4a59      	ldr	r2, [pc, #356]	@ (8005040 <I2C_ITError+0x25c>)
 8004eda:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ee0:	4618      	mov	r0, r3
 8004ee2:	f7fd fdd1 	bl	8002a88 <HAL_DMA_Abort_IT>
 8004ee6:	4603      	mov	r3, r0
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d068      	beq.n	8004fbe <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	695b      	ldr	r3, [r3, #20]
 8004ef2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ef6:	2b40      	cmp	r3, #64	@ 0x40
 8004ef8:	d10b      	bne.n	8004f12 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	691a      	ldr	r2, [r3, #16]
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f04:	b2d2      	uxtb	r2, r2
 8004f06:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f0c:	1c5a      	adds	r2, r3, #1
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	681a      	ldr	r2, [r3, #0]
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	f022 0201 	bic.w	r2, r2, #1
 8004f20:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	2220      	movs	r2, #32
 8004f26:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f2e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004f30:	687a      	ldr	r2, [r7, #4]
 8004f32:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004f34:	4610      	mov	r0, r2
 8004f36:	4798      	blx	r3
 8004f38:	e041      	b.n	8004fbe <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004f40:	b2db      	uxtb	r3, r3
 8004f42:	2b60      	cmp	r3, #96	@ 0x60
 8004f44:	d125      	bne.n	8004f92 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	2220      	movs	r2, #32
 8004f4a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	2200      	movs	r2, #0
 8004f52:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	695b      	ldr	r3, [r3, #20]
 8004f5a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f5e:	2b40      	cmp	r3, #64	@ 0x40
 8004f60:	d10b      	bne.n	8004f7a <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	691a      	ldr	r2, [r3, #16]
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f6c:	b2d2      	uxtb	r2, r2
 8004f6e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f74:	1c5a      	adds	r2, r3, #1
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	681a      	ldr	r2, [r3, #0]
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	f022 0201 	bic.w	r2, r2, #1
 8004f88:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004f8a:	6878      	ldr	r0, [r7, #4]
 8004f8c:	f7fe ff41 	bl	8003e12 <HAL_I2C_AbortCpltCallback>
 8004f90:	e015      	b.n	8004fbe <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	695b      	ldr	r3, [r3, #20]
 8004f98:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f9c:	2b40      	cmp	r3, #64	@ 0x40
 8004f9e:	d10b      	bne.n	8004fb8 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	691a      	ldr	r2, [r3, #16]
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004faa:	b2d2      	uxtb	r2, r2
 8004fac:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fb2:	1c5a      	adds	r2, r3, #1
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8004fb8:	6878      	ldr	r0, [r7, #4]
 8004fba:	f7fe ff20 	bl	8003dfe <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fc2:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004fc4:	68bb      	ldr	r3, [r7, #8]
 8004fc6:	f003 0301 	and.w	r3, r3, #1
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d10e      	bne.n	8004fec <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8004fce:	68bb      	ldr	r3, [r7, #8]
 8004fd0:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d109      	bne.n	8004fec <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004fd8:	68bb      	ldr	r3, [r7, #8]
 8004fda:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d104      	bne.n	8004fec <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8004fe2:	68bb      	ldr	r3, [r7, #8]
 8004fe4:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d007      	beq.n	8004ffc <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	685a      	ldr	r2, [r3, #4]
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004ffa:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005002:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005008:	f003 0304 	and.w	r3, r3, #4
 800500c:	2b04      	cmp	r3, #4
 800500e:	d113      	bne.n	8005038 <I2C_ITError+0x254>
 8005010:	7bfb      	ldrb	r3, [r7, #15]
 8005012:	2b28      	cmp	r3, #40	@ 0x28
 8005014:	d110      	bne.n	8005038 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	4a0a      	ldr	r2, [pc, #40]	@ (8005044 <I2C_ITError+0x260>)
 800501a:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	2200      	movs	r2, #0
 8005020:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	2220      	movs	r2, #32
 8005026:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	2200      	movs	r2, #0
 800502e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8005032:	6878      	ldr	r0, [r7, #4]
 8005034:	f7fe fec5 	bl	8003dc2 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005038:	bf00      	nop
 800503a:	3710      	adds	r7, #16
 800503c:	46bd      	mov	sp, r7
 800503e:	bd80      	pop	{r7, pc}
 8005040:	08005281 	.word	0x08005281
 8005044:	ffff0000 	.word	0xffff0000

08005048 <I2C_DMAXferCplt>:
  * @brief  DMA I2C process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 8005048:	b580      	push	{r7, lr}
 800504a:	b086      	sub	sp, #24
 800504c:	af00      	add	r7, sp, #0
 800504e:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005054:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005056:	697b      	ldr	r3, [r7, #20]
 8005058:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800505c:	74fb      	strb	r3, [r7, #19]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800505e:	697b      	ldr	r3, [r7, #20]
 8005060:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005064:	74bb      	strb	r3, [r7, #18]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8005066:	697b      	ldr	r3, [r7, #20]
 8005068:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800506a:	60fb      	str	r3, [r7, #12]

  /* Disable EVT and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800506c:	697b      	ldr	r3, [r7, #20]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	685a      	ldr	r2, [r3, #4]
 8005072:	697b      	ldr	r3, [r7, #20]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 800507a:	605a      	str	r2, [r3, #4]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800507c:	697b      	ldr	r3, [r7, #20]
 800507e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005080:	2b00      	cmp	r3, #0
 8005082:	d003      	beq.n	800508c <I2C_DMAXferCplt+0x44>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8005084:	697b      	ldr	r3, [r7, #20]
 8005086:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005088:	2200      	movs	r2, #0
 800508a:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 800508c:	697b      	ldr	r3, [r7, #20]
 800508e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005090:	2b00      	cmp	r3, #0
 8005092:	d003      	beq.n	800509c <I2C_DMAXferCplt+0x54>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8005094:	697b      	ldr	r3, [r7, #20]
 8005096:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005098:	2200      	movs	r2, #0
 800509a:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  if ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_TX) == (uint32_t)HAL_I2C_STATE_BUSY_TX) || ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_RX) == (uint32_t)HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE)))
 800509c:	7cfb      	ldrb	r3, [r7, #19]
 800509e:	f003 0321 	and.w	r3, r3, #33	@ 0x21
 80050a2:	2b21      	cmp	r3, #33	@ 0x21
 80050a4:	d007      	beq.n	80050b6 <I2C_DMAXferCplt+0x6e>
 80050a6:	7cfb      	ldrb	r3, [r7, #19]
 80050a8:	f003 0322 	and.w	r3, r3, #34	@ 0x22
 80050ac:	2b22      	cmp	r3, #34	@ 0x22
 80050ae:	d131      	bne.n	8005114 <I2C_DMAXferCplt+0xcc>
 80050b0:	7cbb      	ldrb	r3, [r7, #18]
 80050b2:	2b20      	cmp	r3, #32
 80050b4:	d12e      	bne.n	8005114 <I2C_DMAXferCplt+0xcc>
  {
    /* Disable DMA Request */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80050b6:	697b      	ldr	r3, [r7, #20]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	685a      	ldr	r2, [r3, #4]
 80050bc:	697b      	ldr	r3, [r7, #20]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80050c4:	605a      	str	r2, [r3, #4]

    hi2c->XferCount = 0U;
 80050c6:	697b      	ldr	r3, [r7, #20]
 80050c8:	2200      	movs	r2, #0
 80050ca:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80050cc:	7cfb      	ldrb	r3, [r7, #19]
 80050ce:	2b29      	cmp	r3, #41	@ 0x29
 80050d0:	d10a      	bne.n	80050e8 <I2C_DMAXferCplt+0xa0>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80050d2:	697b      	ldr	r3, [r7, #20]
 80050d4:	2221      	movs	r2, #33	@ 0x21
 80050d6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80050d8:	697b      	ldr	r3, [r7, #20]
 80050da:	2228      	movs	r2, #40	@ 0x28
 80050dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80050e0:	6978      	ldr	r0, [r7, #20]
 80050e2:	f7fe fe4c 	bl	8003d7e <HAL_I2C_SlaveTxCpltCallback>
 80050e6:	e00c      	b.n	8005102 <I2C_DMAXferCplt+0xba>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80050e8:	7cfb      	ldrb	r3, [r7, #19]
 80050ea:	2b2a      	cmp	r3, #42	@ 0x2a
 80050ec:	d109      	bne.n	8005102 <I2C_DMAXferCplt+0xba>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80050ee:	697b      	ldr	r3, [r7, #20]
 80050f0:	2222      	movs	r2, #34	@ 0x22
 80050f2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80050f4:	697b      	ldr	r3, [r7, #20]
 80050f6:	2228      	movs	r2, #40	@ 0x28
 80050f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80050fc:	6978      	ldr	r0, [r7, #20]
 80050fe:	f7fe fe48 	bl	8003d92 <HAL_I2C_SlaveRxCpltCallback>
    {
      /* Do nothing */
    }

    /* Enable EVT and ERR interrupt to treat end of transfer in IRQ handler */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8005102:	697b      	ldr	r3, [r7, #20]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	685a      	ldr	r2, [r3, #4]
 8005108:	697b      	ldr	r3, [r7, #20]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8005110:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8005112:	e074      	b.n	80051fe <I2C_DMAXferCplt+0x1b6>
  else if (hi2c->Mode != HAL_I2C_MODE_NONE)
 8005114:	697b      	ldr	r3, [r7, #20]
 8005116:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800511a:	b2db      	uxtb	r3, r3
 800511c:	2b00      	cmp	r3, #0
 800511e:	d06e      	beq.n	80051fe <I2C_DMAXferCplt+0x1b6>
    if (hi2c->XferCount == (uint16_t)1)
 8005120:	697b      	ldr	r3, [r7, #20]
 8005122:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005124:	b29b      	uxth	r3, r3
 8005126:	2b01      	cmp	r3, #1
 8005128:	d107      	bne.n	800513a <I2C_DMAXferCplt+0xf2>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800512a:	697b      	ldr	r3, [r7, #20]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	681a      	ldr	r2, [r3, #0]
 8005130:	697b      	ldr	r3, [r7, #20]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005138:	601a      	str	r2, [r3, #0]
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800513a:	697b      	ldr	r3, [r7, #20]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	685a      	ldr	r2, [r3, #4]
 8005140:	697b      	ldr	r3, [r7, #20]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8005148:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_OTHER_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005150:	d009      	beq.n	8005166 <I2C_DMAXferCplt+0x11e>
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	2b08      	cmp	r3, #8
 8005156:	d006      	beq.n	8005166 <I2C_DMAXferCplt+0x11e>
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 800515e:	d002      	beq.n	8005166 <I2C_DMAXferCplt+0x11e>
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	2b20      	cmp	r3, #32
 8005164:	d107      	bne.n	8005176 <I2C_DMAXferCplt+0x12e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005166:	697b      	ldr	r3, [r7, #20]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	681a      	ldr	r2, [r3, #0]
 800516c:	697b      	ldr	r3, [r7, #20]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005174:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8005176:	697b      	ldr	r3, [r7, #20]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	685a      	ldr	r2, [r3, #4]
 800517c:	697b      	ldr	r3, [r7, #20]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8005184:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005186:	697b      	ldr	r3, [r7, #20]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	685a      	ldr	r2, [r3, #4]
 800518c:	697b      	ldr	r3, [r7, #20]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005194:	605a      	str	r2, [r3, #4]
    hi2c->XferCount = 0U;
 8005196:	697b      	ldr	r3, [r7, #20]
 8005198:	2200      	movs	r2, #0
 800519a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800519c:	697b      	ldr	r3, [r7, #20]
 800519e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d003      	beq.n	80051ac <I2C_DMAXferCplt+0x164>
      HAL_I2C_ErrorCallback(hi2c);
 80051a4:	6978      	ldr	r0, [r7, #20]
 80051a6:	f7fe fe2a 	bl	8003dfe <HAL_I2C_ErrorCallback>
}
 80051aa:	e028      	b.n	80051fe <I2C_DMAXferCplt+0x1b6>
      hi2c->State = HAL_I2C_STATE_READY;
 80051ac:	697b      	ldr	r3, [r7, #20]
 80051ae:	2220      	movs	r2, #32
 80051b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80051b4:	697b      	ldr	r3, [r7, #20]
 80051b6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80051ba:	b2db      	uxtb	r3, r3
 80051bc:	2b40      	cmp	r3, #64	@ 0x40
 80051be:	d10a      	bne.n	80051d6 <I2C_DMAXferCplt+0x18e>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80051c0:	697b      	ldr	r3, [r7, #20]
 80051c2:	2200      	movs	r2, #0
 80051c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 80051c8:	697b      	ldr	r3, [r7, #20]
 80051ca:	2200      	movs	r2, #0
 80051cc:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 80051ce:	6978      	ldr	r0, [r7, #20]
 80051d0:	f7fe fe0b 	bl	8003dea <HAL_I2C_MemRxCpltCallback>
}
 80051d4:	e013      	b.n	80051fe <I2C_DMAXferCplt+0x1b6>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80051d6:	697b      	ldr	r3, [r7, #20]
 80051d8:	2200      	movs	r2, #0
 80051da:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	2b08      	cmp	r3, #8
 80051e2:	d002      	beq.n	80051ea <I2C_DMAXferCplt+0x1a2>
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	2b20      	cmp	r3, #32
 80051e8:	d103      	bne.n	80051f2 <I2C_DMAXferCplt+0x1aa>
          hi2c->PreviousState = I2C_STATE_NONE;
 80051ea:	697b      	ldr	r3, [r7, #20]
 80051ec:	2200      	movs	r2, #0
 80051ee:	631a      	str	r2, [r3, #48]	@ 0x30
 80051f0:	e002      	b.n	80051f8 <I2C_DMAXferCplt+0x1b0>
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80051f2:	697b      	ldr	r3, [r7, #20]
 80051f4:	2212      	movs	r2, #18
 80051f6:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 80051f8:	6978      	ldr	r0, [r7, #20]
 80051fa:	f7fc fb2b 	bl	8001854 <HAL_I2C_MasterRxCpltCallback>
}
 80051fe:	bf00      	nop
 8005200:	3718      	adds	r7, #24
 8005202:	46bd      	mov	sp, r7
 8005204:	bd80      	pop	{r7, pc}

08005206 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 8005206:	b580      	push	{r7, lr}
 8005208:	b084      	sub	sp, #16
 800520a:	af00      	add	r7, sp, #0
 800520c:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005212:	60fb      	str	r3, [r7, #12]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005218:	2b00      	cmp	r3, #0
 800521a:	d003      	beq.n	8005224 <I2C_DMAError+0x1e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005220:	2200      	movs	r2, #0
 8005222:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005228:	2b00      	cmp	r3, #0
 800522a:	d003      	beq.n	8005234 <I2C_DMAError+0x2e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005230:	2200      	movs	r2, #0
 8005232:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8005234:	6878      	ldr	r0, [r7, #4]
 8005236:	f7fd fde1 	bl	8002dfc <HAL_DMA_GetError>
 800523a:	4603      	mov	r3, r0
 800523c:	2b02      	cmp	r3, #2
 800523e:	d01b      	beq.n	8005278 <I2C_DMAError+0x72>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	681a      	ldr	r2, [r3, #0]
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800524e:	601a      	str	r2, [r3, #0]

    hi2c->XferCount = 0U;
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	2200      	movs	r2, #0
 8005254:	855a      	strh	r2, [r3, #42]	@ 0x2a

    hi2c->State = HAL_I2C_STATE_READY;
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	2220      	movs	r2, #32
 800525a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	2200      	movs	r2, #0
 8005262:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800526a:	f043 0210 	orr.w	r2, r3, #16
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	641a      	str	r2, [r3, #64]	@ 0x40

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8005272:	68f8      	ldr	r0, [r7, #12]
 8005274:	f7fe fdc3 	bl	8003dfe <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005278:	bf00      	nop
 800527a:	3710      	adds	r7, #16
 800527c:	46bd      	mov	sp, r7
 800527e:	bd80      	pop	{r7, pc}

08005280 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8005280:	b580      	push	{r7, lr}
 8005282:	b086      	sub	sp, #24
 8005284:	af00      	add	r7, sp, #0
 8005286:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005288:	2300      	movs	r3, #0
 800528a:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005290:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005292:	697b      	ldr	r3, [r7, #20]
 8005294:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005298:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800529a:	4b4b      	ldr	r3, [pc, #300]	@ (80053c8 <I2C_DMAAbort+0x148>)
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	08db      	lsrs	r3, r3, #3
 80052a0:	4a4a      	ldr	r2, [pc, #296]	@ (80053cc <I2C_DMAAbort+0x14c>)
 80052a2:	fba2 2303 	umull	r2, r3, r2, r3
 80052a6:	0a1a      	lsrs	r2, r3, #8
 80052a8:	4613      	mov	r3, r2
 80052aa:	009b      	lsls	r3, r3, #2
 80052ac:	4413      	add	r3, r2
 80052ae:	00da      	lsls	r2, r3, #3
 80052b0:	1ad3      	subs	r3, r2, r3
 80052b2:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d106      	bne.n	80052c8 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80052ba:	697b      	ldr	r3, [r7, #20]
 80052bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052be:	f043 0220 	orr.w	r2, r3, #32
 80052c2:	697b      	ldr	r3, [r7, #20]
 80052c4:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 80052c6:	e00a      	b.n	80052de <I2C_DMAAbort+0x5e>
    }
    count--;
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	3b01      	subs	r3, #1
 80052cc:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80052ce:	697b      	ldr	r3, [r7, #20]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80052d8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80052dc:	d0ea      	beq.n	80052b4 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80052de:	697b      	ldr	r3, [r7, #20]
 80052e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d003      	beq.n	80052ee <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80052e6:	697b      	ldr	r3, [r7, #20]
 80052e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80052ea:	2200      	movs	r2, #0
 80052ec:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 80052ee:	697b      	ldr	r3, [r7, #20]
 80052f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d003      	beq.n	80052fe <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80052f6:	697b      	ldr	r3, [r7, #20]
 80052f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80052fa:	2200      	movs	r2, #0
 80052fc:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80052fe:	697b      	ldr	r3, [r7, #20]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	681a      	ldr	r2, [r3, #0]
 8005304:	697b      	ldr	r3, [r7, #20]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800530c:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 800530e:	697b      	ldr	r3, [r7, #20]
 8005310:	2200      	movs	r2, #0
 8005312:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8005314:	697b      	ldr	r3, [r7, #20]
 8005316:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005318:	2b00      	cmp	r3, #0
 800531a:	d003      	beq.n	8005324 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800531c:	697b      	ldr	r3, [r7, #20]
 800531e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005320:	2200      	movs	r2, #0
 8005322:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 8005324:	697b      	ldr	r3, [r7, #20]
 8005326:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005328:	2b00      	cmp	r3, #0
 800532a:	d003      	beq.n	8005334 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800532c:	697b      	ldr	r3, [r7, #20]
 800532e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005330:	2200      	movs	r2, #0
 8005332:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8005334:	697b      	ldr	r3, [r7, #20]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	681a      	ldr	r2, [r3, #0]
 800533a:	697b      	ldr	r3, [r7, #20]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	f022 0201 	bic.w	r2, r2, #1
 8005342:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005344:	697b      	ldr	r3, [r7, #20]
 8005346:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800534a:	b2db      	uxtb	r3, r3
 800534c:	2b60      	cmp	r3, #96	@ 0x60
 800534e:	d10e      	bne.n	800536e <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8005350:	697b      	ldr	r3, [r7, #20]
 8005352:	2220      	movs	r2, #32
 8005354:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005358:	697b      	ldr	r3, [r7, #20]
 800535a:	2200      	movs	r2, #0
 800535c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8005360:	697b      	ldr	r3, [r7, #20]
 8005362:	2200      	movs	r2, #0
 8005364:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8005366:	6978      	ldr	r0, [r7, #20]
 8005368:	f7fe fd53 	bl	8003e12 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800536c:	e027      	b.n	80053be <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800536e:	7cfb      	ldrb	r3, [r7, #19]
 8005370:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8005374:	2b28      	cmp	r3, #40	@ 0x28
 8005376:	d117      	bne.n	80053a8 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8005378:	697b      	ldr	r3, [r7, #20]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	681a      	ldr	r2, [r3, #0]
 800537e:	697b      	ldr	r3, [r7, #20]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	f042 0201 	orr.w	r2, r2, #1
 8005386:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005388:	697b      	ldr	r3, [r7, #20]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	681a      	ldr	r2, [r3, #0]
 800538e:	697b      	ldr	r3, [r7, #20]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005396:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8005398:	697b      	ldr	r3, [r7, #20]
 800539a:	2200      	movs	r2, #0
 800539c:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800539e:	697b      	ldr	r3, [r7, #20]
 80053a0:	2228      	movs	r2, #40	@ 0x28
 80053a2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 80053a6:	e007      	b.n	80053b8 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 80053a8:	697b      	ldr	r3, [r7, #20]
 80053aa:	2220      	movs	r2, #32
 80053ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80053b0:	697b      	ldr	r3, [r7, #20]
 80053b2:	2200      	movs	r2, #0
 80053b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 80053b8:	6978      	ldr	r0, [r7, #20]
 80053ba:	f7fe fd20 	bl	8003dfe <HAL_I2C_ErrorCallback>
}
 80053be:	bf00      	nop
 80053c0:	3718      	adds	r7, #24
 80053c2:	46bd      	mov	sp, r7
 80053c4:	bd80      	pop	{r7, pc}
 80053c6:	bf00      	nop
 80053c8:	20000004 	.word	0x20000004
 80053cc:	14f8b589 	.word	0x14f8b589

080053d0 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 80053d0:	b480      	push	{r7}
 80053d2:	b085      	sub	sp, #20
 80053d4:	af00      	add	r7, sp, #0
 80053d6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80053d8:	2300      	movs	r3, #0
 80053da:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 80053dc:	4b13      	ldr	r3, [pc, #76]	@ (800542c <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	08db      	lsrs	r3, r3, #3
 80053e2:	4a13      	ldr	r2, [pc, #76]	@ (8005430 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 80053e4:	fba2 2303 	umull	r2, r3, r2, r3
 80053e8:	0a1a      	lsrs	r2, r3, #8
 80053ea:	4613      	mov	r3, r2
 80053ec:	009b      	lsls	r3, r3, #2
 80053ee:	4413      	add	r3, r2
 80053f0:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	3b01      	subs	r3, #1
 80053f6:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d107      	bne.n	800540e <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005402:	f043 0220 	orr.w	r2, r3, #32
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	641a      	str	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 800540a:	2301      	movs	r3, #1
 800540c:	e008      	b.n	8005420 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005418:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800541c:	d0e9      	beq.n	80053f2 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 800541e:	2300      	movs	r3, #0
}
 8005420:	4618      	mov	r0, r3
 8005422:	3714      	adds	r7, #20
 8005424:	46bd      	mov	sp, r7
 8005426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800542a:	4770      	bx	lr
 800542c:	20000004 	.word	0x20000004
 8005430:	14f8b589 	.word	0x14f8b589

08005434 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8005434:	b480      	push	{r7}
 8005436:	b083      	sub	sp, #12
 8005438:	af00      	add	r7, sp, #0
 800543a:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005440:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8005444:	d103      	bne.n	800544e <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	2201      	movs	r2, #1
 800544a:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 800544c:	e007      	b.n	800545e <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005452:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8005456:	d102      	bne.n	800545e <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	2208      	movs	r2, #8
 800545c:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 800545e:	bf00      	nop
 8005460:	370c      	adds	r7, #12
 8005462:	46bd      	mov	sp, r7
 8005464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005468:	4770      	bx	lr
	...

0800546c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800546c:	b580      	push	{r7, lr}
 800546e:	b086      	sub	sp, #24
 8005470:	af00      	add	r7, sp, #0
 8005472:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	2b00      	cmp	r3, #0
 8005478:	d101      	bne.n	800547e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800547a:	2301      	movs	r3, #1
 800547c:	e267      	b.n	800594e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	f003 0301 	and.w	r3, r3, #1
 8005486:	2b00      	cmp	r3, #0
 8005488:	d075      	beq.n	8005576 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800548a:	4b88      	ldr	r3, [pc, #544]	@ (80056ac <HAL_RCC_OscConfig+0x240>)
 800548c:	689b      	ldr	r3, [r3, #8]
 800548e:	f003 030c 	and.w	r3, r3, #12
 8005492:	2b04      	cmp	r3, #4
 8005494:	d00c      	beq.n	80054b0 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005496:	4b85      	ldr	r3, [pc, #532]	@ (80056ac <HAL_RCC_OscConfig+0x240>)
 8005498:	689b      	ldr	r3, [r3, #8]
 800549a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800549e:	2b08      	cmp	r3, #8
 80054a0:	d112      	bne.n	80054c8 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80054a2:	4b82      	ldr	r3, [pc, #520]	@ (80056ac <HAL_RCC_OscConfig+0x240>)
 80054a4:	685b      	ldr	r3, [r3, #4]
 80054a6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80054aa:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80054ae:	d10b      	bne.n	80054c8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80054b0:	4b7e      	ldr	r3, [pc, #504]	@ (80056ac <HAL_RCC_OscConfig+0x240>)
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d05b      	beq.n	8005574 <HAL_RCC_OscConfig+0x108>
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	685b      	ldr	r3, [r3, #4]
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d157      	bne.n	8005574 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80054c4:	2301      	movs	r3, #1
 80054c6:	e242      	b.n	800594e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	685b      	ldr	r3, [r3, #4]
 80054cc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80054d0:	d106      	bne.n	80054e0 <HAL_RCC_OscConfig+0x74>
 80054d2:	4b76      	ldr	r3, [pc, #472]	@ (80056ac <HAL_RCC_OscConfig+0x240>)
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	4a75      	ldr	r2, [pc, #468]	@ (80056ac <HAL_RCC_OscConfig+0x240>)
 80054d8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80054dc:	6013      	str	r3, [r2, #0]
 80054de:	e01d      	b.n	800551c <HAL_RCC_OscConfig+0xb0>
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	685b      	ldr	r3, [r3, #4]
 80054e4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80054e8:	d10c      	bne.n	8005504 <HAL_RCC_OscConfig+0x98>
 80054ea:	4b70      	ldr	r3, [pc, #448]	@ (80056ac <HAL_RCC_OscConfig+0x240>)
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	4a6f      	ldr	r2, [pc, #444]	@ (80056ac <HAL_RCC_OscConfig+0x240>)
 80054f0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80054f4:	6013      	str	r3, [r2, #0]
 80054f6:	4b6d      	ldr	r3, [pc, #436]	@ (80056ac <HAL_RCC_OscConfig+0x240>)
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	4a6c      	ldr	r2, [pc, #432]	@ (80056ac <HAL_RCC_OscConfig+0x240>)
 80054fc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005500:	6013      	str	r3, [r2, #0]
 8005502:	e00b      	b.n	800551c <HAL_RCC_OscConfig+0xb0>
 8005504:	4b69      	ldr	r3, [pc, #420]	@ (80056ac <HAL_RCC_OscConfig+0x240>)
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	4a68      	ldr	r2, [pc, #416]	@ (80056ac <HAL_RCC_OscConfig+0x240>)
 800550a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800550e:	6013      	str	r3, [r2, #0]
 8005510:	4b66      	ldr	r3, [pc, #408]	@ (80056ac <HAL_RCC_OscConfig+0x240>)
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	4a65      	ldr	r2, [pc, #404]	@ (80056ac <HAL_RCC_OscConfig+0x240>)
 8005516:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800551a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	685b      	ldr	r3, [r3, #4]
 8005520:	2b00      	cmp	r3, #0
 8005522:	d013      	beq.n	800554c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005524:	f7fc fff8 	bl	8002518 <HAL_GetTick>
 8005528:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800552a:	e008      	b.n	800553e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800552c:	f7fc fff4 	bl	8002518 <HAL_GetTick>
 8005530:	4602      	mov	r2, r0
 8005532:	693b      	ldr	r3, [r7, #16]
 8005534:	1ad3      	subs	r3, r2, r3
 8005536:	2b64      	cmp	r3, #100	@ 0x64
 8005538:	d901      	bls.n	800553e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800553a:	2303      	movs	r3, #3
 800553c:	e207      	b.n	800594e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800553e:	4b5b      	ldr	r3, [pc, #364]	@ (80056ac <HAL_RCC_OscConfig+0x240>)
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005546:	2b00      	cmp	r3, #0
 8005548:	d0f0      	beq.n	800552c <HAL_RCC_OscConfig+0xc0>
 800554a:	e014      	b.n	8005576 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800554c:	f7fc ffe4 	bl	8002518 <HAL_GetTick>
 8005550:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005552:	e008      	b.n	8005566 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005554:	f7fc ffe0 	bl	8002518 <HAL_GetTick>
 8005558:	4602      	mov	r2, r0
 800555a:	693b      	ldr	r3, [r7, #16]
 800555c:	1ad3      	subs	r3, r2, r3
 800555e:	2b64      	cmp	r3, #100	@ 0x64
 8005560:	d901      	bls.n	8005566 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005562:	2303      	movs	r3, #3
 8005564:	e1f3      	b.n	800594e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005566:	4b51      	ldr	r3, [pc, #324]	@ (80056ac <HAL_RCC_OscConfig+0x240>)
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800556e:	2b00      	cmp	r3, #0
 8005570:	d1f0      	bne.n	8005554 <HAL_RCC_OscConfig+0xe8>
 8005572:	e000      	b.n	8005576 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005574:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	f003 0302 	and.w	r3, r3, #2
 800557e:	2b00      	cmp	r3, #0
 8005580:	d063      	beq.n	800564a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8005582:	4b4a      	ldr	r3, [pc, #296]	@ (80056ac <HAL_RCC_OscConfig+0x240>)
 8005584:	689b      	ldr	r3, [r3, #8]
 8005586:	f003 030c 	and.w	r3, r3, #12
 800558a:	2b00      	cmp	r3, #0
 800558c:	d00b      	beq.n	80055a6 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800558e:	4b47      	ldr	r3, [pc, #284]	@ (80056ac <HAL_RCC_OscConfig+0x240>)
 8005590:	689b      	ldr	r3, [r3, #8]
 8005592:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8005596:	2b08      	cmp	r3, #8
 8005598:	d11c      	bne.n	80055d4 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800559a:	4b44      	ldr	r3, [pc, #272]	@ (80056ac <HAL_RCC_OscConfig+0x240>)
 800559c:	685b      	ldr	r3, [r3, #4]
 800559e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d116      	bne.n	80055d4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80055a6:	4b41      	ldr	r3, [pc, #260]	@ (80056ac <HAL_RCC_OscConfig+0x240>)
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	f003 0302 	and.w	r3, r3, #2
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d005      	beq.n	80055be <HAL_RCC_OscConfig+0x152>
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	68db      	ldr	r3, [r3, #12]
 80055b6:	2b01      	cmp	r3, #1
 80055b8:	d001      	beq.n	80055be <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80055ba:	2301      	movs	r3, #1
 80055bc:	e1c7      	b.n	800594e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80055be:	4b3b      	ldr	r3, [pc, #236]	@ (80056ac <HAL_RCC_OscConfig+0x240>)
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	691b      	ldr	r3, [r3, #16]
 80055ca:	00db      	lsls	r3, r3, #3
 80055cc:	4937      	ldr	r1, [pc, #220]	@ (80056ac <HAL_RCC_OscConfig+0x240>)
 80055ce:	4313      	orrs	r3, r2
 80055d0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80055d2:	e03a      	b.n	800564a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	68db      	ldr	r3, [r3, #12]
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d020      	beq.n	800561e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80055dc:	4b34      	ldr	r3, [pc, #208]	@ (80056b0 <HAL_RCC_OscConfig+0x244>)
 80055de:	2201      	movs	r2, #1
 80055e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055e2:	f7fc ff99 	bl	8002518 <HAL_GetTick>
 80055e6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80055e8:	e008      	b.n	80055fc <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80055ea:	f7fc ff95 	bl	8002518 <HAL_GetTick>
 80055ee:	4602      	mov	r2, r0
 80055f0:	693b      	ldr	r3, [r7, #16]
 80055f2:	1ad3      	subs	r3, r2, r3
 80055f4:	2b02      	cmp	r3, #2
 80055f6:	d901      	bls.n	80055fc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80055f8:	2303      	movs	r3, #3
 80055fa:	e1a8      	b.n	800594e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80055fc:	4b2b      	ldr	r3, [pc, #172]	@ (80056ac <HAL_RCC_OscConfig+0x240>)
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	f003 0302 	and.w	r3, r3, #2
 8005604:	2b00      	cmp	r3, #0
 8005606:	d0f0      	beq.n	80055ea <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005608:	4b28      	ldr	r3, [pc, #160]	@ (80056ac <HAL_RCC_OscConfig+0x240>)
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	691b      	ldr	r3, [r3, #16]
 8005614:	00db      	lsls	r3, r3, #3
 8005616:	4925      	ldr	r1, [pc, #148]	@ (80056ac <HAL_RCC_OscConfig+0x240>)
 8005618:	4313      	orrs	r3, r2
 800561a:	600b      	str	r3, [r1, #0]
 800561c:	e015      	b.n	800564a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800561e:	4b24      	ldr	r3, [pc, #144]	@ (80056b0 <HAL_RCC_OscConfig+0x244>)
 8005620:	2200      	movs	r2, #0
 8005622:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005624:	f7fc ff78 	bl	8002518 <HAL_GetTick>
 8005628:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800562a:	e008      	b.n	800563e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800562c:	f7fc ff74 	bl	8002518 <HAL_GetTick>
 8005630:	4602      	mov	r2, r0
 8005632:	693b      	ldr	r3, [r7, #16]
 8005634:	1ad3      	subs	r3, r2, r3
 8005636:	2b02      	cmp	r3, #2
 8005638:	d901      	bls.n	800563e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800563a:	2303      	movs	r3, #3
 800563c:	e187      	b.n	800594e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800563e:	4b1b      	ldr	r3, [pc, #108]	@ (80056ac <HAL_RCC_OscConfig+0x240>)
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	f003 0302 	and.w	r3, r3, #2
 8005646:	2b00      	cmp	r3, #0
 8005648:	d1f0      	bne.n	800562c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	f003 0308 	and.w	r3, r3, #8
 8005652:	2b00      	cmp	r3, #0
 8005654:	d036      	beq.n	80056c4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	695b      	ldr	r3, [r3, #20]
 800565a:	2b00      	cmp	r3, #0
 800565c:	d016      	beq.n	800568c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800565e:	4b15      	ldr	r3, [pc, #84]	@ (80056b4 <HAL_RCC_OscConfig+0x248>)
 8005660:	2201      	movs	r2, #1
 8005662:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005664:	f7fc ff58 	bl	8002518 <HAL_GetTick>
 8005668:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800566a:	e008      	b.n	800567e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800566c:	f7fc ff54 	bl	8002518 <HAL_GetTick>
 8005670:	4602      	mov	r2, r0
 8005672:	693b      	ldr	r3, [r7, #16]
 8005674:	1ad3      	subs	r3, r2, r3
 8005676:	2b02      	cmp	r3, #2
 8005678:	d901      	bls.n	800567e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800567a:	2303      	movs	r3, #3
 800567c:	e167      	b.n	800594e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800567e:	4b0b      	ldr	r3, [pc, #44]	@ (80056ac <HAL_RCC_OscConfig+0x240>)
 8005680:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005682:	f003 0302 	and.w	r3, r3, #2
 8005686:	2b00      	cmp	r3, #0
 8005688:	d0f0      	beq.n	800566c <HAL_RCC_OscConfig+0x200>
 800568a:	e01b      	b.n	80056c4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800568c:	4b09      	ldr	r3, [pc, #36]	@ (80056b4 <HAL_RCC_OscConfig+0x248>)
 800568e:	2200      	movs	r2, #0
 8005690:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005692:	f7fc ff41 	bl	8002518 <HAL_GetTick>
 8005696:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005698:	e00e      	b.n	80056b8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800569a:	f7fc ff3d 	bl	8002518 <HAL_GetTick>
 800569e:	4602      	mov	r2, r0
 80056a0:	693b      	ldr	r3, [r7, #16]
 80056a2:	1ad3      	subs	r3, r2, r3
 80056a4:	2b02      	cmp	r3, #2
 80056a6:	d907      	bls.n	80056b8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80056a8:	2303      	movs	r3, #3
 80056aa:	e150      	b.n	800594e <HAL_RCC_OscConfig+0x4e2>
 80056ac:	40023800 	.word	0x40023800
 80056b0:	42470000 	.word	0x42470000
 80056b4:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80056b8:	4b88      	ldr	r3, [pc, #544]	@ (80058dc <HAL_RCC_OscConfig+0x470>)
 80056ba:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80056bc:	f003 0302 	and.w	r3, r3, #2
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d1ea      	bne.n	800569a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	f003 0304 	and.w	r3, r3, #4
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	f000 8097 	beq.w	8005800 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80056d2:	2300      	movs	r3, #0
 80056d4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80056d6:	4b81      	ldr	r3, [pc, #516]	@ (80058dc <HAL_RCC_OscConfig+0x470>)
 80056d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d10f      	bne.n	8005702 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80056e2:	2300      	movs	r3, #0
 80056e4:	60bb      	str	r3, [r7, #8]
 80056e6:	4b7d      	ldr	r3, [pc, #500]	@ (80058dc <HAL_RCC_OscConfig+0x470>)
 80056e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056ea:	4a7c      	ldr	r2, [pc, #496]	@ (80058dc <HAL_RCC_OscConfig+0x470>)
 80056ec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80056f0:	6413      	str	r3, [r2, #64]	@ 0x40
 80056f2:	4b7a      	ldr	r3, [pc, #488]	@ (80058dc <HAL_RCC_OscConfig+0x470>)
 80056f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80056fa:	60bb      	str	r3, [r7, #8]
 80056fc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80056fe:	2301      	movs	r3, #1
 8005700:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005702:	4b77      	ldr	r3, [pc, #476]	@ (80058e0 <HAL_RCC_OscConfig+0x474>)
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800570a:	2b00      	cmp	r3, #0
 800570c:	d118      	bne.n	8005740 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800570e:	4b74      	ldr	r3, [pc, #464]	@ (80058e0 <HAL_RCC_OscConfig+0x474>)
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	4a73      	ldr	r2, [pc, #460]	@ (80058e0 <HAL_RCC_OscConfig+0x474>)
 8005714:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005718:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800571a:	f7fc fefd 	bl	8002518 <HAL_GetTick>
 800571e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005720:	e008      	b.n	8005734 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005722:	f7fc fef9 	bl	8002518 <HAL_GetTick>
 8005726:	4602      	mov	r2, r0
 8005728:	693b      	ldr	r3, [r7, #16]
 800572a:	1ad3      	subs	r3, r2, r3
 800572c:	2b02      	cmp	r3, #2
 800572e:	d901      	bls.n	8005734 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005730:	2303      	movs	r3, #3
 8005732:	e10c      	b.n	800594e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005734:	4b6a      	ldr	r3, [pc, #424]	@ (80058e0 <HAL_RCC_OscConfig+0x474>)
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800573c:	2b00      	cmp	r3, #0
 800573e:	d0f0      	beq.n	8005722 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	689b      	ldr	r3, [r3, #8]
 8005744:	2b01      	cmp	r3, #1
 8005746:	d106      	bne.n	8005756 <HAL_RCC_OscConfig+0x2ea>
 8005748:	4b64      	ldr	r3, [pc, #400]	@ (80058dc <HAL_RCC_OscConfig+0x470>)
 800574a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800574c:	4a63      	ldr	r2, [pc, #396]	@ (80058dc <HAL_RCC_OscConfig+0x470>)
 800574e:	f043 0301 	orr.w	r3, r3, #1
 8005752:	6713      	str	r3, [r2, #112]	@ 0x70
 8005754:	e01c      	b.n	8005790 <HAL_RCC_OscConfig+0x324>
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	689b      	ldr	r3, [r3, #8]
 800575a:	2b05      	cmp	r3, #5
 800575c:	d10c      	bne.n	8005778 <HAL_RCC_OscConfig+0x30c>
 800575e:	4b5f      	ldr	r3, [pc, #380]	@ (80058dc <HAL_RCC_OscConfig+0x470>)
 8005760:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005762:	4a5e      	ldr	r2, [pc, #376]	@ (80058dc <HAL_RCC_OscConfig+0x470>)
 8005764:	f043 0304 	orr.w	r3, r3, #4
 8005768:	6713      	str	r3, [r2, #112]	@ 0x70
 800576a:	4b5c      	ldr	r3, [pc, #368]	@ (80058dc <HAL_RCC_OscConfig+0x470>)
 800576c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800576e:	4a5b      	ldr	r2, [pc, #364]	@ (80058dc <HAL_RCC_OscConfig+0x470>)
 8005770:	f043 0301 	orr.w	r3, r3, #1
 8005774:	6713      	str	r3, [r2, #112]	@ 0x70
 8005776:	e00b      	b.n	8005790 <HAL_RCC_OscConfig+0x324>
 8005778:	4b58      	ldr	r3, [pc, #352]	@ (80058dc <HAL_RCC_OscConfig+0x470>)
 800577a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800577c:	4a57      	ldr	r2, [pc, #348]	@ (80058dc <HAL_RCC_OscConfig+0x470>)
 800577e:	f023 0301 	bic.w	r3, r3, #1
 8005782:	6713      	str	r3, [r2, #112]	@ 0x70
 8005784:	4b55      	ldr	r3, [pc, #340]	@ (80058dc <HAL_RCC_OscConfig+0x470>)
 8005786:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005788:	4a54      	ldr	r2, [pc, #336]	@ (80058dc <HAL_RCC_OscConfig+0x470>)
 800578a:	f023 0304 	bic.w	r3, r3, #4
 800578e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	689b      	ldr	r3, [r3, #8]
 8005794:	2b00      	cmp	r3, #0
 8005796:	d015      	beq.n	80057c4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005798:	f7fc febe 	bl	8002518 <HAL_GetTick>
 800579c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800579e:	e00a      	b.n	80057b6 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80057a0:	f7fc feba 	bl	8002518 <HAL_GetTick>
 80057a4:	4602      	mov	r2, r0
 80057a6:	693b      	ldr	r3, [r7, #16]
 80057a8:	1ad3      	subs	r3, r2, r3
 80057aa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80057ae:	4293      	cmp	r3, r2
 80057b0:	d901      	bls.n	80057b6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80057b2:	2303      	movs	r3, #3
 80057b4:	e0cb      	b.n	800594e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80057b6:	4b49      	ldr	r3, [pc, #292]	@ (80058dc <HAL_RCC_OscConfig+0x470>)
 80057b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80057ba:	f003 0302 	and.w	r3, r3, #2
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d0ee      	beq.n	80057a0 <HAL_RCC_OscConfig+0x334>
 80057c2:	e014      	b.n	80057ee <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80057c4:	f7fc fea8 	bl	8002518 <HAL_GetTick>
 80057c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80057ca:	e00a      	b.n	80057e2 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80057cc:	f7fc fea4 	bl	8002518 <HAL_GetTick>
 80057d0:	4602      	mov	r2, r0
 80057d2:	693b      	ldr	r3, [r7, #16]
 80057d4:	1ad3      	subs	r3, r2, r3
 80057d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80057da:	4293      	cmp	r3, r2
 80057dc:	d901      	bls.n	80057e2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80057de:	2303      	movs	r3, #3
 80057e0:	e0b5      	b.n	800594e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80057e2:	4b3e      	ldr	r3, [pc, #248]	@ (80058dc <HAL_RCC_OscConfig+0x470>)
 80057e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80057e6:	f003 0302 	and.w	r3, r3, #2
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d1ee      	bne.n	80057cc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80057ee:	7dfb      	ldrb	r3, [r7, #23]
 80057f0:	2b01      	cmp	r3, #1
 80057f2:	d105      	bne.n	8005800 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80057f4:	4b39      	ldr	r3, [pc, #228]	@ (80058dc <HAL_RCC_OscConfig+0x470>)
 80057f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057f8:	4a38      	ldr	r2, [pc, #224]	@ (80058dc <HAL_RCC_OscConfig+0x470>)
 80057fa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80057fe:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	699b      	ldr	r3, [r3, #24]
 8005804:	2b00      	cmp	r3, #0
 8005806:	f000 80a1 	beq.w	800594c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800580a:	4b34      	ldr	r3, [pc, #208]	@ (80058dc <HAL_RCC_OscConfig+0x470>)
 800580c:	689b      	ldr	r3, [r3, #8]
 800580e:	f003 030c 	and.w	r3, r3, #12
 8005812:	2b08      	cmp	r3, #8
 8005814:	d05c      	beq.n	80058d0 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	699b      	ldr	r3, [r3, #24]
 800581a:	2b02      	cmp	r3, #2
 800581c:	d141      	bne.n	80058a2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800581e:	4b31      	ldr	r3, [pc, #196]	@ (80058e4 <HAL_RCC_OscConfig+0x478>)
 8005820:	2200      	movs	r2, #0
 8005822:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005824:	f7fc fe78 	bl	8002518 <HAL_GetTick>
 8005828:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800582a:	e008      	b.n	800583e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800582c:	f7fc fe74 	bl	8002518 <HAL_GetTick>
 8005830:	4602      	mov	r2, r0
 8005832:	693b      	ldr	r3, [r7, #16]
 8005834:	1ad3      	subs	r3, r2, r3
 8005836:	2b02      	cmp	r3, #2
 8005838:	d901      	bls.n	800583e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800583a:	2303      	movs	r3, #3
 800583c:	e087      	b.n	800594e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800583e:	4b27      	ldr	r3, [pc, #156]	@ (80058dc <HAL_RCC_OscConfig+0x470>)
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005846:	2b00      	cmp	r3, #0
 8005848:	d1f0      	bne.n	800582c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	69da      	ldr	r2, [r3, #28]
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	6a1b      	ldr	r3, [r3, #32]
 8005852:	431a      	orrs	r2, r3
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005858:	019b      	lsls	r3, r3, #6
 800585a:	431a      	orrs	r2, r3
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005860:	085b      	lsrs	r3, r3, #1
 8005862:	3b01      	subs	r3, #1
 8005864:	041b      	lsls	r3, r3, #16
 8005866:	431a      	orrs	r2, r3
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800586c:	061b      	lsls	r3, r3, #24
 800586e:	491b      	ldr	r1, [pc, #108]	@ (80058dc <HAL_RCC_OscConfig+0x470>)
 8005870:	4313      	orrs	r3, r2
 8005872:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005874:	4b1b      	ldr	r3, [pc, #108]	@ (80058e4 <HAL_RCC_OscConfig+0x478>)
 8005876:	2201      	movs	r2, #1
 8005878:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800587a:	f7fc fe4d 	bl	8002518 <HAL_GetTick>
 800587e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005880:	e008      	b.n	8005894 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005882:	f7fc fe49 	bl	8002518 <HAL_GetTick>
 8005886:	4602      	mov	r2, r0
 8005888:	693b      	ldr	r3, [r7, #16]
 800588a:	1ad3      	subs	r3, r2, r3
 800588c:	2b02      	cmp	r3, #2
 800588e:	d901      	bls.n	8005894 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005890:	2303      	movs	r3, #3
 8005892:	e05c      	b.n	800594e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005894:	4b11      	ldr	r3, [pc, #68]	@ (80058dc <HAL_RCC_OscConfig+0x470>)
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800589c:	2b00      	cmp	r3, #0
 800589e:	d0f0      	beq.n	8005882 <HAL_RCC_OscConfig+0x416>
 80058a0:	e054      	b.n	800594c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80058a2:	4b10      	ldr	r3, [pc, #64]	@ (80058e4 <HAL_RCC_OscConfig+0x478>)
 80058a4:	2200      	movs	r2, #0
 80058a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80058a8:	f7fc fe36 	bl	8002518 <HAL_GetTick>
 80058ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80058ae:	e008      	b.n	80058c2 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80058b0:	f7fc fe32 	bl	8002518 <HAL_GetTick>
 80058b4:	4602      	mov	r2, r0
 80058b6:	693b      	ldr	r3, [r7, #16]
 80058b8:	1ad3      	subs	r3, r2, r3
 80058ba:	2b02      	cmp	r3, #2
 80058bc:	d901      	bls.n	80058c2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80058be:	2303      	movs	r3, #3
 80058c0:	e045      	b.n	800594e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80058c2:	4b06      	ldr	r3, [pc, #24]	@ (80058dc <HAL_RCC_OscConfig+0x470>)
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d1f0      	bne.n	80058b0 <HAL_RCC_OscConfig+0x444>
 80058ce:	e03d      	b.n	800594c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	699b      	ldr	r3, [r3, #24]
 80058d4:	2b01      	cmp	r3, #1
 80058d6:	d107      	bne.n	80058e8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80058d8:	2301      	movs	r3, #1
 80058da:	e038      	b.n	800594e <HAL_RCC_OscConfig+0x4e2>
 80058dc:	40023800 	.word	0x40023800
 80058e0:	40007000 	.word	0x40007000
 80058e4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80058e8:	4b1b      	ldr	r3, [pc, #108]	@ (8005958 <HAL_RCC_OscConfig+0x4ec>)
 80058ea:	685b      	ldr	r3, [r3, #4]
 80058ec:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	699b      	ldr	r3, [r3, #24]
 80058f2:	2b01      	cmp	r3, #1
 80058f4:	d028      	beq.n	8005948 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005900:	429a      	cmp	r2, r3
 8005902:	d121      	bne.n	8005948 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800590e:	429a      	cmp	r2, r3
 8005910:	d11a      	bne.n	8005948 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005912:	68fa      	ldr	r2, [r7, #12]
 8005914:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005918:	4013      	ands	r3, r2
 800591a:	687a      	ldr	r2, [r7, #4]
 800591c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800591e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005920:	4293      	cmp	r3, r2
 8005922:	d111      	bne.n	8005948 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800592e:	085b      	lsrs	r3, r3, #1
 8005930:	3b01      	subs	r3, #1
 8005932:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005934:	429a      	cmp	r2, r3
 8005936:	d107      	bne.n	8005948 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005942:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005944:	429a      	cmp	r2, r3
 8005946:	d001      	beq.n	800594c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8005948:	2301      	movs	r3, #1
 800594a:	e000      	b.n	800594e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800594c:	2300      	movs	r3, #0
}
 800594e:	4618      	mov	r0, r3
 8005950:	3718      	adds	r7, #24
 8005952:	46bd      	mov	sp, r7
 8005954:	bd80      	pop	{r7, pc}
 8005956:	bf00      	nop
 8005958:	40023800 	.word	0x40023800

0800595c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800595c:	b580      	push	{r7, lr}
 800595e:	b084      	sub	sp, #16
 8005960:	af00      	add	r7, sp, #0
 8005962:	6078      	str	r0, [r7, #4]
 8005964:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	2b00      	cmp	r3, #0
 800596a:	d101      	bne.n	8005970 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800596c:	2301      	movs	r3, #1
 800596e:	e0cc      	b.n	8005b0a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005970:	4b68      	ldr	r3, [pc, #416]	@ (8005b14 <HAL_RCC_ClockConfig+0x1b8>)
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	f003 0307 	and.w	r3, r3, #7
 8005978:	683a      	ldr	r2, [r7, #0]
 800597a:	429a      	cmp	r2, r3
 800597c:	d90c      	bls.n	8005998 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800597e:	4b65      	ldr	r3, [pc, #404]	@ (8005b14 <HAL_RCC_ClockConfig+0x1b8>)
 8005980:	683a      	ldr	r2, [r7, #0]
 8005982:	b2d2      	uxtb	r2, r2
 8005984:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005986:	4b63      	ldr	r3, [pc, #396]	@ (8005b14 <HAL_RCC_ClockConfig+0x1b8>)
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	f003 0307 	and.w	r3, r3, #7
 800598e:	683a      	ldr	r2, [r7, #0]
 8005990:	429a      	cmp	r2, r3
 8005992:	d001      	beq.n	8005998 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005994:	2301      	movs	r3, #1
 8005996:	e0b8      	b.n	8005b0a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	f003 0302 	and.w	r3, r3, #2
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d020      	beq.n	80059e6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	f003 0304 	and.w	r3, r3, #4
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d005      	beq.n	80059bc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80059b0:	4b59      	ldr	r3, [pc, #356]	@ (8005b18 <HAL_RCC_ClockConfig+0x1bc>)
 80059b2:	689b      	ldr	r3, [r3, #8]
 80059b4:	4a58      	ldr	r2, [pc, #352]	@ (8005b18 <HAL_RCC_ClockConfig+0x1bc>)
 80059b6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80059ba:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	f003 0308 	and.w	r3, r3, #8
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d005      	beq.n	80059d4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80059c8:	4b53      	ldr	r3, [pc, #332]	@ (8005b18 <HAL_RCC_ClockConfig+0x1bc>)
 80059ca:	689b      	ldr	r3, [r3, #8]
 80059cc:	4a52      	ldr	r2, [pc, #328]	@ (8005b18 <HAL_RCC_ClockConfig+0x1bc>)
 80059ce:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80059d2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80059d4:	4b50      	ldr	r3, [pc, #320]	@ (8005b18 <HAL_RCC_ClockConfig+0x1bc>)
 80059d6:	689b      	ldr	r3, [r3, #8]
 80059d8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	689b      	ldr	r3, [r3, #8]
 80059e0:	494d      	ldr	r1, [pc, #308]	@ (8005b18 <HAL_RCC_ClockConfig+0x1bc>)
 80059e2:	4313      	orrs	r3, r2
 80059e4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	f003 0301 	and.w	r3, r3, #1
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d044      	beq.n	8005a7c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	685b      	ldr	r3, [r3, #4]
 80059f6:	2b01      	cmp	r3, #1
 80059f8:	d107      	bne.n	8005a0a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80059fa:	4b47      	ldr	r3, [pc, #284]	@ (8005b18 <HAL_RCC_ClockConfig+0x1bc>)
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d119      	bne.n	8005a3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005a06:	2301      	movs	r3, #1
 8005a08:	e07f      	b.n	8005b0a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	685b      	ldr	r3, [r3, #4]
 8005a0e:	2b02      	cmp	r3, #2
 8005a10:	d003      	beq.n	8005a1a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005a16:	2b03      	cmp	r3, #3
 8005a18:	d107      	bne.n	8005a2a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005a1a:	4b3f      	ldr	r3, [pc, #252]	@ (8005b18 <HAL_RCC_ClockConfig+0x1bc>)
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d109      	bne.n	8005a3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005a26:	2301      	movs	r3, #1
 8005a28:	e06f      	b.n	8005b0a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005a2a:	4b3b      	ldr	r3, [pc, #236]	@ (8005b18 <HAL_RCC_ClockConfig+0x1bc>)
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	f003 0302 	and.w	r3, r3, #2
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d101      	bne.n	8005a3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005a36:	2301      	movs	r3, #1
 8005a38:	e067      	b.n	8005b0a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005a3a:	4b37      	ldr	r3, [pc, #220]	@ (8005b18 <HAL_RCC_ClockConfig+0x1bc>)
 8005a3c:	689b      	ldr	r3, [r3, #8]
 8005a3e:	f023 0203 	bic.w	r2, r3, #3
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	685b      	ldr	r3, [r3, #4]
 8005a46:	4934      	ldr	r1, [pc, #208]	@ (8005b18 <HAL_RCC_ClockConfig+0x1bc>)
 8005a48:	4313      	orrs	r3, r2
 8005a4a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005a4c:	f7fc fd64 	bl	8002518 <HAL_GetTick>
 8005a50:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005a52:	e00a      	b.n	8005a6a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005a54:	f7fc fd60 	bl	8002518 <HAL_GetTick>
 8005a58:	4602      	mov	r2, r0
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	1ad3      	subs	r3, r2, r3
 8005a5e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005a62:	4293      	cmp	r3, r2
 8005a64:	d901      	bls.n	8005a6a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005a66:	2303      	movs	r3, #3
 8005a68:	e04f      	b.n	8005b0a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005a6a:	4b2b      	ldr	r3, [pc, #172]	@ (8005b18 <HAL_RCC_ClockConfig+0x1bc>)
 8005a6c:	689b      	ldr	r3, [r3, #8]
 8005a6e:	f003 020c 	and.w	r2, r3, #12
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	685b      	ldr	r3, [r3, #4]
 8005a76:	009b      	lsls	r3, r3, #2
 8005a78:	429a      	cmp	r2, r3
 8005a7a:	d1eb      	bne.n	8005a54 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005a7c:	4b25      	ldr	r3, [pc, #148]	@ (8005b14 <HAL_RCC_ClockConfig+0x1b8>)
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	f003 0307 	and.w	r3, r3, #7
 8005a84:	683a      	ldr	r2, [r7, #0]
 8005a86:	429a      	cmp	r2, r3
 8005a88:	d20c      	bcs.n	8005aa4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005a8a:	4b22      	ldr	r3, [pc, #136]	@ (8005b14 <HAL_RCC_ClockConfig+0x1b8>)
 8005a8c:	683a      	ldr	r2, [r7, #0]
 8005a8e:	b2d2      	uxtb	r2, r2
 8005a90:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005a92:	4b20      	ldr	r3, [pc, #128]	@ (8005b14 <HAL_RCC_ClockConfig+0x1b8>)
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	f003 0307 	and.w	r3, r3, #7
 8005a9a:	683a      	ldr	r2, [r7, #0]
 8005a9c:	429a      	cmp	r2, r3
 8005a9e:	d001      	beq.n	8005aa4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005aa0:	2301      	movs	r3, #1
 8005aa2:	e032      	b.n	8005b0a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	f003 0304 	and.w	r3, r3, #4
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d008      	beq.n	8005ac2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005ab0:	4b19      	ldr	r3, [pc, #100]	@ (8005b18 <HAL_RCC_ClockConfig+0x1bc>)
 8005ab2:	689b      	ldr	r3, [r3, #8]
 8005ab4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	68db      	ldr	r3, [r3, #12]
 8005abc:	4916      	ldr	r1, [pc, #88]	@ (8005b18 <HAL_RCC_ClockConfig+0x1bc>)
 8005abe:	4313      	orrs	r3, r2
 8005ac0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	f003 0308 	and.w	r3, r3, #8
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d009      	beq.n	8005ae2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005ace:	4b12      	ldr	r3, [pc, #72]	@ (8005b18 <HAL_RCC_ClockConfig+0x1bc>)
 8005ad0:	689b      	ldr	r3, [r3, #8]
 8005ad2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	691b      	ldr	r3, [r3, #16]
 8005ada:	00db      	lsls	r3, r3, #3
 8005adc:	490e      	ldr	r1, [pc, #56]	@ (8005b18 <HAL_RCC_ClockConfig+0x1bc>)
 8005ade:	4313      	orrs	r3, r2
 8005ae0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005ae2:	f000 f821 	bl	8005b28 <HAL_RCC_GetSysClockFreq>
 8005ae6:	4602      	mov	r2, r0
 8005ae8:	4b0b      	ldr	r3, [pc, #44]	@ (8005b18 <HAL_RCC_ClockConfig+0x1bc>)
 8005aea:	689b      	ldr	r3, [r3, #8]
 8005aec:	091b      	lsrs	r3, r3, #4
 8005aee:	f003 030f 	and.w	r3, r3, #15
 8005af2:	490a      	ldr	r1, [pc, #40]	@ (8005b1c <HAL_RCC_ClockConfig+0x1c0>)
 8005af4:	5ccb      	ldrb	r3, [r1, r3]
 8005af6:	fa22 f303 	lsr.w	r3, r2, r3
 8005afa:	4a09      	ldr	r2, [pc, #36]	@ (8005b20 <HAL_RCC_ClockConfig+0x1c4>)
 8005afc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8005afe:	4b09      	ldr	r3, [pc, #36]	@ (8005b24 <HAL_RCC_ClockConfig+0x1c8>)
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	4618      	mov	r0, r3
 8005b04:	f7fc fcc4 	bl	8002490 <HAL_InitTick>

  return HAL_OK;
 8005b08:	2300      	movs	r3, #0
}
 8005b0a:	4618      	mov	r0, r3
 8005b0c:	3710      	adds	r7, #16
 8005b0e:	46bd      	mov	sp, r7
 8005b10:	bd80      	pop	{r7, pc}
 8005b12:	bf00      	nop
 8005b14:	40023c00 	.word	0x40023c00
 8005b18:	40023800 	.word	0x40023800
 8005b1c:	0800a8a8 	.word	0x0800a8a8
 8005b20:	20000004 	.word	0x20000004
 8005b24:	20000008 	.word	0x20000008

08005b28 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005b28:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005b2c:	b094      	sub	sp, #80	@ 0x50
 8005b2e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8005b30:	2300      	movs	r3, #0
 8005b32:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8005b34:	2300      	movs	r3, #0
 8005b36:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8005b38:	2300      	movs	r3, #0
 8005b3a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8005b3c:	2300      	movs	r3, #0
 8005b3e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005b40:	4b79      	ldr	r3, [pc, #484]	@ (8005d28 <HAL_RCC_GetSysClockFreq+0x200>)
 8005b42:	689b      	ldr	r3, [r3, #8]
 8005b44:	f003 030c 	and.w	r3, r3, #12
 8005b48:	2b08      	cmp	r3, #8
 8005b4a:	d00d      	beq.n	8005b68 <HAL_RCC_GetSysClockFreq+0x40>
 8005b4c:	2b08      	cmp	r3, #8
 8005b4e:	f200 80e1 	bhi.w	8005d14 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d002      	beq.n	8005b5c <HAL_RCC_GetSysClockFreq+0x34>
 8005b56:	2b04      	cmp	r3, #4
 8005b58:	d003      	beq.n	8005b62 <HAL_RCC_GetSysClockFreq+0x3a>
 8005b5a:	e0db      	b.n	8005d14 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005b5c:	4b73      	ldr	r3, [pc, #460]	@ (8005d2c <HAL_RCC_GetSysClockFreq+0x204>)
 8005b5e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005b60:	e0db      	b.n	8005d1a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005b62:	4b73      	ldr	r3, [pc, #460]	@ (8005d30 <HAL_RCC_GetSysClockFreq+0x208>)
 8005b64:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005b66:	e0d8      	b.n	8005d1a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005b68:	4b6f      	ldr	r3, [pc, #444]	@ (8005d28 <HAL_RCC_GetSysClockFreq+0x200>)
 8005b6a:	685b      	ldr	r3, [r3, #4]
 8005b6c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005b70:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005b72:	4b6d      	ldr	r3, [pc, #436]	@ (8005d28 <HAL_RCC_GetSysClockFreq+0x200>)
 8005b74:	685b      	ldr	r3, [r3, #4]
 8005b76:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d063      	beq.n	8005c46 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005b7e:	4b6a      	ldr	r3, [pc, #424]	@ (8005d28 <HAL_RCC_GetSysClockFreq+0x200>)
 8005b80:	685b      	ldr	r3, [r3, #4]
 8005b82:	099b      	lsrs	r3, r3, #6
 8005b84:	2200      	movs	r2, #0
 8005b86:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005b88:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8005b8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b8c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005b90:	633b      	str	r3, [r7, #48]	@ 0x30
 8005b92:	2300      	movs	r3, #0
 8005b94:	637b      	str	r3, [r7, #52]	@ 0x34
 8005b96:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8005b9a:	4622      	mov	r2, r4
 8005b9c:	462b      	mov	r3, r5
 8005b9e:	f04f 0000 	mov.w	r0, #0
 8005ba2:	f04f 0100 	mov.w	r1, #0
 8005ba6:	0159      	lsls	r1, r3, #5
 8005ba8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005bac:	0150      	lsls	r0, r2, #5
 8005bae:	4602      	mov	r2, r0
 8005bb0:	460b      	mov	r3, r1
 8005bb2:	4621      	mov	r1, r4
 8005bb4:	1a51      	subs	r1, r2, r1
 8005bb6:	6139      	str	r1, [r7, #16]
 8005bb8:	4629      	mov	r1, r5
 8005bba:	eb63 0301 	sbc.w	r3, r3, r1
 8005bbe:	617b      	str	r3, [r7, #20]
 8005bc0:	f04f 0200 	mov.w	r2, #0
 8005bc4:	f04f 0300 	mov.w	r3, #0
 8005bc8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005bcc:	4659      	mov	r1, fp
 8005bce:	018b      	lsls	r3, r1, #6
 8005bd0:	4651      	mov	r1, sl
 8005bd2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005bd6:	4651      	mov	r1, sl
 8005bd8:	018a      	lsls	r2, r1, #6
 8005bda:	4651      	mov	r1, sl
 8005bdc:	ebb2 0801 	subs.w	r8, r2, r1
 8005be0:	4659      	mov	r1, fp
 8005be2:	eb63 0901 	sbc.w	r9, r3, r1
 8005be6:	f04f 0200 	mov.w	r2, #0
 8005bea:	f04f 0300 	mov.w	r3, #0
 8005bee:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005bf2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005bf6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005bfa:	4690      	mov	r8, r2
 8005bfc:	4699      	mov	r9, r3
 8005bfe:	4623      	mov	r3, r4
 8005c00:	eb18 0303 	adds.w	r3, r8, r3
 8005c04:	60bb      	str	r3, [r7, #8]
 8005c06:	462b      	mov	r3, r5
 8005c08:	eb49 0303 	adc.w	r3, r9, r3
 8005c0c:	60fb      	str	r3, [r7, #12]
 8005c0e:	f04f 0200 	mov.w	r2, #0
 8005c12:	f04f 0300 	mov.w	r3, #0
 8005c16:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005c1a:	4629      	mov	r1, r5
 8005c1c:	024b      	lsls	r3, r1, #9
 8005c1e:	4621      	mov	r1, r4
 8005c20:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005c24:	4621      	mov	r1, r4
 8005c26:	024a      	lsls	r2, r1, #9
 8005c28:	4610      	mov	r0, r2
 8005c2a:	4619      	mov	r1, r3
 8005c2c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005c2e:	2200      	movs	r2, #0
 8005c30:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005c32:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005c34:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005c38:	f7fb f806 	bl	8000c48 <__aeabi_uldivmod>
 8005c3c:	4602      	mov	r2, r0
 8005c3e:	460b      	mov	r3, r1
 8005c40:	4613      	mov	r3, r2
 8005c42:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005c44:	e058      	b.n	8005cf8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005c46:	4b38      	ldr	r3, [pc, #224]	@ (8005d28 <HAL_RCC_GetSysClockFreq+0x200>)
 8005c48:	685b      	ldr	r3, [r3, #4]
 8005c4a:	099b      	lsrs	r3, r3, #6
 8005c4c:	2200      	movs	r2, #0
 8005c4e:	4618      	mov	r0, r3
 8005c50:	4611      	mov	r1, r2
 8005c52:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005c56:	623b      	str	r3, [r7, #32]
 8005c58:	2300      	movs	r3, #0
 8005c5a:	627b      	str	r3, [r7, #36]	@ 0x24
 8005c5c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005c60:	4642      	mov	r2, r8
 8005c62:	464b      	mov	r3, r9
 8005c64:	f04f 0000 	mov.w	r0, #0
 8005c68:	f04f 0100 	mov.w	r1, #0
 8005c6c:	0159      	lsls	r1, r3, #5
 8005c6e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005c72:	0150      	lsls	r0, r2, #5
 8005c74:	4602      	mov	r2, r0
 8005c76:	460b      	mov	r3, r1
 8005c78:	4641      	mov	r1, r8
 8005c7a:	ebb2 0a01 	subs.w	sl, r2, r1
 8005c7e:	4649      	mov	r1, r9
 8005c80:	eb63 0b01 	sbc.w	fp, r3, r1
 8005c84:	f04f 0200 	mov.w	r2, #0
 8005c88:	f04f 0300 	mov.w	r3, #0
 8005c8c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005c90:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005c94:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005c98:	ebb2 040a 	subs.w	r4, r2, sl
 8005c9c:	eb63 050b 	sbc.w	r5, r3, fp
 8005ca0:	f04f 0200 	mov.w	r2, #0
 8005ca4:	f04f 0300 	mov.w	r3, #0
 8005ca8:	00eb      	lsls	r3, r5, #3
 8005caa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005cae:	00e2      	lsls	r2, r4, #3
 8005cb0:	4614      	mov	r4, r2
 8005cb2:	461d      	mov	r5, r3
 8005cb4:	4643      	mov	r3, r8
 8005cb6:	18e3      	adds	r3, r4, r3
 8005cb8:	603b      	str	r3, [r7, #0]
 8005cba:	464b      	mov	r3, r9
 8005cbc:	eb45 0303 	adc.w	r3, r5, r3
 8005cc0:	607b      	str	r3, [r7, #4]
 8005cc2:	f04f 0200 	mov.w	r2, #0
 8005cc6:	f04f 0300 	mov.w	r3, #0
 8005cca:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005cce:	4629      	mov	r1, r5
 8005cd0:	028b      	lsls	r3, r1, #10
 8005cd2:	4621      	mov	r1, r4
 8005cd4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005cd8:	4621      	mov	r1, r4
 8005cda:	028a      	lsls	r2, r1, #10
 8005cdc:	4610      	mov	r0, r2
 8005cde:	4619      	mov	r1, r3
 8005ce0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005ce2:	2200      	movs	r2, #0
 8005ce4:	61bb      	str	r3, [r7, #24]
 8005ce6:	61fa      	str	r2, [r7, #28]
 8005ce8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005cec:	f7fa ffac 	bl	8000c48 <__aeabi_uldivmod>
 8005cf0:	4602      	mov	r2, r0
 8005cf2:	460b      	mov	r3, r1
 8005cf4:	4613      	mov	r3, r2
 8005cf6:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8005cf8:	4b0b      	ldr	r3, [pc, #44]	@ (8005d28 <HAL_RCC_GetSysClockFreq+0x200>)
 8005cfa:	685b      	ldr	r3, [r3, #4]
 8005cfc:	0c1b      	lsrs	r3, r3, #16
 8005cfe:	f003 0303 	and.w	r3, r3, #3
 8005d02:	3301      	adds	r3, #1
 8005d04:	005b      	lsls	r3, r3, #1
 8005d06:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8005d08:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005d0a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005d0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d10:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005d12:	e002      	b.n	8005d1a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005d14:	4b05      	ldr	r3, [pc, #20]	@ (8005d2c <HAL_RCC_GetSysClockFreq+0x204>)
 8005d16:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005d18:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005d1a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8005d1c:	4618      	mov	r0, r3
 8005d1e:	3750      	adds	r7, #80	@ 0x50
 8005d20:	46bd      	mov	sp, r7
 8005d22:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005d26:	bf00      	nop
 8005d28:	40023800 	.word	0x40023800
 8005d2c:	00f42400 	.word	0x00f42400
 8005d30:	007a1200 	.word	0x007a1200

08005d34 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005d34:	b480      	push	{r7}
 8005d36:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005d38:	4b03      	ldr	r3, [pc, #12]	@ (8005d48 <HAL_RCC_GetHCLKFreq+0x14>)
 8005d3a:	681b      	ldr	r3, [r3, #0]
}
 8005d3c:	4618      	mov	r0, r3
 8005d3e:	46bd      	mov	sp, r7
 8005d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d44:	4770      	bx	lr
 8005d46:	bf00      	nop
 8005d48:	20000004 	.word	0x20000004

08005d4c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005d4c:	b580      	push	{r7, lr}
 8005d4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005d50:	f7ff fff0 	bl	8005d34 <HAL_RCC_GetHCLKFreq>
 8005d54:	4602      	mov	r2, r0
 8005d56:	4b05      	ldr	r3, [pc, #20]	@ (8005d6c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005d58:	689b      	ldr	r3, [r3, #8]
 8005d5a:	0a9b      	lsrs	r3, r3, #10
 8005d5c:	f003 0307 	and.w	r3, r3, #7
 8005d60:	4903      	ldr	r1, [pc, #12]	@ (8005d70 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005d62:	5ccb      	ldrb	r3, [r1, r3]
 8005d64:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005d68:	4618      	mov	r0, r3
 8005d6a:	bd80      	pop	{r7, pc}
 8005d6c:	40023800 	.word	0x40023800
 8005d70:	0800a8b8 	.word	0x0800a8b8

08005d74 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005d74:	b580      	push	{r7, lr}
 8005d76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005d78:	f7ff ffdc 	bl	8005d34 <HAL_RCC_GetHCLKFreq>
 8005d7c:	4602      	mov	r2, r0
 8005d7e:	4b05      	ldr	r3, [pc, #20]	@ (8005d94 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005d80:	689b      	ldr	r3, [r3, #8]
 8005d82:	0b5b      	lsrs	r3, r3, #13
 8005d84:	f003 0307 	and.w	r3, r3, #7
 8005d88:	4903      	ldr	r1, [pc, #12]	@ (8005d98 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005d8a:	5ccb      	ldrb	r3, [r1, r3]
 8005d8c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005d90:	4618      	mov	r0, r3
 8005d92:	bd80      	pop	{r7, pc}
 8005d94:	40023800 	.word	0x40023800
 8005d98:	0800a8b8 	.word	0x0800a8b8

08005d9c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005d9c:	b580      	push	{r7, lr}
 8005d9e:	b082      	sub	sp, #8
 8005da0:	af00      	add	r7, sp, #0
 8005da2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d101      	bne.n	8005dae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005daa:	2301      	movs	r3, #1
 8005dac:	e041      	b.n	8005e32 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005db4:	b2db      	uxtb	r3, r3
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d106      	bne.n	8005dc8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	2200      	movs	r2, #0
 8005dbe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005dc2:	6878      	ldr	r0, [r7, #4]
 8005dc4:	f7fb fffa 	bl	8001dbc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	2202      	movs	r2, #2
 8005dcc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681a      	ldr	r2, [r3, #0]
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	3304      	adds	r3, #4
 8005dd8:	4619      	mov	r1, r3
 8005dda:	4610      	mov	r0, r2
 8005ddc:	f000 fa7e 	bl	80062dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	2201      	movs	r2, #1
 8005de4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	2201      	movs	r2, #1
 8005dec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	2201      	movs	r2, #1
 8005df4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	2201      	movs	r2, #1
 8005dfc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	2201      	movs	r2, #1
 8005e04:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	2201      	movs	r2, #1
 8005e0c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	2201      	movs	r2, #1
 8005e14:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	2201      	movs	r2, #1
 8005e1c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	2201      	movs	r2, #1
 8005e24:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	2201      	movs	r2, #1
 8005e2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005e30:	2300      	movs	r3, #0
}
 8005e32:	4618      	mov	r0, r3
 8005e34:	3708      	adds	r7, #8
 8005e36:	46bd      	mov	sp, r7
 8005e38:	bd80      	pop	{r7, pc}
	...

08005e3c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005e3c:	b480      	push	{r7}
 8005e3e:	b085      	sub	sp, #20
 8005e40:	af00      	add	r7, sp, #0
 8005e42:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005e4a:	b2db      	uxtb	r3, r3
 8005e4c:	2b01      	cmp	r3, #1
 8005e4e:	d001      	beq.n	8005e54 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005e50:	2301      	movs	r3, #1
 8005e52:	e04e      	b.n	8005ef2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	2202      	movs	r2, #2
 8005e58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	68da      	ldr	r2, [r3, #12]
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	f042 0201 	orr.w	r2, r2, #1
 8005e6a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	4a23      	ldr	r2, [pc, #140]	@ (8005f00 <HAL_TIM_Base_Start_IT+0xc4>)
 8005e72:	4293      	cmp	r3, r2
 8005e74:	d022      	beq.n	8005ebc <HAL_TIM_Base_Start_IT+0x80>
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005e7e:	d01d      	beq.n	8005ebc <HAL_TIM_Base_Start_IT+0x80>
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	4a1f      	ldr	r2, [pc, #124]	@ (8005f04 <HAL_TIM_Base_Start_IT+0xc8>)
 8005e86:	4293      	cmp	r3, r2
 8005e88:	d018      	beq.n	8005ebc <HAL_TIM_Base_Start_IT+0x80>
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	4a1e      	ldr	r2, [pc, #120]	@ (8005f08 <HAL_TIM_Base_Start_IT+0xcc>)
 8005e90:	4293      	cmp	r3, r2
 8005e92:	d013      	beq.n	8005ebc <HAL_TIM_Base_Start_IT+0x80>
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	4a1c      	ldr	r2, [pc, #112]	@ (8005f0c <HAL_TIM_Base_Start_IT+0xd0>)
 8005e9a:	4293      	cmp	r3, r2
 8005e9c:	d00e      	beq.n	8005ebc <HAL_TIM_Base_Start_IT+0x80>
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	4a1b      	ldr	r2, [pc, #108]	@ (8005f10 <HAL_TIM_Base_Start_IT+0xd4>)
 8005ea4:	4293      	cmp	r3, r2
 8005ea6:	d009      	beq.n	8005ebc <HAL_TIM_Base_Start_IT+0x80>
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	4a19      	ldr	r2, [pc, #100]	@ (8005f14 <HAL_TIM_Base_Start_IT+0xd8>)
 8005eae:	4293      	cmp	r3, r2
 8005eb0:	d004      	beq.n	8005ebc <HAL_TIM_Base_Start_IT+0x80>
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	4a18      	ldr	r2, [pc, #96]	@ (8005f18 <HAL_TIM_Base_Start_IT+0xdc>)
 8005eb8:	4293      	cmp	r3, r2
 8005eba:	d111      	bne.n	8005ee0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	689b      	ldr	r3, [r3, #8]
 8005ec2:	f003 0307 	and.w	r3, r3, #7
 8005ec6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	2b06      	cmp	r3, #6
 8005ecc:	d010      	beq.n	8005ef0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	681a      	ldr	r2, [r3, #0]
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	f042 0201 	orr.w	r2, r2, #1
 8005edc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ede:	e007      	b.n	8005ef0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	681a      	ldr	r2, [r3, #0]
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	f042 0201 	orr.w	r2, r2, #1
 8005eee:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005ef0:	2300      	movs	r3, #0
}
 8005ef2:	4618      	mov	r0, r3
 8005ef4:	3714      	adds	r7, #20
 8005ef6:	46bd      	mov	sp, r7
 8005ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005efc:	4770      	bx	lr
 8005efe:	bf00      	nop
 8005f00:	40010000 	.word	0x40010000
 8005f04:	40000400 	.word	0x40000400
 8005f08:	40000800 	.word	0x40000800
 8005f0c:	40000c00 	.word	0x40000c00
 8005f10:	40010400 	.word	0x40010400
 8005f14:	40014000 	.word	0x40014000
 8005f18:	40001800 	.word	0x40001800

08005f1c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005f1c:	b580      	push	{r7, lr}
 8005f1e:	b084      	sub	sp, #16
 8005f20:	af00      	add	r7, sp, #0
 8005f22:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	68db      	ldr	r3, [r3, #12]
 8005f2a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	691b      	ldr	r3, [r3, #16]
 8005f32:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005f34:	68bb      	ldr	r3, [r7, #8]
 8005f36:	f003 0302 	and.w	r3, r3, #2
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d020      	beq.n	8005f80 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	f003 0302 	and.w	r3, r3, #2
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d01b      	beq.n	8005f80 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	f06f 0202 	mvn.w	r2, #2
 8005f50:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	2201      	movs	r2, #1
 8005f56:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	699b      	ldr	r3, [r3, #24]
 8005f5e:	f003 0303 	and.w	r3, r3, #3
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d003      	beq.n	8005f6e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005f66:	6878      	ldr	r0, [r7, #4]
 8005f68:	f000 f999 	bl	800629e <HAL_TIM_IC_CaptureCallback>
 8005f6c:	e005      	b.n	8005f7a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f6e:	6878      	ldr	r0, [r7, #4]
 8005f70:	f000 f98b 	bl	800628a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f74:	6878      	ldr	r0, [r7, #4]
 8005f76:	f000 f99c 	bl	80062b2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	2200      	movs	r2, #0
 8005f7e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005f80:	68bb      	ldr	r3, [r7, #8]
 8005f82:	f003 0304 	and.w	r3, r3, #4
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d020      	beq.n	8005fcc <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	f003 0304 	and.w	r3, r3, #4
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d01b      	beq.n	8005fcc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	f06f 0204 	mvn.w	r2, #4
 8005f9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	2202      	movs	r2, #2
 8005fa2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	699b      	ldr	r3, [r3, #24]
 8005faa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d003      	beq.n	8005fba <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005fb2:	6878      	ldr	r0, [r7, #4]
 8005fb4:	f000 f973 	bl	800629e <HAL_TIM_IC_CaptureCallback>
 8005fb8:	e005      	b.n	8005fc6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005fba:	6878      	ldr	r0, [r7, #4]
 8005fbc:	f000 f965 	bl	800628a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005fc0:	6878      	ldr	r0, [r7, #4]
 8005fc2:	f000 f976 	bl	80062b2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	2200      	movs	r2, #0
 8005fca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005fcc:	68bb      	ldr	r3, [r7, #8]
 8005fce:	f003 0308 	and.w	r3, r3, #8
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d020      	beq.n	8006018 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	f003 0308 	and.w	r3, r3, #8
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d01b      	beq.n	8006018 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	f06f 0208 	mvn.w	r2, #8
 8005fe8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	2204      	movs	r2, #4
 8005fee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	69db      	ldr	r3, [r3, #28]
 8005ff6:	f003 0303 	and.w	r3, r3, #3
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d003      	beq.n	8006006 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005ffe:	6878      	ldr	r0, [r7, #4]
 8006000:	f000 f94d 	bl	800629e <HAL_TIM_IC_CaptureCallback>
 8006004:	e005      	b.n	8006012 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006006:	6878      	ldr	r0, [r7, #4]
 8006008:	f000 f93f 	bl	800628a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800600c:	6878      	ldr	r0, [r7, #4]
 800600e:	f000 f950 	bl	80062b2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	2200      	movs	r2, #0
 8006016:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006018:	68bb      	ldr	r3, [r7, #8]
 800601a:	f003 0310 	and.w	r3, r3, #16
 800601e:	2b00      	cmp	r3, #0
 8006020:	d020      	beq.n	8006064 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	f003 0310 	and.w	r3, r3, #16
 8006028:	2b00      	cmp	r3, #0
 800602a:	d01b      	beq.n	8006064 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	f06f 0210 	mvn.w	r2, #16
 8006034:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	2208      	movs	r2, #8
 800603a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	69db      	ldr	r3, [r3, #28]
 8006042:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006046:	2b00      	cmp	r3, #0
 8006048:	d003      	beq.n	8006052 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800604a:	6878      	ldr	r0, [r7, #4]
 800604c:	f000 f927 	bl	800629e <HAL_TIM_IC_CaptureCallback>
 8006050:	e005      	b.n	800605e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006052:	6878      	ldr	r0, [r7, #4]
 8006054:	f000 f919 	bl	800628a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006058:	6878      	ldr	r0, [r7, #4]
 800605a:	f000 f92a 	bl	80062b2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	2200      	movs	r2, #0
 8006062:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006064:	68bb      	ldr	r3, [r7, #8]
 8006066:	f003 0301 	and.w	r3, r3, #1
 800606a:	2b00      	cmp	r3, #0
 800606c:	d00c      	beq.n	8006088 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	f003 0301 	and.w	r3, r3, #1
 8006074:	2b00      	cmp	r3, #0
 8006076:	d007      	beq.n	8006088 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	f06f 0201 	mvn.w	r2, #1
 8006080:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006082:	6878      	ldr	r0, [r7, #4]
 8006084:	f7fb fbf6 	bl	8001874 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8006088:	68bb      	ldr	r3, [r7, #8]
 800608a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800608e:	2b00      	cmp	r3, #0
 8006090:	d00c      	beq.n	80060ac <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006098:	2b00      	cmp	r3, #0
 800609a:	d007      	beq.n	80060ac <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80060a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80060a6:	6878      	ldr	r0, [r7, #4]
 80060a8:	f000 fae4 	bl	8006674 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80060ac:	68bb      	ldr	r3, [r7, #8]
 80060ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d00c      	beq.n	80060d0 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d007      	beq.n	80060d0 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80060c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80060ca:	6878      	ldr	r0, [r7, #4]
 80060cc:	f000 f8fb 	bl	80062c6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80060d0:	68bb      	ldr	r3, [r7, #8]
 80060d2:	f003 0320 	and.w	r3, r3, #32
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d00c      	beq.n	80060f4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	f003 0320 	and.w	r3, r3, #32
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d007      	beq.n	80060f4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	f06f 0220 	mvn.w	r2, #32
 80060ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80060ee:	6878      	ldr	r0, [r7, #4]
 80060f0:	f000 fab6 	bl	8006660 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80060f4:	bf00      	nop
 80060f6:	3710      	adds	r7, #16
 80060f8:	46bd      	mov	sp, r7
 80060fa:	bd80      	pop	{r7, pc}

080060fc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80060fc:	b580      	push	{r7, lr}
 80060fe:	b084      	sub	sp, #16
 8006100:	af00      	add	r7, sp, #0
 8006102:	6078      	str	r0, [r7, #4]
 8006104:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006106:	2300      	movs	r3, #0
 8006108:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006110:	2b01      	cmp	r3, #1
 8006112:	d101      	bne.n	8006118 <HAL_TIM_ConfigClockSource+0x1c>
 8006114:	2302      	movs	r3, #2
 8006116:	e0b4      	b.n	8006282 <HAL_TIM_ConfigClockSource+0x186>
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	2201      	movs	r2, #1
 800611c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	2202      	movs	r2, #2
 8006124:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	689b      	ldr	r3, [r3, #8]
 800612e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006130:	68bb      	ldr	r3, [r7, #8]
 8006132:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8006136:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006138:	68bb      	ldr	r3, [r7, #8]
 800613a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800613e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	68ba      	ldr	r2, [r7, #8]
 8006146:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006148:	683b      	ldr	r3, [r7, #0]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006150:	d03e      	beq.n	80061d0 <HAL_TIM_ConfigClockSource+0xd4>
 8006152:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006156:	f200 8087 	bhi.w	8006268 <HAL_TIM_ConfigClockSource+0x16c>
 800615a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800615e:	f000 8086 	beq.w	800626e <HAL_TIM_ConfigClockSource+0x172>
 8006162:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006166:	d87f      	bhi.n	8006268 <HAL_TIM_ConfigClockSource+0x16c>
 8006168:	2b70      	cmp	r3, #112	@ 0x70
 800616a:	d01a      	beq.n	80061a2 <HAL_TIM_ConfigClockSource+0xa6>
 800616c:	2b70      	cmp	r3, #112	@ 0x70
 800616e:	d87b      	bhi.n	8006268 <HAL_TIM_ConfigClockSource+0x16c>
 8006170:	2b60      	cmp	r3, #96	@ 0x60
 8006172:	d050      	beq.n	8006216 <HAL_TIM_ConfigClockSource+0x11a>
 8006174:	2b60      	cmp	r3, #96	@ 0x60
 8006176:	d877      	bhi.n	8006268 <HAL_TIM_ConfigClockSource+0x16c>
 8006178:	2b50      	cmp	r3, #80	@ 0x50
 800617a:	d03c      	beq.n	80061f6 <HAL_TIM_ConfigClockSource+0xfa>
 800617c:	2b50      	cmp	r3, #80	@ 0x50
 800617e:	d873      	bhi.n	8006268 <HAL_TIM_ConfigClockSource+0x16c>
 8006180:	2b40      	cmp	r3, #64	@ 0x40
 8006182:	d058      	beq.n	8006236 <HAL_TIM_ConfigClockSource+0x13a>
 8006184:	2b40      	cmp	r3, #64	@ 0x40
 8006186:	d86f      	bhi.n	8006268 <HAL_TIM_ConfigClockSource+0x16c>
 8006188:	2b30      	cmp	r3, #48	@ 0x30
 800618a:	d064      	beq.n	8006256 <HAL_TIM_ConfigClockSource+0x15a>
 800618c:	2b30      	cmp	r3, #48	@ 0x30
 800618e:	d86b      	bhi.n	8006268 <HAL_TIM_ConfigClockSource+0x16c>
 8006190:	2b20      	cmp	r3, #32
 8006192:	d060      	beq.n	8006256 <HAL_TIM_ConfigClockSource+0x15a>
 8006194:	2b20      	cmp	r3, #32
 8006196:	d867      	bhi.n	8006268 <HAL_TIM_ConfigClockSource+0x16c>
 8006198:	2b00      	cmp	r3, #0
 800619a:	d05c      	beq.n	8006256 <HAL_TIM_ConfigClockSource+0x15a>
 800619c:	2b10      	cmp	r3, #16
 800619e:	d05a      	beq.n	8006256 <HAL_TIM_ConfigClockSource+0x15a>
 80061a0:	e062      	b.n	8006268 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80061a6:	683b      	ldr	r3, [r7, #0]
 80061a8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80061aa:	683b      	ldr	r3, [r7, #0]
 80061ac:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80061ae:	683b      	ldr	r3, [r7, #0]
 80061b0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80061b2:	f000 f9b9 	bl	8006528 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	689b      	ldr	r3, [r3, #8]
 80061bc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80061be:	68bb      	ldr	r3, [r7, #8]
 80061c0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80061c4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	68ba      	ldr	r2, [r7, #8]
 80061cc:	609a      	str	r2, [r3, #8]
      break;
 80061ce:	e04f      	b.n	8006270 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80061d4:	683b      	ldr	r3, [r7, #0]
 80061d6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80061d8:	683b      	ldr	r3, [r7, #0]
 80061da:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80061dc:	683b      	ldr	r3, [r7, #0]
 80061de:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80061e0:	f000 f9a2 	bl	8006528 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	689a      	ldr	r2, [r3, #8]
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80061f2:	609a      	str	r2, [r3, #8]
      break;
 80061f4:	e03c      	b.n	8006270 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80061fa:	683b      	ldr	r3, [r7, #0]
 80061fc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80061fe:	683b      	ldr	r3, [r7, #0]
 8006200:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006202:	461a      	mov	r2, r3
 8006204:	f000 f916 	bl	8006434 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	2150      	movs	r1, #80	@ 0x50
 800620e:	4618      	mov	r0, r3
 8006210:	f000 f96f 	bl	80064f2 <TIM_ITRx_SetConfig>
      break;
 8006214:	e02c      	b.n	8006270 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800621a:	683b      	ldr	r3, [r7, #0]
 800621c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800621e:	683b      	ldr	r3, [r7, #0]
 8006220:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006222:	461a      	mov	r2, r3
 8006224:	f000 f935 	bl	8006492 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	2160      	movs	r1, #96	@ 0x60
 800622e:	4618      	mov	r0, r3
 8006230:	f000 f95f 	bl	80064f2 <TIM_ITRx_SetConfig>
      break;
 8006234:	e01c      	b.n	8006270 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800623a:	683b      	ldr	r3, [r7, #0]
 800623c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800623e:	683b      	ldr	r3, [r7, #0]
 8006240:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006242:	461a      	mov	r2, r3
 8006244:	f000 f8f6 	bl	8006434 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	2140      	movs	r1, #64	@ 0x40
 800624e:	4618      	mov	r0, r3
 8006250:	f000 f94f 	bl	80064f2 <TIM_ITRx_SetConfig>
      break;
 8006254:	e00c      	b.n	8006270 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681a      	ldr	r2, [r3, #0]
 800625a:	683b      	ldr	r3, [r7, #0]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	4619      	mov	r1, r3
 8006260:	4610      	mov	r0, r2
 8006262:	f000 f946 	bl	80064f2 <TIM_ITRx_SetConfig>
      break;
 8006266:	e003      	b.n	8006270 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006268:	2301      	movs	r3, #1
 800626a:	73fb      	strb	r3, [r7, #15]
      break;
 800626c:	e000      	b.n	8006270 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800626e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	2201      	movs	r2, #1
 8006274:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	2200      	movs	r2, #0
 800627c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006280:	7bfb      	ldrb	r3, [r7, #15]
}
 8006282:	4618      	mov	r0, r3
 8006284:	3710      	adds	r7, #16
 8006286:	46bd      	mov	sp, r7
 8006288:	bd80      	pop	{r7, pc}

0800628a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800628a:	b480      	push	{r7}
 800628c:	b083      	sub	sp, #12
 800628e:	af00      	add	r7, sp, #0
 8006290:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006292:	bf00      	nop
 8006294:	370c      	adds	r7, #12
 8006296:	46bd      	mov	sp, r7
 8006298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800629c:	4770      	bx	lr

0800629e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800629e:	b480      	push	{r7}
 80062a0:	b083      	sub	sp, #12
 80062a2:	af00      	add	r7, sp, #0
 80062a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80062a6:	bf00      	nop
 80062a8:	370c      	adds	r7, #12
 80062aa:	46bd      	mov	sp, r7
 80062ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b0:	4770      	bx	lr

080062b2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80062b2:	b480      	push	{r7}
 80062b4:	b083      	sub	sp, #12
 80062b6:	af00      	add	r7, sp, #0
 80062b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80062ba:	bf00      	nop
 80062bc:	370c      	adds	r7, #12
 80062be:	46bd      	mov	sp, r7
 80062c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c4:	4770      	bx	lr

080062c6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80062c6:	b480      	push	{r7}
 80062c8:	b083      	sub	sp, #12
 80062ca:	af00      	add	r7, sp, #0
 80062cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80062ce:	bf00      	nop
 80062d0:	370c      	adds	r7, #12
 80062d2:	46bd      	mov	sp, r7
 80062d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d8:	4770      	bx	lr
	...

080062dc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80062dc:	b480      	push	{r7}
 80062de:	b085      	sub	sp, #20
 80062e0:	af00      	add	r7, sp, #0
 80062e2:	6078      	str	r0, [r7, #4]
 80062e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	4a46      	ldr	r2, [pc, #280]	@ (8006408 <TIM_Base_SetConfig+0x12c>)
 80062f0:	4293      	cmp	r3, r2
 80062f2:	d013      	beq.n	800631c <TIM_Base_SetConfig+0x40>
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80062fa:	d00f      	beq.n	800631c <TIM_Base_SetConfig+0x40>
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	4a43      	ldr	r2, [pc, #268]	@ (800640c <TIM_Base_SetConfig+0x130>)
 8006300:	4293      	cmp	r3, r2
 8006302:	d00b      	beq.n	800631c <TIM_Base_SetConfig+0x40>
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	4a42      	ldr	r2, [pc, #264]	@ (8006410 <TIM_Base_SetConfig+0x134>)
 8006308:	4293      	cmp	r3, r2
 800630a:	d007      	beq.n	800631c <TIM_Base_SetConfig+0x40>
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	4a41      	ldr	r2, [pc, #260]	@ (8006414 <TIM_Base_SetConfig+0x138>)
 8006310:	4293      	cmp	r3, r2
 8006312:	d003      	beq.n	800631c <TIM_Base_SetConfig+0x40>
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	4a40      	ldr	r2, [pc, #256]	@ (8006418 <TIM_Base_SetConfig+0x13c>)
 8006318:	4293      	cmp	r3, r2
 800631a:	d108      	bne.n	800632e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006322:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006324:	683b      	ldr	r3, [r7, #0]
 8006326:	685b      	ldr	r3, [r3, #4]
 8006328:	68fa      	ldr	r2, [r7, #12]
 800632a:	4313      	orrs	r3, r2
 800632c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	4a35      	ldr	r2, [pc, #212]	@ (8006408 <TIM_Base_SetConfig+0x12c>)
 8006332:	4293      	cmp	r3, r2
 8006334:	d02b      	beq.n	800638e <TIM_Base_SetConfig+0xb2>
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800633c:	d027      	beq.n	800638e <TIM_Base_SetConfig+0xb2>
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	4a32      	ldr	r2, [pc, #200]	@ (800640c <TIM_Base_SetConfig+0x130>)
 8006342:	4293      	cmp	r3, r2
 8006344:	d023      	beq.n	800638e <TIM_Base_SetConfig+0xb2>
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	4a31      	ldr	r2, [pc, #196]	@ (8006410 <TIM_Base_SetConfig+0x134>)
 800634a:	4293      	cmp	r3, r2
 800634c:	d01f      	beq.n	800638e <TIM_Base_SetConfig+0xb2>
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	4a30      	ldr	r2, [pc, #192]	@ (8006414 <TIM_Base_SetConfig+0x138>)
 8006352:	4293      	cmp	r3, r2
 8006354:	d01b      	beq.n	800638e <TIM_Base_SetConfig+0xb2>
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	4a2f      	ldr	r2, [pc, #188]	@ (8006418 <TIM_Base_SetConfig+0x13c>)
 800635a:	4293      	cmp	r3, r2
 800635c:	d017      	beq.n	800638e <TIM_Base_SetConfig+0xb2>
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	4a2e      	ldr	r2, [pc, #184]	@ (800641c <TIM_Base_SetConfig+0x140>)
 8006362:	4293      	cmp	r3, r2
 8006364:	d013      	beq.n	800638e <TIM_Base_SetConfig+0xb2>
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	4a2d      	ldr	r2, [pc, #180]	@ (8006420 <TIM_Base_SetConfig+0x144>)
 800636a:	4293      	cmp	r3, r2
 800636c:	d00f      	beq.n	800638e <TIM_Base_SetConfig+0xb2>
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	4a2c      	ldr	r2, [pc, #176]	@ (8006424 <TIM_Base_SetConfig+0x148>)
 8006372:	4293      	cmp	r3, r2
 8006374:	d00b      	beq.n	800638e <TIM_Base_SetConfig+0xb2>
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	4a2b      	ldr	r2, [pc, #172]	@ (8006428 <TIM_Base_SetConfig+0x14c>)
 800637a:	4293      	cmp	r3, r2
 800637c:	d007      	beq.n	800638e <TIM_Base_SetConfig+0xb2>
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	4a2a      	ldr	r2, [pc, #168]	@ (800642c <TIM_Base_SetConfig+0x150>)
 8006382:	4293      	cmp	r3, r2
 8006384:	d003      	beq.n	800638e <TIM_Base_SetConfig+0xb2>
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	4a29      	ldr	r2, [pc, #164]	@ (8006430 <TIM_Base_SetConfig+0x154>)
 800638a:	4293      	cmp	r3, r2
 800638c:	d108      	bne.n	80063a0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006394:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006396:	683b      	ldr	r3, [r7, #0]
 8006398:	68db      	ldr	r3, [r3, #12]
 800639a:	68fa      	ldr	r2, [r7, #12]
 800639c:	4313      	orrs	r3, r2
 800639e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80063a6:	683b      	ldr	r3, [r7, #0]
 80063a8:	695b      	ldr	r3, [r3, #20]
 80063aa:	4313      	orrs	r3, r2
 80063ac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	68fa      	ldr	r2, [r7, #12]
 80063b2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80063b4:	683b      	ldr	r3, [r7, #0]
 80063b6:	689a      	ldr	r2, [r3, #8]
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80063bc:	683b      	ldr	r3, [r7, #0]
 80063be:	681a      	ldr	r2, [r3, #0]
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	4a10      	ldr	r2, [pc, #64]	@ (8006408 <TIM_Base_SetConfig+0x12c>)
 80063c8:	4293      	cmp	r3, r2
 80063ca:	d003      	beq.n	80063d4 <TIM_Base_SetConfig+0xf8>
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	4a12      	ldr	r2, [pc, #72]	@ (8006418 <TIM_Base_SetConfig+0x13c>)
 80063d0:	4293      	cmp	r3, r2
 80063d2:	d103      	bne.n	80063dc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80063d4:	683b      	ldr	r3, [r7, #0]
 80063d6:	691a      	ldr	r2, [r3, #16]
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	2201      	movs	r2, #1
 80063e0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	691b      	ldr	r3, [r3, #16]
 80063e6:	f003 0301 	and.w	r3, r3, #1
 80063ea:	2b01      	cmp	r3, #1
 80063ec:	d105      	bne.n	80063fa <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	691b      	ldr	r3, [r3, #16]
 80063f2:	f023 0201 	bic.w	r2, r3, #1
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	611a      	str	r2, [r3, #16]
  }
}
 80063fa:	bf00      	nop
 80063fc:	3714      	adds	r7, #20
 80063fe:	46bd      	mov	sp, r7
 8006400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006404:	4770      	bx	lr
 8006406:	bf00      	nop
 8006408:	40010000 	.word	0x40010000
 800640c:	40000400 	.word	0x40000400
 8006410:	40000800 	.word	0x40000800
 8006414:	40000c00 	.word	0x40000c00
 8006418:	40010400 	.word	0x40010400
 800641c:	40014000 	.word	0x40014000
 8006420:	40014400 	.word	0x40014400
 8006424:	40014800 	.word	0x40014800
 8006428:	40001800 	.word	0x40001800
 800642c:	40001c00 	.word	0x40001c00
 8006430:	40002000 	.word	0x40002000

08006434 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006434:	b480      	push	{r7}
 8006436:	b087      	sub	sp, #28
 8006438:	af00      	add	r7, sp, #0
 800643a:	60f8      	str	r0, [r7, #12]
 800643c:	60b9      	str	r1, [r7, #8]
 800643e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	6a1b      	ldr	r3, [r3, #32]
 8006444:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	6a1b      	ldr	r3, [r3, #32]
 800644a:	f023 0201 	bic.w	r2, r3, #1
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	699b      	ldr	r3, [r3, #24]
 8006456:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006458:	693b      	ldr	r3, [r7, #16]
 800645a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800645e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	011b      	lsls	r3, r3, #4
 8006464:	693a      	ldr	r2, [r7, #16]
 8006466:	4313      	orrs	r3, r2
 8006468:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800646a:	697b      	ldr	r3, [r7, #20]
 800646c:	f023 030a 	bic.w	r3, r3, #10
 8006470:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006472:	697a      	ldr	r2, [r7, #20]
 8006474:	68bb      	ldr	r3, [r7, #8]
 8006476:	4313      	orrs	r3, r2
 8006478:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	693a      	ldr	r2, [r7, #16]
 800647e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	697a      	ldr	r2, [r7, #20]
 8006484:	621a      	str	r2, [r3, #32]
}
 8006486:	bf00      	nop
 8006488:	371c      	adds	r7, #28
 800648a:	46bd      	mov	sp, r7
 800648c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006490:	4770      	bx	lr

08006492 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006492:	b480      	push	{r7}
 8006494:	b087      	sub	sp, #28
 8006496:	af00      	add	r7, sp, #0
 8006498:	60f8      	str	r0, [r7, #12]
 800649a:	60b9      	str	r1, [r7, #8]
 800649c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	6a1b      	ldr	r3, [r3, #32]
 80064a2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	6a1b      	ldr	r3, [r3, #32]
 80064a8:	f023 0210 	bic.w	r2, r3, #16
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	699b      	ldr	r3, [r3, #24]
 80064b4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80064b6:	693b      	ldr	r3, [r7, #16]
 80064b8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80064bc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	031b      	lsls	r3, r3, #12
 80064c2:	693a      	ldr	r2, [r7, #16]
 80064c4:	4313      	orrs	r3, r2
 80064c6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80064c8:	697b      	ldr	r3, [r7, #20]
 80064ca:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80064ce:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80064d0:	68bb      	ldr	r3, [r7, #8]
 80064d2:	011b      	lsls	r3, r3, #4
 80064d4:	697a      	ldr	r2, [r7, #20]
 80064d6:	4313      	orrs	r3, r2
 80064d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	693a      	ldr	r2, [r7, #16]
 80064de:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	697a      	ldr	r2, [r7, #20]
 80064e4:	621a      	str	r2, [r3, #32]
}
 80064e6:	bf00      	nop
 80064e8:	371c      	adds	r7, #28
 80064ea:	46bd      	mov	sp, r7
 80064ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f0:	4770      	bx	lr

080064f2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80064f2:	b480      	push	{r7}
 80064f4:	b085      	sub	sp, #20
 80064f6:	af00      	add	r7, sp, #0
 80064f8:	6078      	str	r0, [r7, #4]
 80064fa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	689b      	ldr	r3, [r3, #8]
 8006500:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006508:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800650a:	683a      	ldr	r2, [r7, #0]
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	4313      	orrs	r3, r2
 8006510:	f043 0307 	orr.w	r3, r3, #7
 8006514:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	68fa      	ldr	r2, [r7, #12]
 800651a:	609a      	str	r2, [r3, #8]
}
 800651c:	bf00      	nop
 800651e:	3714      	adds	r7, #20
 8006520:	46bd      	mov	sp, r7
 8006522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006526:	4770      	bx	lr

08006528 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006528:	b480      	push	{r7}
 800652a:	b087      	sub	sp, #28
 800652c:	af00      	add	r7, sp, #0
 800652e:	60f8      	str	r0, [r7, #12]
 8006530:	60b9      	str	r1, [r7, #8]
 8006532:	607a      	str	r2, [r7, #4]
 8006534:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	689b      	ldr	r3, [r3, #8]
 800653a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800653c:	697b      	ldr	r3, [r7, #20]
 800653e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006542:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006544:	683b      	ldr	r3, [r7, #0]
 8006546:	021a      	lsls	r2, r3, #8
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	431a      	orrs	r2, r3
 800654c:	68bb      	ldr	r3, [r7, #8]
 800654e:	4313      	orrs	r3, r2
 8006550:	697a      	ldr	r2, [r7, #20]
 8006552:	4313      	orrs	r3, r2
 8006554:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	697a      	ldr	r2, [r7, #20]
 800655a:	609a      	str	r2, [r3, #8]
}
 800655c:	bf00      	nop
 800655e:	371c      	adds	r7, #28
 8006560:	46bd      	mov	sp, r7
 8006562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006566:	4770      	bx	lr

08006568 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006568:	b480      	push	{r7}
 800656a:	b085      	sub	sp, #20
 800656c:	af00      	add	r7, sp, #0
 800656e:	6078      	str	r0, [r7, #4]
 8006570:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006578:	2b01      	cmp	r3, #1
 800657a:	d101      	bne.n	8006580 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800657c:	2302      	movs	r3, #2
 800657e:	e05a      	b.n	8006636 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	2201      	movs	r2, #1
 8006584:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	2202      	movs	r2, #2
 800658c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	685b      	ldr	r3, [r3, #4]
 8006596:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	689b      	ldr	r3, [r3, #8]
 800659e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80065a6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80065a8:	683b      	ldr	r3, [r7, #0]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	68fa      	ldr	r2, [r7, #12]
 80065ae:	4313      	orrs	r3, r2
 80065b0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	68fa      	ldr	r2, [r7, #12]
 80065b8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	4a21      	ldr	r2, [pc, #132]	@ (8006644 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80065c0:	4293      	cmp	r3, r2
 80065c2:	d022      	beq.n	800660a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80065cc:	d01d      	beq.n	800660a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	4a1d      	ldr	r2, [pc, #116]	@ (8006648 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80065d4:	4293      	cmp	r3, r2
 80065d6:	d018      	beq.n	800660a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	4a1b      	ldr	r2, [pc, #108]	@ (800664c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80065de:	4293      	cmp	r3, r2
 80065e0:	d013      	beq.n	800660a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	4a1a      	ldr	r2, [pc, #104]	@ (8006650 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80065e8:	4293      	cmp	r3, r2
 80065ea:	d00e      	beq.n	800660a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	4a18      	ldr	r2, [pc, #96]	@ (8006654 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80065f2:	4293      	cmp	r3, r2
 80065f4:	d009      	beq.n	800660a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	4a17      	ldr	r2, [pc, #92]	@ (8006658 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80065fc:	4293      	cmp	r3, r2
 80065fe:	d004      	beq.n	800660a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	4a15      	ldr	r2, [pc, #84]	@ (800665c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006606:	4293      	cmp	r3, r2
 8006608:	d10c      	bne.n	8006624 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800660a:	68bb      	ldr	r3, [r7, #8]
 800660c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006610:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006612:	683b      	ldr	r3, [r7, #0]
 8006614:	685b      	ldr	r3, [r3, #4]
 8006616:	68ba      	ldr	r2, [r7, #8]
 8006618:	4313      	orrs	r3, r2
 800661a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	68ba      	ldr	r2, [r7, #8]
 8006622:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	2201      	movs	r2, #1
 8006628:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	2200      	movs	r2, #0
 8006630:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006634:	2300      	movs	r3, #0
}
 8006636:	4618      	mov	r0, r3
 8006638:	3714      	adds	r7, #20
 800663a:	46bd      	mov	sp, r7
 800663c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006640:	4770      	bx	lr
 8006642:	bf00      	nop
 8006644:	40010000 	.word	0x40010000
 8006648:	40000400 	.word	0x40000400
 800664c:	40000800 	.word	0x40000800
 8006650:	40000c00 	.word	0x40000c00
 8006654:	40010400 	.word	0x40010400
 8006658:	40014000 	.word	0x40014000
 800665c:	40001800 	.word	0x40001800

08006660 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006660:	b480      	push	{r7}
 8006662:	b083      	sub	sp, #12
 8006664:	af00      	add	r7, sp, #0
 8006666:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006668:	bf00      	nop
 800666a:	370c      	adds	r7, #12
 800666c:	46bd      	mov	sp, r7
 800666e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006672:	4770      	bx	lr

08006674 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006674:	b480      	push	{r7}
 8006676:	b083      	sub	sp, #12
 8006678:	af00      	add	r7, sp, #0
 800667a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800667c:	bf00      	nop
 800667e:	370c      	adds	r7, #12
 8006680:	46bd      	mov	sp, r7
 8006682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006686:	4770      	bx	lr

08006688 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006688:	b580      	push	{r7, lr}
 800668a:	b082      	sub	sp, #8
 800668c:	af00      	add	r7, sp, #0
 800668e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	2b00      	cmp	r3, #0
 8006694:	d101      	bne.n	800669a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006696:	2301      	movs	r3, #1
 8006698:	e042      	b.n	8006720 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80066a0:	b2db      	uxtb	r3, r3
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d106      	bne.n	80066b4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	2200      	movs	r2, #0
 80066aa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80066ae:	6878      	ldr	r0, [r7, #4]
 80066b0:	f7fb fd20 	bl	80020f4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	2224      	movs	r2, #36	@ 0x24
 80066b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	68da      	ldr	r2, [r3, #12]
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80066ca:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80066cc:	6878      	ldr	r0, [r7, #4]
 80066ce:	f000 ff6d 	bl	80075ac <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	691a      	ldr	r2, [r3, #16]
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80066e0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	695a      	ldr	r2, [r3, #20]
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80066f0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	68da      	ldr	r2, [r3, #12]
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006700:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	2200      	movs	r2, #0
 8006706:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	2220      	movs	r2, #32
 800670c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	2220      	movs	r2, #32
 8006714:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	2200      	movs	r2, #0
 800671c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800671e:	2300      	movs	r3, #0
}
 8006720:	4618      	mov	r0, r3
 8006722:	3708      	adds	r7, #8
 8006724:	46bd      	mov	sp, r7
 8006726:	bd80      	pop	{r7, pc}

08006728 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8006728:	b580      	push	{r7, lr}
 800672a:	b08c      	sub	sp, #48	@ 0x30
 800672c:	af00      	add	r7, sp, #0
 800672e:	60f8      	str	r0, [r7, #12]
 8006730:	60b9      	str	r1, [r7, #8]
 8006732:	4613      	mov	r3, r2
 8006734:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800673c:	b2db      	uxtb	r3, r3
 800673e:	2b20      	cmp	r3, #32
 8006740:	d156      	bne.n	80067f0 <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 8006742:	68bb      	ldr	r3, [r7, #8]
 8006744:	2b00      	cmp	r3, #0
 8006746:	d002      	beq.n	800674e <HAL_UART_Transmit_DMA+0x26>
 8006748:	88fb      	ldrh	r3, [r7, #6]
 800674a:	2b00      	cmp	r3, #0
 800674c:	d101      	bne.n	8006752 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800674e:	2301      	movs	r3, #1
 8006750:	e04f      	b.n	80067f2 <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 8006752:	68ba      	ldr	r2, [r7, #8]
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	88fa      	ldrh	r2, [r7, #6]
 800675c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	88fa      	ldrh	r2, [r7, #6]
 8006762:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	2200      	movs	r2, #0
 8006768:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	2221      	movs	r2, #33	@ 0x21
 800676e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006776:	4a21      	ldr	r2, [pc, #132]	@ (80067fc <HAL_UART_Transmit_DMA+0xd4>)
 8006778:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800677e:	4a20      	ldr	r2, [pc, #128]	@ (8006800 <HAL_UART_Transmit_DMA+0xd8>)
 8006780:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006786:	4a1f      	ldr	r2, [pc, #124]	@ (8006804 <HAL_UART_Transmit_DMA+0xdc>)
 8006788:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800678e:	2200      	movs	r2, #0
 8006790:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 8006792:	f107 0308 	add.w	r3, r7, #8
 8006796:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 800679c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800679e:	6819      	ldr	r1, [r3, #0]
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	3304      	adds	r3, #4
 80067a6:	461a      	mov	r2, r3
 80067a8:	88fb      	ldrh	r3, [r7, #6]
 80067aa:	f7fc f8a5 	bl	80028f8 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80067b6:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	3314      	adds	r3, #20
 80067be:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067c0:	69bb      	ldr	r3, [r7, #24]
 80067c2:	e853 3f00 	ldrex	r3, [r3]
 80067c6:	617b      	str	r3, [r7, #20]
   return(result);
 80067c8:	697b      	ldr	r3, [r7, #20]
 80067ca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80067ce:	62bb      	str	r3, [r7, #40]	@ 0x28
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	3314      	adds	r3, #20
 80067d6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80067d8:	627a      	str	r2, [r7, #36]	@ 0x24
 80067da:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067dc:	6a39      	ldr	r1, [r7, #32]
 80067de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80067e0:	e841 2300 	strex	r3, r2, [r1]
 80067e4:	61fb      	str	r3, [r7, #28]
   return(result);
 80067e6:	69fb      	ldr	r3, [r7, #28]
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d1e5      	bne.n	80067b8 <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 80067ec:	2300      	movs	r3, #0
 80067ee:	e000      	b.n	80067f2 <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 80067f0:	2302      	movs	r3, #2
  }
}
 80067f2:	4618      	mov	r0, r3
 80067f4:	3730      	adds	r7, #48	@ 0x30
 80067f6:	46bd      	mov	sp, r7
 80067f8:	bd80      	pop	{r7, pc}
 80067fa:	bf00      	nop
 80067fc:	08006e39 	.word	0x08006e39
 8006800:	08006ed3 	.word	0x08006ed3
 8006804:	08007057 	.word	0x08007057

08006808 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006808:	b580      	push	{r7, lr}
 800680a:	b08c      	sub	sp, #48	@ 0x30
 800680c:	af00      	add	r7, sp, #0
 800680e:	60f8      	str	r0, [r7, #12]
 8006810:	60b9      	str	r1, [r7, #8]
 8006812:	4613      	mov	r3, r2
 8006814:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800681c:	b2db      	uxtb	r3, r3
 800681e:	2b20      	cmp	r3, #32
 8006820:	d14a      	bne.n	80068b8 <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
  {
    if ((pData == NULL) || (Size == 0U))
 8006822:	68bb      	ldr	r3, [r7, #8]
 8006824:	2b00      	cmp	r3, #0
 8006826:	d002      	beq.n	800682e <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 8006828:	88fb      	ldrh	r3, [r7, #6]
 800682a:	2b00      	cmp	r3, #0
 800682c:	d101      	bne.n	8006832 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 800682e:	2301      	movs	r3, #1
 8006830:	e043      	b.n	80068ba <HAL_UARTEx_ReceiveToIdle_DMA+0xb2>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	2201      	movs	r2, #1
 8006836:	631a      	str	r2, [r3, #48]	@ 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	2200      	movs	r2, #0
 800683c:	635a      	str	r2, [r3, #52]	@ 0x34

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 800683e:	88fb      	ldrh	r3, [r7, #6]
 8006840:	461a      	mov	r2, r3
 8006842:	68b9      	ldr	r1, [r7, #8]
 8006844:	68f8      	ldr	r0, [r7, #12]
 8006846:	f000 fc51 	bl	80070ec <UART_Start_Receive_DMA>
 800684a:	4603      	mov	r3, r0
 800684c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8006850:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8006854:	2b00      	cmp	r3, #0
 8006856:	d12c      	bne.n	80068b2 <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800685c:	2b01      	cmp	r3, #1
 800685e:	d125      	bne.n	80068ac <HAL_UARTEx_ReceiveToIdle_DMA+0xa4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006860:	2300      	movs	r3, #0
 8006862:	613b      	str	r3, [r7, #16]
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	613b      	str	r3, [r7, #16]
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	685b      	ldr	r3, [r3, #4]
 8006872:	613b      	str	r3, [r7, #16]
 8006874:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	330c      	adds	r3, #12
 800687c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800687e:	69bb      	ldr	r3, [r7, #24]
 8006880:	e853 3f00 	ldrex	r3, [r3]
 8006884:	617b      	str	r3, [r7, #20]
   return(result);
 8006886:	697b      	ldr	r3, [r7, #20]
 8006888:	f043 0310 	orr.w	r3, r3, #16
 800688c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	330c      	adds	r3, #12
 8006894:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006896:	627a      	str	r2, [r7, #36]	@ 0x24
 8006898:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800689a:	6a39      	ldr	r1, [r7, #32]
 800689c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800689e:	e841 2300 	strex	r3, r2, [r1]
 80068a2:	61fb      	str	r3, [r7, #28]
   return(result);
 80068a4:	69fb      	ldr	r3, [r7, #28]
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d1e5      	bne.n	8006876 <HAL_UARTEx_ReceiveToIdle_DMA+0x6e>
 80068aa:	e002      	b.n	80068b2 <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 80068ac:	2301      	movs	r3, #1
 80068ae:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 80068b2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80068b6:	e000      	b.n	80068ba <HAL_UARTEx_ReceiveToIdle_DMA+0xb2>
  }
  else
  {
    return HAL_BUSY;
 80068b8:	2302      	movs	r3, #2
  }
}
 80068ba:	4618      	mov	r0, r3
 80068bc:	3730      	adds	r7, #48	@ 0x30
 80068be:	46bd      	mov	sp, r7
 80068c0:	bd80      	pop	{r7, pc}
	...

080068c4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80068c4:	b580      	push	{r7, lr}
 80068c6:	b0ba      	sub	sp, #232	@ 0xe8
 80068c8:	af00      	add	r7, sp, #0
 80068ca:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	68db      	ldr	r3, [r3, #12]
 80068dc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	695b      	ldr	r3, [r3, #20]
 80068e6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80068ea:	2300      	movs	r3, #0
 80068ec:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80068f0:	2300      	movs	r3, #0
 80068f2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80068f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80068fa:	f003 030f 	and.w	r3, r3, #15
 80068fe:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8006902:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006906:	2b00      	cmp	r3, #0
 8006908:	d10f      	bne.n	800692a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800690a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800690e:	f003 0320 	and.w	r3, r3, #32
 8006912:	2b00      	cmp	r3, #0
 8006914:	d009      	beq.n	800692a <HAL_UART_IRQHandler+0x66>
 8006916:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800691a:	f003 0320 	and.w	r3, r3, #32
 800691e:	2b00      	cmp	r3, #0
 8006920:	d003      	beq.n	800692a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8006922:	6878      	ldr	r0, [r7, #4]
 8006924:	f000 fd83 	bl	800742e <UART_Receive_IT>
      return;
 8006928:	e25b      	b.n	8006de2 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800692a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800692e:	2b00      	cmp	r3, #0
 8006930:	f000 80de 	beq.w	8006af0 <HAL_UART_IRQHandler+0x22c>
 8006934:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006938:	f003 0301 	and.w	r3, r3, #1
 800693c:	2b00      	cmp	r3, #0
 800693e:	d106      	bne.n	800694e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006940:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006944:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8006948:	2b00      	cmp	r3, #0
 800694a:	f000 80d1 	beq.w	8006af0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800694e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006952:	f003 0301 	and.w	r3, r3, #1
 8006956:	2b00      	cmp	r3, #0
 8006958:	d00b      	beq.n	8006972 <HAL_UART_IRQHandler+0xae>
 800695a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800695e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006962:	2b00      	cmp	r3, #0
 8006964:	d005      	beq.n	8006972 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800696a:	f043 0201 	orr.w	r2, r3, #1
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006972:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006976:	f003 0304 	and.w	r3, r3, #4
 800697a:	2b00      	cmp	r3, #0
 800697c:	d00b      	beq.n	8006996 <HAL_UART_IRQHandler+0xd2>
 800697e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006982:	f003 0301 	and.w	r3, r3, #1
 8006986:	2b00      	cmp	r3, #0
 8006988:	d005      	beq.n	8006996 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800698e:	f043 0202 	orr.w	r2, r3, #2
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006996:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800699a:	f003 0302 	and.w	r3, r3, #2
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d00b      	beq.n	80069ba <HAL_UART_IRQHandler+0xf6>
 80069a2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80069a6:	f003 0301 	and.w	r3, r3, #1
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d005      	beq.n	80069ba <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80069b2:	f043 0204 	orr.w	r2, r3, #4
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80069ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80069be:	f003 0308 	and.w	r3, r3, #8
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d011      	beq.n	80069ea <HAL_UART_IRQHandler+0x126>
 80069c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80069ca:	f003 0320 	and.w	r3, r3, #32
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d105      	bne.n	80069de <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80069d2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80069d6:	f003 0301 	and.w	r3, r3, #1
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d005      	beq.n	80069ea <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80069e2:	f043 0208 	orr.w	r2, r3, #8
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	f000 81f2 	beq.w	8006dd8 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80069f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80069f8:	f003 0320 	and.w	r3, r3, #32
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d008      	beq.n	8006a12 <HAL_UART_IRQHandler+0x14e>
 8006a00:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006a04:	f003 0320 	and.w	r3, r3, #32
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d002      	beq.n	8006a12 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006a0c:	6878      	ldr	r0, [r7, #4]
 8006a0e:	f000 fd0e 	bl	800742e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	695b      	ldr	r3, [r3, #20]
 8006a18:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006a1c:	2b40      	cmp	r3, #64	@ 0x40
 8006a1e:	bf0c      	ite	eq
 8006a20:	2301      	moveq	r3, #1
 8006a22:	2300      	movne	r3, #0
 8006a24:	b2db      	uxtb	r3, r3
 8006a26:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006a2e:	f003 0308 	and.w	r3, r3, #8
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d103      	bne.n	8006a3e <HAL_UART_IRQHandler+0x17a>
 8006a36:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d04f      	beq.n	8006ade <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006a3e:	6878      	ldr	r0, [r7, #4]
 8006a40:	f000 fc16 	bl	8007270 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	695b      	ldr	r3, [r3, #20]
 8006a4a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006a4e:	2b40      	cmp	r3, #64	@ 0x40
 8006a50:	d141      	bne.n	8006ad6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	3314      	adds	r3, #20
 8006a58:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a5c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006a60:	e853 3f00 	ldrex	r3, [r3]
 8006a64:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8006a68:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006a6c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006a70:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	3314      	adds	r3, #20
 8006a7a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8006a7e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8006a82:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a86:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8006a8a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8006a8e:	e841 2300 	strex	r3, r2, [r1]
 8006a92:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8006a96:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d1d9      	bne.n	8006a52 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d013      	beq.n	8006ace <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006aaa:	4a7e      	ldr	r2, [pc, #504]	@ (8006ca4 <HAL_UART_IRQHandler+0x3e0>)
 8006aac:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006ab2:	4618      	mov	r0, r3
 8006ab4:	f7fb ffe8 	bl	8002a88 <HAL_DMA_Abort_IT>
 8006ab8:	4603      	mov	r3, r0
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d016      	beq.n	8006aec <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006ac2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006ac4:	687a      	ldr	r2, [r7, #4]
 8006ac6:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8006ac8:	4610      	mov	r0, r2
 8006aca:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006acc:	e00e      	b.n	8006aec <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006ace:	6878      	ldr	r0, [r7, #4]
 8006ad0:	f000 f9a8 	bl	8006e24 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ad4:	e00a      	b.n	8006aec <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006ad6:	6878      	ldr	r0, [r7, #4]
 8006ad8:	f000 f9a4 	bl	8006e24 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006adc:	e006      	b.n	8006aec <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006ade:	6878      	ldr	r0, [r7, #4]
 8006ae0:	f000 f9a0 	bl	8006e24 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	2200      	movs	r2, #0
 8006ae8:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8006aea:	e175      	b.n	8006dd8 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006aec:	bf00      	nop
    return;
 8006aee:	e173      	b.n	8006dd8 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006af4:	2b01      	cmp	r3, #1
 8006af6:	f040 814f 	bne.w	8006d98 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006afa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006afe:	f003 0310 	and.w	r3, r3, #16
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	f000 8148 	beq.w	8006d98 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006b08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006b0c:	f003 0310 	and.w	r3, r3, #16
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	f000 8141 	beq.w	8006d98 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006b16:	2300      	movs	r3, #0
 8006b18:	60bb      	str	r3, [r7, #8]
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	60bb      	str	r3, [r7, #8]
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	685b      	ldr	r3, [r3, #4]
 8006b28:	60bb      	str	r3, [r7, #8]
 8006b2a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	695b      	ldr	r3, [r3, #20]
 8006b32:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006b36:	2b40      	cmp	r3, #64	@ 0x40
 8006b38:	f040 80b6 	bne.w	8006ca8 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	685b      	ldr	r3, [r3, #4]
 8006b44:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006b48:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	f000 8145 	beq.w	8006ddc <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006b56:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006b5a:	429a      	cmp	r2, r3
 8006b5c:	f080 813e 	bcs.w	8006ddc <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006b66:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006b6c:	69db      	ldr	r3, [r3, #28]
 8006b6e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006b72:	f000 8088 	beq.w	8006c86 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	330c      	adds	r3, #12
 8006b7c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b80:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006b84:	e853 3f00 	ldrex	r3, [r3]
 8006b88:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8006b8c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006b90:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006b94:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	330c      	adds	r3, #12
 8006b9e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8006ba2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006ba6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006baa:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8006bae:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8006bb2:	e841 2300 	strex	r3, r2, [r1]
 8006bb6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8006bba:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d1d9      	bne.n	8006b76 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	3314      	adds	r3, #20
 8006bc8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bca:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006bcc:	e853 3f00 	ldrex	r3, [r3]
 8006bd0:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8006bd2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006bd4:	f023 0301 	bic.w	r3, r3, #1
 8006bd8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	3314      	adds	r3, #20
 8006be2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8006be6:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8006bea:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bec:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8006bee:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8006bf2:	e841 2300 	strex	r3, r2, [r1]
 8006bf6:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8006bf8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d1e1      	bne.n	8006bc2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	3314      	adds	r3, #20
 8006c04:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c06:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006c08:	e853 3f00 	ldrex	r3, [r3]
 8006c0c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8006c0e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006c10:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006c14:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	3314      	adds	r3, #20
 8006c1e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8006c22:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006c24:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c26:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8006c28:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8006c2a:	e841 2300 	strex	r3, r2, [r1]
 8006c2e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006c30:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d1e3      	bne.n	8006bfe <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	2220      	movs	r2, #32
 8006c3a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	2200      	movs	r2, #0
 8006c42:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	330c      	adds	r3, #12
 8006c4a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c4c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006c4e:	e853 3f00 	ldrex	r3, [r3]
 8006c52:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006c54:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006c56:	f023 0310 	bic.w	r3, r3, #16
 8006c5a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	330c      	adds	r3, #12
 8006c64:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8006c68:	65ba      	str	r2, [r7, #88]	@ 0x58
 8006c6a:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c6c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006c6e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006c70:	e841 2300 	strex	r3, r2, [r1]
 8006c74:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006c76:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d1e3      	bne.n	8006c44 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006c80:	4618      	mov	r0, r3
 8006c82:	f7fb fe91 	bl	80029a8 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	2202      	movs	r2, #2
 8006c8a:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006c94:	b29b      	uxth	r3, r3
 8006c96:	1ad3      	subs	r3, r2, r3
 8006c98:	b29b      	uxth	r3, r3
 8006c9a:	4619      	mov	r1, r3
 8006c9c:	6878      	ldr	r0, [r7, #4]
 8006c9e:	f7fa fd99 	bl	80017d4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006ca2:	e09b      	b.n	8006ddc <HAL_UART_IRQHandler+0x518>
 8006ca4:	08007337 	.word	0x08007337
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006cb0:	b29b      	uxth	r3, r3
 8006cb2:	1ad3      	subs	r3, r2, r3
 8006cb4:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006cbc:	b29b      	uxth	r3, r3
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	f000 808e 	beq.w	8006de0 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8006cc4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	f000 8089 	beq.w	8006de0 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	330c      	adds	r3, #12
 8006cd4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cd6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006cd8:	e853 3f00 	ldrex	r3, [r3]
 8006cdc:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006cde:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006ce0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006ce4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	330c      	adds	r3, #12
 8006cee:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8006cf2:	647a      	str	r2, [r7, #68]	@ 0x44
 8006cf4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cf6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006cf8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006cfa:	e841 2300 	strex	r3, r2, [r1]
 8006cfe:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006d00:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d1e3      	bne.n	8006cce <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	3314      	adds	r3, #20
 8006d0c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d10:	e853 3f00 	ldrex	r3, [r3]
 8006d14:	623b      	str	r3, [r7, #32]
   return(result);
 8006d16:	6a3b      	ldr	r3, [r7, #32]
 8006d18:	f023 0301 	bic.w	r3, r3, #1
 8006d1c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	3314      	adds	r3, #20
 8006d26:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8006d2a:	633a      	str	r2, [r7, #48]	@ 0x30
 8006d2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d2e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006d30:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006d32:	e841 2300 	strex	r3, r2, [r1]
 8006d36:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006d38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d1e3      	bne.n	8006d06 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	2220      	movs	r2, #32
 8006d42:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	2200      	movs	r2, #0
 8006d4a:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	330c      	adds	r3, #12
 8006d52:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d54:	693b      	ldr	r3, [r7, #16]
 8006d56:	e853 3f00 	ldrex	r3, [r3]
 8006d5a:	60fb      	str	r3, [r7, #12]
   return(result);
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	f023 0310 	bic.w	r3, r3, #16
 8006d62:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	330c      	adds	r3, #12
 8006d6c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8006d70:	61fa      	str	r2, [r7, #28]
 8006d72:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d74:	69b9      	ldr	r1, [r7, #24]
 8006d76:	69fa      	ldr	r2, [r7, #28]
 8006d78:	e841 2300 	strex	r3, r2, [r1]
 8006d7c:	617b      	str	r3, [r7, #20]
   return(result);
 8006d7e:	697b      	ldr	r3, [r7, #20]
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d1e3      	bne.n	8006d4c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	2202      	movs	r2, #2
 8006d88:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006d8a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006d8e:	4619      	mov	r1, r3
 8006d90:	6878      	ldr	r0, [r7, #4]
 8006d92:	f7fa fd1f 	bl	80017d4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006d96:	e023      	b.n	8006de0 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006d98:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006d9c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d009      	beq.n	8006db8 <HAL_UART_IRQHandler+0x4f4>
 8006da4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006da8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d003      	beq.n	8006db8 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8006db0:	6878      	ldr	r0, [r7, #4]
 8006db2:	f000 fad4 	bl	800735e <UART_Transmit_IT>
    return;
 8006db6:	e014      	b.n	8006de2 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006db8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006dbc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d00e      	beq.n	8006de2 <HAL_UART_IRQHandler+0x51e>
 8006dc4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006dc8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d008      	beq.n	8006de2 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8006dd0:	6878      	ldr	r0, [r7, #4]
 8006dd2:	f000 fb14 	bl	80073fe <UART_EndTransmit_IT>
    return;
 8006dd6:	e004      	b.n	8006de2 <HAL_UART_IRQHandler+0x51e>
    return;
 8006dd8:	bf00      	nop
 8006dda:	e002      	b.n	8006de2 <HAL_UART_IRQHandler+0x51e>
      return;
 8006ddc:	bf00      	nop
 8006dde:	e000      	b.n	8006de2 <HAL_UART_IRQHandler+0x51e>
      return;
 8006de0:	bf00      	nop
  }
}
 8006de2:	37e8      	adds	r7, #232	@ 0xe8
 8006de4:	46bd      	mov	sp, r7
 8006de6:	bd80      	pop	{r7, pc}

08006de8 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006de8:	b480      	push	{r7}
 8006dea:	b083      	sub	sp, #12
 8006dec:	af00      	add	r7, sp, #0
 8006dee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8006df0:	bf00      	nop
 8006df2:	370c      	adds	r7, #12
 8006df4:	46bd      	mov	sp, r7
 8006df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dfa:	4770      	bx	lr

08006dfc <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006dfc:	b480      	push	{r7}
 8006dfe:	b083      	sub	sp, #12
 8006e00:	af00      	add	r7, sp, #0
 8006e02:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8006e04:	bf00      	nop
 8006e06:	370c      	adds	r7, #12
 8006e08:	46bd      	mov	sp, r7
 8006e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e0e:	4770      	bx	lr

08006e10 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006e10:	b480      	push	{r7}
 8006e12:	b083      	sub	sp, #12
 8006e14:	af00      	add	r7, sp, #0
 8006e16:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8006e18:	bf00      	nop
 8006e1a:	370c      	adds	r7, #12
 8006e1c:	46bd      	mov	sp, r7
 8006e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e22:	4770      	bx	lr

08006e24 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006e24:	b480      	push	{r7}
 8006e26:	b083      	sub	sp, #12
 8006e28:	af00      	add	r7, sp, #0
 8006e2a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006e2c:	bf00      	nop
 8006e2e:	370c      	adds	r7, #12
 8006e30:	46bd      	mov	sp, r7
 8006e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e36:	4770      	bx	lr

08006e38 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006e38:	b580      	push	{r7, lr}
 8006e3a:	b090      	sub	sp, #64	@ 0x40
 8006e3c:	af00      	add	r7, sp, #0
 8006e3e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e44:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d137      	bne.n	8006ec4 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8006e54:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006e56:	2200      	movs	r2, #0
 8006e58:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006e5a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	3314      	adds	r3, #20
 8006e60:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e64:	e853 3f00 	ldrex	r3, [r3]
 8006e68:	623b      	str	r3, [r7, #32]
   return(result);
 8006e6a:	6a3b      	ldr	r3, [r7, #32]
 8006e6c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006e70:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006e72:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	3314      	adds	r3, #20
 8006e78:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006e7a:	633a      	str	r2, [r7, #48]	@ 0x30
 8006e7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e7e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006e80:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006e82:	e841 2300 	strex	r3, r2, [r1]
 8006e86:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006e88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d1e5      	bne.n	8006e5a <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006e8e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	330c      	adds	r3, #12
 8006e94:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e96:	693b      	ldr	r3, [r7, #16]
 8006e98:	e853 3f00 	ldrex	r3, [r3]
 8006e9c:	60fb      	str	r3, [r7, #12]
   return(result);
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006ea4:	637b      	str	r3, [r7, #52]	@ 0x34
 8006ea6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	330c      	adds	r3, #12
 8006eac:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006eae:	61fa      	str	r2, [r7, #28]
 8006eb0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006eb2:	69b9      	ldr	r1, [r7, #24]
 8006eb4:	69fa      	ldr	r2, [r7, #28]
 8006eb6:	e841 2300 	strex	r3, r2, [r1]
 8006eba:	617b      	str	r3, [r7, #20]
   return(result);
 8006ebc:	697b      	ldr	r3, [r7, #20]
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d1e5      	bne.n	8006e8e <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006ec2:	e002      	b.n	8006eca <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8006ec4:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8006ec6:	f7fa fc6f 	bl	80017a8 <HAL_UART_TxCpltCallback>
}
 8006eca:	bf00      	nop
 8006ecc:	3740      	adds	r7, #64	@ 0x40
 8006ece:	46bd      	mov	sp, r7
 8006ed0:	bd80      	pop	{r7, pc}

08006ed2 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006ed2:	b580      	push	{r7, lr}
 8006ed4:	b084      	sub	sp, #16
 8006ed6:	af00      	add	r7, sp, #0
 8006ed8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ede:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8006ee0:	68f8      	ldr	r0, [r7, #12]
 8006ee2:	f7ff ff81 	bl	8006de8 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006ee6:	bf00      	nop
 8006ee8:	3710      	adds	r7, #16
 8006eea:	46bd      	mov	sp, r7
 8006eec:	bd80      	pop	{r7, pc}

08006eee <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006eee:	b580      	push	{r7, lr}
 8006ef0:	b09c      	sub	sp, #112	@ 0x70
 8006ef2:	af00      	add	r7, sp, #0
 8006ef4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006efa:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d172      	bne.n	8006ff0 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8006f0a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006f0c:	2200      	movs	r2, #0
 8006f0e:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006f10:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	330c      	adds	r3, #12
 8006f16:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f18:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006f1a:	e853 3f00 	ldrex	r3, [r3]
 8006f1e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006f20:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006f22:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006f26:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006f28:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	330c      	adds	r3, #12
 8006f2e:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8006f30:	65ba      	str	r2, [r7, #88]	@ 0x58
 8006f32:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f34:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006f36:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006f38:	e841 2300 	strex	r3, r2, [r1]
 8006f3c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006f3e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d1e5      	bne.n	8006f10 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f44:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	3314      	adds	r3, #20
 8006f4a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f4e:	e853 3f00 	ldrex	r3, [r3]
 8006f52:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006f54:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006f56:	f023 0301 	bic.w	r3, r3, #1
 8006f5a:	667b      	str	r3, [r7, #100]	@ 0x64
 8006f5c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	3314      	adds	r3, #20
 8006f62:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8006f64:	647a      	str	r2, [r7, #68]	@ 0x44
 8006f66:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f68:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006f6a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006f6c:	e841 2300 	strex	r3, r2, [r1]
 8006f70:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006f72:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d1e5      	bne.n	8006f44 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006f78:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	3314      	adds	r3, #20
 8006f7e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f82:	e853 3f00 	ldrex	r3, [r3]
 8006f86:	623b      	str	r3, [r7, #32]
   return(result);
 8006f88:	6a3b      	ldr	r3, [r7, #32]
 8006f8a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006f8e:	663b      	str	r3, [r7, #96]	@ 0x60
 8006f90:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	3314      	adds	r3, #20
 8006f96:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8006f98:	633a      	str	r2, [r7, #48]	@ 0x30
 8006f9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f9c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006f9e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006fa0:	e841 2300 	strex	r3, r2, [r1]
 8006fa4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006fa6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d1e5      	bne.n	8006f78 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006fac:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006fae:	2220      	movs	r2, #32
 8006fb0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006fb4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006fb6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006fb8:	2b01      	cmp	r3, #1
 8006fba:	d119      	bne.n	8006ff0 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006fbc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	330c      	adds	r3, #12
 8006fc2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fc4:	693b      	ldr	r3, [r7, #16]
 8006fc6:	e853 3f00 	ldrex	r3, [r3]
 8006fca:	60fb      	str	r3, [r7, #12]
   return(result);
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	f023 0310 	bic.w	r3, r3, #16
 8006fd2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006fd4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	330c      	adds	r3, #12
 8006fda:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8006fdc:	61fa      	str	r2, [r7, #28]
 8006fde:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fe0:	69b9      	ldr	r1, [r7, #24]
 8006fe2:	69fa      	ldr	r2, [r7, #28]
 8006fe4:	e841 2300 	strex	r3, r2, [r1]
 8006fe8:	617b      	str	r3, [r7, #20]
   return(result);
 8006fea:	697b      	ldr	r3, [r7, #20]
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d1e5      	bne.n	8006fbc <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006ff0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006ff2:	2200      	movs	r2, #0
 8006ff4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006ff6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006ff8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ffa:	2b01      	cmp	r3, #1
 8006ffc:	d106      	bne.n	800700c <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006ffe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007000:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8007002:	4619      	mov	r1, r3
 8007004:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8007006:	f7fa fbe5 	bl	80017d4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800700a:	e002      	b.n	8007012 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 800700c:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800700e:	f7ff fef5 	bl	8006dfc <HAL_UART_RxCpltCallback>
}
 8007012:	bf00      	nop
 8007014:	3770      	adds	r7, #112	@ 0x70
 8007016:	46bd      	mov	sp, r7
 8007018:	bd80      	pop	{r7, pc}

0800701a <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800701a:	b580      	push	{r7, lr}
 800701c:	b084      	sub	sp, #16
 800701e:	af00      	add	r7, sp, #0
 8007020:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007026:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	2201      	movs	r2, #1
 800702c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007032:	2b01      	cmp	r3, #1
 8007034:	d108      	bne.n	8007048 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800703a:	085b      	lsrs	r3, r3, #1
 800703c:	b29b      	uxth	r3, r3
 800703e:	4619      	mov	r1, r3
 8007040:	68f8      	ldr	r0, [r7, #12]
 8007042:	f7fa fbc7 	bl	80017d4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007046:	e002      	b.n	800704e <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8007048:	68f8      	ldr	r0, [r7, #12]
 800704a:	f7ff fee1 	bl	8006e10 <HAL_UART_RxHalfCpltCallback>
}
 800704e:	bf00      	nop
 8007050:	3710      	adds	r7, #16
 8007052:	46bd      	mov	sp, r7
 8007054:	bd80      	pop	{r7, pc}

08007056 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8007056:	b580      	push	{r7, lr}
 8007058:	b084      	sub	sp, #16
 800705a:	af00      	add	r7, sp, #0
 800705c:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800705e:	2300      	movs	r3, #0
 8007060:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007066:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8007068:	68bb      	ldr	r3, [r7, #8]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	695b      	ldr	r3, [r3, #20]
 800706e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007072:	2b80      	cmp	r3, #128	@ 0x80
 8007074:	bf0c      	ite	eq
 8007076:	2301      	moveq	r3, #1
 8007078:	2300      	movne	r3, #0
 800707a:	b2db      	uxtb	r3, r3
 800707c:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800707e:	68bb      	ldr	r3, [r7, #8]
 8007080:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007084:	b2db      	uxtb	r3, r3
 8007086:	2b21      	cmp	r3, #33	@ 0x21
 8007088:	d108      	bne.n	800709c <UART_DMAError+0x46>
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	2b00      	cmp	r3, #0
 800708e:	d005      	beq.n	800709c <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8007090:	68bb      	ldr	r3, [r7, #8]
 8007092:	2200      	movs	r2, #0
 8007094:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 8007096:	68b8      	ldr	r0, [r7, #8]
 8007098:	f000 f8c2 	bl	8007220 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800709c:	68bb      	ldr	r3, [r7, #8]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	695b      	ldr	r3, [r3, #20]
 80070a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80070a6:	2b40      	cmp	r3, #64	@ 0x40
 80070a8:	bf0c      	ite	eq
 80070aa:	2301      	moveq	r3, #1
 80070ac:	2300      	movne	r3, #0
 80070ae:	b2db      	uxtb	r3, r3
 80070b0:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80070b2:	68bb      	ldr	r3, [r7, #8]
 80070b4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80070b8:	b2db      	uxtb	r3, r3
 80070ba:	2b22      	cmp	r3, #34	@ 0x22
 80070bc:	d108      	bne.n	80070d0 <UART_DMAError+0x7a>
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d005      	beq.n	80070d0 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80070c4:	68bb      	ldr	r3, [r7, #8]
 80070c6:	2200      	movs	r2, #0
 80070c8:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 80070ca:	68b8      	ldr	r0, [r7, #8]
 80070cc:	f000 f8d0 	bl	8007270 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80070d0:	68bb      	ldr	r3, [r7, #8]
 80070d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80070d4:	f043 0210 	orr.w	r2, r3, #16
 80070d8:	68bb      	ldr	r3, [r7, #8]
 80070da:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80070dc:	68b8      	ldr	r0, [r7, #8]
 80070de:	f7ff fea1 	bl	8006e24 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80070e2:	bf00      	nop
 80070e4:	3710      	adds	r7, #16
 80070e6:	46bd      	mov	sp, r7
 80070e8:	bd80      	pop	{r7, pc}
	...

080070ec <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80070ec:	b580      	push	{r7, lr}
 80070ee:	b098      	sub	sp, #96	@ 0x60
 80070f0:	af00      	add	r7, sp, #0
 80070f2:	60f8      	str	r0, [r7, #12]
 80070f4:	60b9      	str	r1, [r7, #8]
 80070f6:	4613      	mov	r3, r2
 80070f8:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80070fa:	68ba      	ldr	r2, [r7, #8]
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	88fa      	ldrh	r2, [r7, #6]
 8007104:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	2200      	movs	r2, #0
 800710a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	2222      	movs	r2, #34	@ 0x22
 8007110:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007118:	4a3e      	ldr	r2, [pc, #248]	@ (8007214 <UART_Start_Receive_DMA+0x128>)
 800711a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007120:	4a3d      	ldr	r2, [pc, #244]	@ (8007218 <UART_Start_Receive_DMA+0x12c>)
 8007122:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007128:	4a3c      	ldr	r2, [pc, #240]	@ (800721c <UART_Start_Receive_DMA+0x130>)
 800712a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007130:	2200      	movs	r2, #0
 8007132:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8007134:	f107 0308 	add.w	r3, r7, #8
 8007138:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	3304      	adds	r3, #4
 8007144:	4619      	mov	r1, r3
 8007146:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007148:	681a      	ldr	r2, [r3, #0]
 800714a:	88fb      	ldrh	r3, [r7, #6]
 800714c:	f7fb fbd4 	bl	80028f8 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8007150:	2300      	movs	r3, #0
 8007152:	613b      	str	r3, [r7, #16]
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	613b      	str	r3, [r7, #16]
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	685b      	ldr	r3, [r3, #4]
 8007162:	613b      	str	r3, [r7, #16]
 8007164:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	691b      	ldr	r3, [r3, #16]
 800716a:	2b00      	cmp	r3, #0
 800716c:	d019      	beq.n	80071a2 <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	330c      	adds	r3, #12
 8007174:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007176:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007178:	e853 3f00 	ldrex	r3, [r3]
 800717c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800717e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007180:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007184:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	330c      	adds	r3, #12
 800718c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800718e:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8007190:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007192:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8007194:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007196:	e841 2300 	strex	r3, r2, [r1]
 800719a:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800719c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d1e5      	bne.n	800716e <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	3314      	adds	r3, #20
 80071a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80071ac:	e853 3f00 	ldrex	r3, [r3]
 80071b0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80071b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071b4:	f043 0301 	orr.w	r3, r3, #1
 80071b8:	657b      	str	r3, [r7, #84]	@ 0x54
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	3314      	adds	r3, #20
 80071c0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80071c2:	63ba      	str	r2, [r7, #56]	@ 0x38
 80071c4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071c6:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80071c8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80071ca:	e841 2300 	strex	r3, r2, [r1]
 80071ce:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80071d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d1e5      	bne.n	80071a2 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	3314      	adds	r3, #20
 80071dc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071de:	69bb      	ldr	r3, [r7, #24]
 80071e0:	e853 3f00 	ldrex	r3, [r3]
 80071e4:	617b      	str	r3, [r7, #20]
   return(result);
 80071e6:	697b      	ldr	r3, [r7, #20]
 80071e8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80071ec:	653b      	str	r3, [r7, #80]	@ 0x50
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	3314      	adds	r3, #20
 80071f4:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80071f6:	627a      	str	r2, [r7, #36]	@ 0x24
 80071f8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071fa:	6a39      	ldr	r1, [r7, #32]
 80071fc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80071fe:	e841 2300 	strex	r3, r2, [r1]
 8007202:	61fb      	str	r3, [r7, #28]
   return(result);
 8007204:	69fb      	ldr	r3, [r7, #28]
 8007206:	2b00      	cmp	r3, #0
 8007208:	d1e5      	bne.n	80071d6 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 800720a:	2300      	movs	r3, #0
}
 800720c:	4618      	mov	r0, r3
 800720e:	3760      	adds	r7, #96	@ 0x60
 8007210:	46bd      	mov	sp, r7
 8007212:	bd80      	pop	{r7, pc}
 8007214:	08006eef 	.word	0x08006eef
 8007218:	0800701b 	.word	0x0800701b
 800721c:	08007057 	.word	0x08007057

08007220 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8007220:	b480      	push	{r7}
 8007222:	b089      	sub	sp, #36	@ 0x24
 8007224:	af00      	add	r7, sp, #0
 8007226:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	330c      	adds	r3, #12
 800722e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	e853 3f00 	ldrex	r3, [r3]
 8007236:	60bb      	str	r3, [r7, #8]
   return(result);
 8007238:	68bb      	ldr	r3, [r7, #8]
 800723a:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800723e:	61fb      	str	r3, [r7, #28]
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	330c      	adds	r3, #12
 8007246:	69fa      	ldr	r2, [r7, #28]
 8007248:	61ba      	str	r2, [r7, #24]
 800724a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800724c:	6979      	ldr	r1, [r7, #20]
 800724e:	69ba      	ldr	r2, [r7, #24]
 8007250:	e841 2300 	strex	r3, r2, [r1]
 8007254:	613b      	str	r3, [r7, #16]
   return(result);
 8007256:	693b      	ldr	r3, [r7, #16]
 8007258:	2b00      	cmp	r3, #0
 800725a:	d1e5      	bne.n	8007228 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	2220      	movs	r2, #32
 8007260:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 8007264:	bf00      	nop
 8007266:	3724      	adds	r7, #36	@ 0x24
 8007268:	46bd      	mov	sp, r7
 800726a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800726e:	4770      	bx	lr

08007270 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007270:	b480      	push	{r7}
 8007272:	b095      	sub	sp, #84	@ 0x54
 8007274:	af00      	add	r7, sp, #0
 8007276:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	330c      	adds	r3, #12
 800727e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007280:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007282:	e853 3f00 	ldrex	r3, [r3]
 8007286:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007288:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800728a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800728e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	330c      	adds	r3, #12
 8007296:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007298:	643a      	str	r2, [r7, #64]	@ 0x40
 800729a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800729c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800729e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80072a0:	e841 2300 	strex	r3, r2, [r1]
 80072a4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80072a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d1e5      	bne.n	8007278 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	3314      	adds	r3, #20
 80072b2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072b4:	6a3b      	ldr	r3, [r7, #32]
 80072b6:	e853 3f00 	ldrex	r3, [r3]
 80072ba:	61fb      	str	r3, [r7, #28]
   return(result);
 80072bc:	69fb      	ldr	r3, [r7, #28]
 80072be:	f023 0301 	bic.w	r3, r3, #1
 80072c2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	3314      	adds	r3, #20
 80072ca:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80072cc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80072ce:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072d0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80072d2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80072d4:	e841 2300 	strex	r3, r2, [r1]
 80072d8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80072da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d1e5      	bne.n	80072ac <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80072e4:	2b01      	cmp	r3, #1
 80072e6:	d119      	bne.n	800731c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	330c      	adds	r3, #12
 80072ee:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	e853 3f00 	ldrex	r3, [r3]
 80072f6:	60bb      	str	r3, [r7, #8]
   return(result);
 80072f8:	68bb      	ldr	r3, [r7, #8]
 80072fa:	f023 0310 	bic.w	r3, r3, #16
 80072fe:	647b      	str	r3, [r7, #68]	@ 0x44
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	330c      	adds	r3, #12
 8007306:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007308:	61ba      	str	r2, [r7, #24]
 800730a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800730c:	6979      	ldr	r1, [r7, #20]
 800730e:	69ba      	ldr	r2, [r7, #24]
 8007310:	e841 2300 	strex	r3, r2, [r1]
 8007314:	613b      	str	r3, [r7, #16]
   return(result);
 8007316:	693b      	ldr	r3, [r7, #16]
 8007318:	2b00      	cmp	r3, #0
 800731a:	d1e5      	bne.n	80072e8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	2220      	movs	r2, #32
 8007320:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	2200      	movs	r2, #0
 8007328:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800732a:	bf00      	nop
 800732c:	3754      	adds	r7, #84	@ 0x54
 800732e:	46bd      	mov	sp, r7
 8007330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007334:	4770      	bx	lr

08007336 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007336:	b580      	push	{r7, lr}
 8007338:	b084      	sub	sp, #16
 800733a:	af00      	add	r7, sp, #0
 800733c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007342:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	2200      	movs	r2, #0
 8007348:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	2200      	movs	r2, #0
 800734e:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007350:	68f8      	ldr	r0, [r7, #12]
 8007352:	f7ff fd67 	bl	8006e24 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007356:	bf00      	nop
 8007358:	3710      	adds	r7, #16
 800735a:	46bd      	mov	sp, r7
 800735c:	bd80      	pop	{r7, pc}

0800735e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800735e:	b480      	push	{r7}
 8007360:	b085      	sub	sp, #20
 8007362:	af00      	add	r7, sp, #0
 8007364:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800736c:	b2db      	uxtb	r3, r3
 800736e:	2b21      	cmp	r3, #33	@ 0x21
 8007370:	d13e      	bne.n	80073f0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	689b      	ldr	r3, [r3, #8]
 8007376:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800737a:	d114      	bne.n	80073a6 <UART_Transmit_IT+0x48>
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	691b      	ldr	r3, [r3, #16]
 8007380:	2b00      	cmp	r3, #0
 8007382:	d110      	bne.n	80073a6 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	6a1b      	ldr	r3, [r3, #32]
 8007388:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	881b      	ldrh	r3, [r3, #0]
 800738e:	461a      	mov	r2, r3
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007398:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	6a1b      	ldr	r3, [r3, #32]
 800739e:	1c9a      	adds	r2, r3, #2
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	621a      	str	r2, [r3, #32]
 80073a4:	e008      	b.n	80073b8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	6a1b      	ldr	r3, [r3, #32]
 80073aa:	1c59      	adds	r1, r3, #1
 80073ac:	687a      	ldr	r2, [r7, #4]
 80073ae:	6211      	str	r1, [r2, #32]
 80073b0:	781a      	ldrb	r2, [r3, #0]
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80073bc:	b29b      	uxth	r3, r3
 80073be:	3b01      	subs	r3, #1
 80073c0:	b29b      	uxth	r3, r3
 80073c2:	687a      	ldr	r2, [r7, #4]
 80073c4:	4619      	mov	r1, r3
 80073c6:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d10f      	bne.n	80073ec <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	68da      	ldr	r2, [r3, #12]
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80073da:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	68da      	ldr	r2, [r3, #12]
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80073ea:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80073ec:	2300      	movs	r3, #0
 80073ee:	e000      	b.n	80073f2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80073f0:	2302      	movs	r3, #2
  }
}
 80073f2:	4618      	mov	r0, r3
 80073f4:	3714      	adds	r7, #20
 80073f6:	46bd      	mov	sp, r7
 80073f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073fc:	4770      	bx	lr

080073fe <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80073fe:	b580      	push	{r7, lr}
 8007400:	b082      	sub	sp, #8
 8007402:	af00      	add	r7, sp, #0
 8007404:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	68da      	ldr	r2, [r3, #12]
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007414:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	2220      	movs	r2, #32
 800741a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800741e:	6878      	ldr	r0, [r7, #4]
 8007420:	f7fa f9c2 	bl	80017a8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007424:	2300      	movs	r3, #0
}
 8007426:	4618      	mov	r0, r3
 8007428:	3708      	adds	r7, #8
 800742a:	46bd      	mov	sp, r7
 800742c:	bd80      	pop	{r7, pc}

0800742e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800742e:	b580      	push	{r7, lr}
 8007430:	b08c      	sub	sp, #48	@ 0x30
 8007432:	af00      	add	r7, sp, #0
 8007434:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800743c:	b2db      	uxtb	r3, r3
 800743e:	2b22      	cmp	r3, #34	@ 0x22
 8007440:	f040 80ae 	bne.w	80075a0 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	689b      	ldr	r3, [r3, #8]
 8007448:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800744c:	d117      	bne.n	800747e <UART_Receive_IT+0x50>
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	691b      	ldr	r3, [r3, #16]
 8007452:	2b00      	cmp	r3, #0
 8007454:	d113      	bne.n	800747e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007456:	2300      	movs	r3, #0
 8007458:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800745e:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	685b      	ldr	r3, [r3, #4]
 8007466:	b29b      	uxth	r3, r3
 8007468:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800746c:	b29a      	uxth	r2, r3
 800746e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007470:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007476:	1c9a      	adds	r2, r3, #2
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	629a      	str	r2, [r3, #40]	@ 0x28
 800747c:	e026      	b.n	80074cc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007482:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8007484:	2300      	movs	r3, #0
 8007486:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	689b      	ldr	r3, [r3, #8]
 800748c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007490:	d007      	beq.n	80074a2 <UART_Receive_IT+0x74>
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	689b      	ldr	r3, [r3, #8]
 8007496:	2b00      	cmp	r3, #0
 8007498:	d10a      	bne.n	80074b0 <UART_Receive_IT+0x82>
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	691b      	ldr	r3, [r3, #16]
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d106      	bne.n	80074b0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	685b      	ldr	r3, [r3, #4]
 80074a8:	b2da      	uxtb	r2, r3
 80074aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80074ac:	701a      	strb	r2, [r3, #0]
 80074ae:	e008      	b.n	80074c2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	685b      	ldr	r3, [r3, #4]
 80074b6:	b2db      	uxtb	r3, r3
 80074b8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80074bc:	b2da      	uxtb	r2, r3
 80074be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80074c0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80074c6:	1c5a      	adds	r2, r3, #1
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80074d0:	b29b      	uxth	r3, r3
 80074d2:	3b01      	subs	r3, #1
 80074d4:	b29b      	uxth	r3, r3
 80074d6:	687a      	ldr	r2, [r7, #4]
 80074d8:	4619      	mov	r1, r3
 80074da:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d15d      	bne.n	800759c <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	68da      	ldr	r2, [r3, #12]
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	f022 0220 	bic.w	r2, r2, #32
 80074ee:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	68da      	ldr	r2, [r3, #12]
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80074fe:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	695a      	ldr	r2, [r3, #20]
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	f022 0201 	bic.w	r2, r2, #1
 800750e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	2220      	movs	r2, #32
 8007514:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	2200      	movs	r2, #0
 800751c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007522:	2b01      	cmp	r3, #1
 8007524:	d135      	bne.n	8007592 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	2200      	movs	r2, #0
 800752a:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	330c      	adds	r3, #12
 8007532:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007534:	697b      	ldr	r3, [r7, #20]
 8007536:	e853 3f00 	ldrex	r3, [r3]
 800753a:	613b      	str	r3, [r7, #16]
   return(result);
 800753c:	693b      	ldr	r3, [r7, #16]
 800753e:	f023 0310 	bic.w	r3, r3, #16
 8007542:	627b      	str	r3, [r7, #36]	@ 0x24
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	330c      	adds	r3, #12
 800754a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800754c:	623a      	str	r2, [r7, #32]
 800754e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007550:	69f9      	ldr	r1, [r7, #28]
 8007552:	6a3a      	ldr	r2, [r7, #32]
 8007554:	e841 2300 	strex	r3, r2, [r1]
 8007558:	61bb      	str	r3, [r7, #24]
   return(result);
 800755a:	69bb      	ldr	r3, [r7, #24]
 800755c:	2b00      	cmp	r3, #0
 800755e:	d1e5      	bne.n	800752c <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	f003 0310 	and.w	r3, r3, #16
 800756a:	2b10      	cmp	r3, #16
 800756c:	d10a      	bne.n	8007584 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800756e:	2300      	movs	r3, #0
 8007570:	60fb      	str	r3, [r7, #12]
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	60fb      	str	r3, [r7, #12]
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	685b      	ldr	r3, [r3, #4]
 8007580:	60fb      	str	r3, [r7, #12]
 8007582:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8007588:	4619      	mov	r1, r3
 800758a:	6878      	ldr	r0, [r7, #4]
 800758c:	f7fa f922 	bl	80017d4 <HAL_UARTEx_RxEventCallback>
 8007590:	e002      	b.n	8007598 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007592:	6878      	ldr	r0, [r7, #4]
 8007594:	f7ff fc32 	bl	8006dfc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007598:	2300      	movs	r3, #0
 800759a:	e002      	b.n	80075a2 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800759c:	2300      	movs	r3, #0
 800759e:	e000      	b.n	80075a2 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80075a0:	2302      	movs	r3, #2
  }
}
 80075a2:	4618      	mov	r0, r3
 80075a4:	3730      	adds	r7, #48	@ 0x30
 80075a6:	46bd      	mov	sp, r7
 80075a8:	bd80      	pop	{r7, pc}
	...

080075ac <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80075ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80075b0:	b0c0      	sub	sp, #256	@ 0x100
 80075b2:	af00      	add	r7, sp, #0
 80075b4:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80075b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	691b      	ldr	r3, [r3, #16]
 80075c0:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80075c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80075c8:	68d9      	ldr	r1, [r3, #12]
 80075ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80075ce:	681a      	ldr	r2, [r3, #0]
 80075d0:	ea40 0301 	orr.w	r3, r0, r1
 80075d4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80075d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80075da:	689a      	ldr	r2, [r3, #8]
 80075dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80075e0:	691b      	ldr	r3, [r3, #16]
 80075e2:	431a      	orrs	r2, r3
 80075e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80075e8:	695b      	ldr	r3, [r3, #20]
 80075ea:	431a      	orrs	r2, r3
 80075ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80075f0:	69db      	ldr	r3, [r3, #28]
 80075f2:	4313      	orrs	r3, r2
 80075f4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80075f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	68db      	ldr	r3, [r3, #12]
 8007600:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8007604:	f021 010c 	bic.w	r1, r1, #12
 8007608:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800760c:	681a      	ldr	r2, [r3, #0]
 800760e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8007612:	430b      	orrs	r3, r1
 8007614:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007616:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	695b      	ldr	r3, [r3, #20]
 800761e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8007622:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007626:	6999      	ldr	r1, [r3, #24]
 8007628:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800762c:	681a      	ldr	r2, [r3, #0]
 800762e:	ea40 0301 	orr.w	r3, r0, r1
 8007632:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007634:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007638:	681a      	ldr	r2, [r3, #0]
 800763a:	4b8f      	ldr	r3, [pc, #572]	@ (8007878 <UART_SetConfig+0x2cc>)
 800763c:	429a      	cmp	r2, r3
 800763e:	d005      	beq.n	800764c <UART_SetConfig+0xa0>
 8007640:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007644:	681a      	ldr	r2, [r3, #0]
 8007646:	4b8d      	ldr	r3, [pc, #564]	@ (800787c <UART_SetConfig+0x2d0>)
 8007648:	429a      	cmp	r2, r3
 800764a:	d104      	bne.n	8007656 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800764c:	f7fe fb92 	bl	8005d74 <HAL_RCC_GetPCLK2Freq>
 8007650:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8007654:	e003      	b.n	800765e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007656:	f7fe fb79 	bl	8005d4c <HAL_RCC_GetPCLK1Freq>
 800765a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800765e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007662:	69db      	ldr	r3, [r3, #28]
 8007664:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007668:	f040 810c 	bne.w	8007884 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800766c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007670:	2200      	movs	r2, #0
 8007672:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007676:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800767a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800767e:	4622      	mov	r2, r4
 8007680:	462b      	mov	r3, r5
 8007682:	1891      	adds	r1, r2, r2
 8007684:	65b9      	str	r1, [r7, #88]	@ 0x58
 8007686:	415b      	adcs	r3, r3
 8007688:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800768a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800768e:	4621      	mov	r1, r4
 8007690:	eb12 0801 	adds.w	r8, r2, r1
 8007694:	4629      	mov	r1, r5
 8007696:	eb43 0901 	adc.w	r9, r3, r1
 800769a:	f04f 0200 	mov.w	r2, #0
 800769e:	f04f 0300 	mov.w	r3, #0
 80076a2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80076a6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80076aa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80076ae:	4690      	mov	r8, r2
 80076b0:	4699      	mov	r9, r3
 80076b2:	4623      	mov	r3, r4
 80076b4:	eb18 0303 	adds.w	r3, r8, r3
 80076b8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80076bc:	462b      	mov	r3, r5
 80076be:	eb49 0303 	adc.w	r3, r9, r3
 80076c2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80076c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80076ca:	685b      	ldr	r3, [r3, #4]
 80076cc:	2200      	movs	r2, #0
 80076ce:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80076d2:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80076d6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80076da:	460b      	mov	r3, r1
 80076dc:	18db      	adds	r3, r3, r3
 80076de:	653b      	str	r3, [r7, #80]	@ 0x50
 80076e0:	4613      	mov	r3, r2
 80076e2:	eb42 0303 	adc.w	r3, r2, r3
 80076e6:	657b      	str	r3, [r7, #84]	@ 0x54
 80076e8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80076ec:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80076f0:	f7f9 faaa 	bl	8000c48 <__aeabi_uldivmod>
 80076f4:	4602      	mov	r2, r0
 80076f6:	460b      	mov	r3, r1
 80076f8:	4b61      	ldr	r3, [pc, #388]	@ (8007880 <UART_SetConfig+0x2d4>)
 80076fa:	fba3 2302 	umull	r2, r3, r3, r2
 80076fe:	095b      	lsrs	r3, r3, #5
 8007700:	011c      	lsls	r4, r3, #4
 8007702:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007706:	2200      	movs	r2, #0
 8007708:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800770c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8007710:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8007714:	4642      	mov	r2, r8
 8007716:	464b      	mov	r3, r9
 8007718:	1891      	adds	r1, r2, r2
 800771a:	64b9      	str	r1, [r7, #72]	@ 0x48
 800771c:	415b      	adcs	r3, r3
 800771e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007720:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8007724:	4641      	mov	r1, r8
 8007726:	eb12 0a01 	adds.w	sl, r2, r1
 800772a:	4649      	mov	r1, r9
 800772c:	eb43 0b01 	adc.w	fp, r3, r1
 8007730:	f04f 0200 	mov.w	r2, #0
 8007734:	f04f 0300 	mov.w	r3, #0
 8007738:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800773c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007740:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007744:	4692      	mov	sl, r2
 8007746:	469b      	mov	fp, r3
 8007748:	4643      	mov	r3, r8
 800774a:	eb1a 0303 	adds.w	r3, sl, r3
 800774e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007752:	464b      	mov	r3, r9
 8007754:	eb4b 0303 	adc.w	r3, fp, r3
 8007758:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800775c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007760:	685b      	ldr	r3, [r3, #4]
 8007762:	2200      	movs	r2, #0
 8007764:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007768:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800776c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8007770:	460b      	mov	r3, r1
 8007772:	18db      	adds	r3, r3, r3
 8007774:	643b      	str	r3, [r7, #64]	@ 0x40
 8007776:	4613      	mov	r3, r2
 8007778:	eb42 0303 	adc.w	r3, r2, r3
 800777c:	647b      	str	r3, [r7, #68]	@ 0x44
 800777e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8007782:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8007786:	f7f9 fa5f 	bl	8000c48 <__aeabi_uldivmod>
 800778a:	4602      	mov	r2, r0
 800778c:	460b      	mov	r3, r1
 800778e:	4611      	mov	r1, r2
 8007790:	4b3b      	ldr	r3, [pc, #236]	@ (8007880 <UART_SetConfig+0x2d4>)
 8007792:	fba3 2301 	umull	r2, r3, r3, r1
 8007796:	095b      	lsrs	r3, r3, #5
 8007798:	2264      	movs	r2, #100	@ 0x64
 800779a:	fb02 f303 	mul.w	r3, r2, r3
 800779e:	1acb      	subs	r3, r1, r3
 80077a0:	00db      	lsls	r3, r3, #3
 80077a2:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80077a6:	4b36      	ldr	r3, [pc, #216]	@ (8007880 <UART_SetConfig+0x2d4>)
 80077a8:	fba3 2302 	umull	r2, r3, r3, r2
 80077ac:	095b      	lsrs	r3, r3, #5
 80077ae:	005b      	lsls	r3, r3, #1
 80077b0:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80077b4:	441c      	add	r4, r3
 80077b6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80077ba:	2200      	movs	r2, #0
 80077bc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80077c0:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80077c4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80077c8:	4642      	mov	r2, r8
 80077ca:	464b      	mov	r3, r9
 80077cc:	1891      	adds	r1, r2, r2
 80077ce:	63b9      	str	r1, [r7, #56]	@ 0x38
 80077d0:	415b      	adcs	r3, r3
 80077d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80077d4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80077d8:	4641      	mov	r1, r8
 80077da:	1851      	adds	r1, r2, r1
 80077dc:	6339      	str	r1, [r7, #48]	@ 0x30
 80077de:	4649      	mov	r1, r9
 80077e0:	414b      	adcs	r3, r1
 80077e2:	637b      	str	r3, [r7, #52]	@ 0x34
 80077e4:	f04f 0200 	mov.w	r2, #0
 80077e8:	f04f 0300 	mov.w	r3, #0
 80077ec:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80077f0:	4659      	mov	r1, fp
 80077f2:	00cb      	lsls	r3, r1, #3
 80077f4:	4651      	mov	r1, sl
 80077f6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80077fa:	4651      	mov	r1, sl
 80077fc:	00ca      	lsls	r2, r1, #3
 80077fe:	4610      	mov	r0, r2
 8007800:	4619      	mov	r1, r3
 8007802:	4603      	mov	r3, r0
 8007804:	4642      	mov	r2, r8
 8007806:	189b      	adds	r3, r3, r2
 8007808:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800780c:	464b      	mov	r3, r9
 800780e:	460a      	mov	r2, r1
 8007810:	eb42 0303 	adc.w	r3, r2, r3
 8007814:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007818:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800781c:	685b      	ldr	r3, [r3, #4]
 800781e:	2200      	movs	r2, #0
 8007820:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007824:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8007828:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800782c:	460b      	mov	r3, r1
 800782e:	18db      	adds	r3, r3, r3
 8007830:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007832:	4613      	mov	r3, r2
 8007834:	eb42 0303 	adc.w	r3, r2, r3
 8007838:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800783a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800783e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8007842:	f7f9 fa01 	bl	8000c48 <__aeabi_uldivmod>
 8007846:	4602      	mov	r2, r0
 8007848:	460b      	mov	r3, r1
 800784a:	4b0d      	ldr	r3, [pc, #52]	@ (8007880 <UART_SetConfig+0x2d4>)
 800784c:	fba3 1302 	umull	r1, r3, r3, r2
 8007850:	095b      	lsrs	r3, r3, #5
 8007852:	2164      	movs	r1, #100	@ 0x64
 8007854:	fb01 f303 	mul.w	r3, r1, r3
 8007858:	1ad3      	subs	r3, r2, r3
 800785a:	00db      	lsls	r3, r3, #3
 800785c:	3332      	adds	r3, #50	@ 0x32
 800785e:	4a08      	ldr	r2, [pc, #32]	@ (8007880 <UART_SetConfig+0x2d4>)
 8007860:	fba2 2303 	umull	r2, r3, r2, r3
 8007864:	095b      	lsrs	r3, r3, #5
 8007866:	f003 0207 	and.w	r2, r3, #7
 800786a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	4422      	add	r2, r4
 8007872:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007874:	e106      	b.n	8007a84 <UART_SetConfig+0x4d8>
 8007876:	bf00      	nop
 8007878:	40011000 	.word	0x40011000
 800787c:	40011400 	.word	0x40011400
 8007880:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007884:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007888:	2200      	movs	r2, #0
 800788a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800788e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8007892:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8007896:	4642      	mov	r2, r8
 8007898:	464b      	mov	r3, r9
 800789a:	1891      	adds	r1, r2, r2
 800789c:	6239      	str	r1, [r7, #32]
 800789e:	415b      	adcs	r3, r3
 80078a0:	627b      	str	r3, [r7, #36]	@ 0x24
 80078a2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80078a6:	4641      	mov	r1, r8
 80078a8:	1854      	adds	r4, r2, r1
 80078aa:	4649      	mov	r1, r9
 80078ac:	eb43 0501 	adc.w	r5, r3, r1
 80078b0:	f04f 0200 	mov.w	r2, #0
 80078b4:	f04f 0300 	mov.w	r3, #0
 80078b8:	00eb      	lsls	r3, r5, #3
 80078ba:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80078be:	00e2      	lsls	r2, r4, #3
 80078c0:	4614      	mov	r4, r2
 80078c2:	461d      	mov	r5, r3
 80078c4:	4643      	mov	r3, r8
 80078c6:	18e3      	adds	r3, r4, r3
 80078c8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80078cc:	464b      	mov	r3, r9
 80078ce:	eb45 0303 	adc.w	r3, r5, r3
 80078d2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80078d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80078da:	685b      	ldr	r3, [r3, #4]
 80078dc:	2200      	movs	r2, #0
 80078de:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80078e2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80078e6:	f04f 0200 	mov.w	r2, #0
 80078ea:	f04f 0300 	mov.w	r3, #0
 80078ee:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80078f2:	4629      	mov	r1, r5
 80078f4:	008b      	lsls	r3, r1, #2
 80078f6:	4621      	mov	r1, r4
 80078f8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80078fc:	4621      	mov	r1, r4
 80078fe:	008a      	lsls	r2, r1, #2
 8007900:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8007904:	f7f9 f9a0 	bl	8000c48 <__aeabi_uldivmod>
 8007908:	4602      	mov	r2, r0
 800790a:	460b      	mov	r3, r1
 800790c:	4b60      	ldr	r3, [pc, #384]	@ (8007a90 <UART_SetConfig+0x4e4>)
 800790e:	fba3 2302 	umull	r2, r3, r3, r2
 8007912:	095b      	lsrs	r3, r3, #5
 8007914:	011c      	lsls	r4, r3, #4
 8007916:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800791a:	2200      	movs	r2, #0
 800791c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007920:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8007924:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8007928:	4642      	mov	r2, r8
 800792a:	464b      	mov	r3, r9
 800792c:	1891      	adds	r1, r2, r2
 800792e:	61b9      	str	r1, [r7, #24]
 8007930:	415b      	adcs	r3, r3
 8007932:	61fb      	str	r3, [r7, #28]
 8007934:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007938:	4641      	mov	r1, r8
 800793a:	1851      	adds	r1, r2, r1
 800793c:	6139      	str	r1, [r7, #16]
 800793e:	4649      	mov	r1, r9
 8007940:	414b      	adcs	r3, r1
 8007942:	617b      	str	r3, [r7, #20]
 8007944:	f04f 0200 	mov.w	r2, #0
 8007948:	f04f 0300 	mov.w	r3, #0
 800794c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007950:	4659      	mov	r1, fp
 8007952:	00cb      	lsls	r3, r1, #3
 8007954:	4651      	mov	r1, sl
 8007956:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800795a:	4651      	mov	r1, sl
 800795c:	00ca      	lsls	r2, r1, #3
 800795e:	4610      	mov	r0, r2
 8007960:	4619      	mov	r1, r3
 8007962:	4603      	mov	r3, r0
 8007964:	4642      	mov	r2, r8
 8007966:	189b      	adds	r3, r3, r2
 8007968:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800796c:	464b      	mov	r3, r9
 800796e:	460a      	mov	r2, r1
 8007970:	eb42 0303 	adc.w	r3, r2, r3
 8007974:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007978:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800797c:	685b      	ldr	r3, [r3, #4]
 800797e:	2200      	movs	r2, #0
 8007980:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007982:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8007984:	f04f 0200 	mov.w	r2, #0
 8007988:	f04f 0300 	mov.w	r3, #0
 800798c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8007990:	4649      	mov	r1, r9
 8007992:	008b      	lsls	r3, r1, #2
 8007994:	4641      	mov	r1, r8
 8007996:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800799a:	4641      	mov	r1, r8
 800799c:	008a      	lsls	r2, r1, #2
 800799e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80079a2:	f7f9 f951 	bl	8000c48 <__aeabi_uldivmod>
 80079a6:	4602      	mov	r2, r0
 80079a8:	460b      	mov	r3, r1
 80079aa:	4611      	mov	r1, r2
 80079ac:	4b38      	ldr	r3, [pc, #224]	@ (8007a90 <UART_SetConfig+0x4e4>)
 80079ae:	fba3 2301 	umull	r2, r3, r3, r1
 80079b2:	095b      	lsrs	r3, r3, #5
 80079b4:	2264      	movs	r2, #100	@ 0x64
 80079b6:	fb02 f303 	mul.w	r3, r2, r3
 80079ba:	1acb      	subs	r3, r1, r3
 80079bc:	011b      	lsls	r3, r3, #4
 80079be:	3332      	adds	r3, #50	@ 0x32
 80079c0:	4a33      	ldr	r2, [pc, #204]	@ (8007a90 <UART_SetConfig+0x4e4>)
 80079c2:	fba2 2303 	umull	r2, r3, r2, r3
 80079c6:	095b      	lsrs	r3, r3, #5
 80079c8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80079cc:	441c      	add	r4, r3
 80079ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80079d2:	2200      	movs	r2, #0
 80079d4:	673b      	str	r3, [r7, #112]	@ 0x70
 80079d6:	677a      	str	r2, [r7, #116]	@ 0x74
 80079d8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80079dc:	4642      	mov	r2, r8
 80079de:	464b      	mov	r3, r9
 80079e0:	1891      	adds	r1, r2, r2
 80079e2:	60b9      	str	r1, [r7, #8]
 80079e4:	415b      	adcs	r3, r3
 80079e6:	60fb      	str	r3, [r7, #12]
 80079e8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80079ec:	4641      	mov	r1, r8
 80079ee:	1851      	adds	r1, r2, r1
 80079f0:	6039      	str	r1, [r7, #0]
 80079f2:	4649      	mov	r1, r9
 80079f4:	414b      	adcs	r3, r1
 80079f6:	607b      	str	r3, [r7, #4]
 80079f8:	f04f 0200 	mov.w	r2, #0
 80079fc:	f04f 0300 	mov.w	r3, #0
 8007a00:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007a04:	4659      	mov	r1, fp
 8007a06:	00cb      	lsls	r3, r1, #3
 8007a08:	4651      	mov	r1, sl
 8007a0a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007a0e:	4651      	mov	r1, sl
 8007a10:	00ca      	lsls	r2, r1, #3
 8007a12:	4610      	mov	r0, r2
 8007a14:	4619      	mov	r1, r3
 8007a16:	4603      	mov	r3, r0
 8007a18:	4642      	mov	r2, r8
 8007a1a:	189b      	adds	r3, r3, r2
 8007a1c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007a1e:	464b      	mov	r3, r9
 8007a20:	460a      	mov	r2, r1
 8007a22:	eb42 0303 	adc.w	r3, r2, r3
 8007a26:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007a28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007a2c:	685b      	ldr	r3, [r3, #4]
 8007a2e:	2200      	movs	r2, #0
 8007a30:	663b      	str	r3, [r7, #96]	@ 0x60
 8007a32:	667a      	str	r2, [r7, #100]	@ 0x64
 8007a34:	f04f 0200 	mov.w	r2, #0
 8007a38:	f04f 0300 	mov.w	r3, #0
 8007a3c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8007a40:	4649      	mov	r1, r9
 8007a42:	008b      	lsls	r3, r1, #2
 8007a44:	4641      	mov	r1, r8
 8007a46:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007a4a:	4641      	mov	r1, r8
 8007a4c:	008a      	lsls	r2, r1, #2
 8007a4e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8007a52:	f7f9 f8f9 	bl	8000c48 <__aeabi_uldivmod>
 8007a56:	4602      	mov	r2, r0
 8007a58:	460b      	mov	r3, r1
 8007a5a:	4b0d      	ldr	r3, [pc, #52]	@ (8007a90 <UART_SetConfig+0x4e4>)
 8007a5c:	fba3 1302 	umull	r1, r3, r3, r2
 8007a60:	095b      	lsrs	r3, r3, #5
 8007a62:	2164      	movs	r1, #100	@ 0x64
 8007a64:	fb01 f303 	mul.w	r3, r1, r3
 8007a68:	1ad3      	subs	r3, r2, r3
 8007a6a:	011b      	lsls	r3, r3, #4
 8007a6c:	3332      	adds	r3, #50	@ 0x32
 8007a6e:	4a08      	ldr	r2, [pc, #32]	@ (8007a90 <UART_SetConfig+0x4e4>)
 8007a70:	fba2 2303 	umull	r2, r3, r2, r3
 8007a74:	095b      	lsrs	r3, r3, #5
 8007a76:	f003 020f 	and.w	r2, r3, #15
 8007a7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	4422      	add	r2, r4
 8007a82:	609a      	str	r2, [r3, #8]
}
 8007a84:	bf00      	nop
 8007a86:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8007a8a:	46bd      	mov	sp, r7
 8007a8c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007a90:	51eb851f 	.word	0x51eb851f

08007a94 <__cvt>:
 8007a94:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007a98:	ec57 6b10 	vmov	r6, r7, d0
 8007a9c:	2f00      	cmp	r7, #0
 8007a9e:	460c      	mov	r4, r1
 8007aa0:	4619      	mov	r1, r3
 8007aa2:	463b      	mov	r3, r7
 8007aa4:	bfbb      	ittet	lt
 8007aa6:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8007aaa:	461f      	movlt	r7, r3
 8007aac:	2300      	movge	r3, #0
 8007aae:	232d      	movlt	r3, #45	@ 0x2d
 8007ab0:	700b      	strb	r3, [r1, #0]
 8007ab2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007ab4:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8007ab8:	4691      	mov	r9, r2
 8007aba:	f023 0820 	bic.w	r8, r3, #32
 8007abe:	bfbc      	itt	lt
 8007ac0:	4632      	movlt	r2, r6
 8007ac2:	4616      	movlt	r6, r2
 8007ac4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8007ac8:	d005      	beq.n	8007ad6 <__cvt+0x42>
 8007aca:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8007ace:	d100      	bne.n	8007ad2 <__cvt+0x3e>
 8007ad0:	3401      	adds	r4, #1
 8007ad2:	2102      	movs	r1, #2
 8007ad4:	e000      	b.n	8007ad8 <__cvt+0x44>
 8007ad6:	2103      	movs	r1, #3
 8007ad8:	ab03      	add	r3, sp, #12
 8007ada:	9301      	str	r3, [sp, #4]
 8007adc:	ab02      	add	r3, sp, #8
 8007ade:	9300      	str	r3, [sp, #0]
 8007ae0:	ec47 6b10 	vmov	d0, r6, r7
 8007ae4:	4653      	mov	r3, sl
 8007ae6:	4622      	mov	r2, r4
 8007ae8:	f000 fea6 	bl	8008838 <_dtoa_r>
 8007aec:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8007af0:	4605      	mov	r5, r0
 8007af2:	d119      	bne.n	8007b28 <__cvt+0x94>
 8007af4:	f019 0f01 	tst.w	r9, #1
 8007af8:	d00e      	beq.n	8007b18 <__cvt+0x84>
 8007afa:	eb00 0904 	add.w	r9, r0, r4
 8007afe:	2200      	movs	r2, #0
 8007b00:	2300      	movs	r3, #0
 8007b02:	4630      	mov	r0, r6
 8007b04:	4639      	mov	r1, r7
 8007b06:	f7f8 ffdf 	bl	8000ac8 <__aeabi_dcmpeq>
 8007b0a:	b108      	cbz	r0, 8007b10 <__cvt+0x7c>
 8007b0c:	f8cd 900c 	str.w	r9, [sp, #12]
 8007b10:	2230      	movs	r2, #48	@ 0x30
 8007b12:	9b03      	ldr	r3, [sp, #12]
 8007b14:	454b      	cmp	r3, r9
 8007b16:	d31e      	bcc.n	8007b56 <__cvt+0xc2>
 8007b18:	9b03      	ldr	r3, [sp, #12]
 8007b1a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007b1c:	1b5b      	subs	r3, r3, r5
 8007b1e:	4628      	mov	r0, r5
 8007b20:	6013      	str	r3, [r2, #0]
 8007b22:	b004      	add	sp, #16
 8007b24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007b28:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8007b2c:	eb00 0904 	add.w	r9, r0, r4
 8007b30:	d1e5      	bne.n	8007afe <__cvt+0x6a>
 8007b32:	7803      	ldrb	r3, [r0, #0]
 8007b34:	2b30      	cmp	r3, #48	@ 0x30
 8007b36:	d10a      	bne.n	8007b4e <__cvt+0xba>
 8007b38:	2200      	movs	r2, #0
 8007b3a:	2300      	movs	r3, #0
 8007b3c:	4630      	mov	r0, r6
 8007b3e:	4639      	mov	r1, r7
 8007b40:	f7f8 ffc2 	bl	8000ac8 <__aeabi_dcmpeq>
 8007b44:	b918      	cbnz	r0, 8007b4e <__cvt+0xba>
 8007b46:	f1c4 0401 	rsb	r4, r4, #1
 8007b4a:	f8ca 4000 	str.w	r4, [sl]
 8007b4e:	f8da 3000 	ldr.w	r3, [sl]
 8007b52:	4499      	add	r9, r3
 8007b54:	e7d3      	b.n	8007afe <__cvt+0x6a>
 8007b56:	1c59      	adds	r1, r3, #1
 8007b58:	9103      	str	r1, [sp, #12]
 8007b5a:	701a      	strb	r2, [r3, #0]
 8007b5c:	e7d9      	b.n	8007b12 <__cvt+0x7e>

08007b5e <__exponent>:
 8007b5e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007b60:	2900      	cmp	r1, #0
 8007b62:	bfba      	itte	lt
 8007b64:	4249      	neglt	r1, r1
 8007b66:	232d      	movlt	r3, #45	@ 0x2d
 8007b68:	232b      	movge	r3, #43	@ 0x2b
 8007b6a:	2909      	cmp	r1, #9
 8007b6c:	7002      	strb	r2, [r0, #0]
 8007b6e:	7043      	strb	r3, [r0, #1]
 8007b70:	dd29      	ble.n	8007bc6 <__exponent+0x68>
 8007b72:	f10d 0307 	add.w	r3, sp, #7
 8007b76:	461d      	mov	r5, r3
 8007b78:	270a      	movs	r7, #10
 8007b7a:	461a      	mov	r2, r3
 8007b7c:	fbb1 f6f7 	udiv	r6, r1, r7
 8007b80:	fb07 1416 	mls	r4, r7, r6, r1
 8007b84:	3430      	adds	r4, #48	@ 0x30
 8007b86:	f802 4c01 	strb.w	r4, [r2, #-1]
 8007b8a:	460c      	mov	r4, r1
 8007b8c:	2c63      	cmp	r4, #99	@ 0x63
 8007b8e:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 8007b92:	4631      	mov	r1, r6
 8007b94:	dcf1      	bgt.n	8007b7a <__exponent+0x1c>
 8007b96:	3130      	adds	r1, #48	@ 0x30
 8007b98:	1e94      	subs	r4, r2, #2
 8007b9a:	f803 1c01 	strb.w	r1, [r3, #-1]
 8007b9e:	1c41      	adds	r1, r0, #1
 8007ba0:	4623      	mov	r3, r4
 8007ba2:	42ab      	cmp	r3, r5
 8007ba4:	d30a      	bcc.n	8007bbc <__exponent+0x5e>
 8007ba6:	f10d 0309 	add.w	r3, sp, #9
 8007baa:	1a9b      	subs	r3, r3, r2
 8007bac:	42ac      	cmp	r4, r5
 8007bae:	bf88      	it	hi
 8007bb0:	2300      	movhi	r3, #0
 8007bb2:	3302      	adds	r3, #2
 8007bb4:	4403      	add	r3, r0
 8007bb6:	1a18      	subs	r0, r3, r0
 8007bb8:	b003      	add	sp, #12
 8007bba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007bbc:	f813 6b01 	ldrb.w	r6, [r3], #1
 8007bc0:	f801 6f01 	strb.w	r6, [r1, #1]!
 8007bc4:	e7ed      	b.n	8007ba2 <__exponent+0x44>
 8007bc6:	2330      	movs	r3, #48	@ 0x30
 8007bc8:	3130      	adds	r1, #48	@ 0x30
 8007bca:	7083      	strb	r3, [r0, #2]
 8007bcc:	70c1      	strb	r1, [r0, #3]
 8007bce:	1d03      	adds	r3, r0, #4
 8007bd0:	e7f1      	b.n	8007bb6 <__exponent+0x58>
	...

08007bd4 <_printf_float>:
 8007bd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007bd8:	b08d      	sub	sp, #52	@ 0x34
 8007bda:	460c      	mov	r4, r1
 8007bdc:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8007be0:	4616      	mov	r6, r2
 8007be2:	461f      	mov	r7, r3
 8007be4:	4605      	mov	r5, r0
 8007be6:	f000 fd25 	bl	8008634 <_localeconv_r>
 8007bea:	6803      	ldr	r3, [r0, #0]
 8007bec:	9304      	str	r3, [sp, #16]
 8007bee:	4618      	mov	r0, r3
 8007bf0:	f7f8 fb3e 	bl	8000270 <strlen>
 8007bf4:	2300      	movs	r3, #0
 8007bf6:	930a      	str	r3, [sp, #40]	@ 0x28
 8007bf8:	f8d8 3000 	ldr.w	r3, [r8]
 8007bfc:	9005      	str	r0, [sp, #20]
 8007bfe:	3307      	adds	r3, #7
 8007c00:	f023 0307 	bic.w	r3, r3, #7
 8007c04:	f103 0208 	add.w	r2, r3, #8
 8007c08:	f894 a018 	ldrb.w	sl, [r4, #24]
 8007c0c:	f8d4 b000 	ldr.w	fp, [r4]
 8007c10:	f8c8 2000 	str.w	r2, [r8]
 8007c14:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007c18:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8007c1c:	9307      	str	r3, [sp, #28]
 8007c1e:	f8cd 8018 	str.w	r8, [sp, #24]
 8007c22:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8007c26:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007c2a:	4b9c      	ldr	r3, [pc, #624]	@ (8007e9c <_printf_float+0x2c8>)
 8007c2c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007c30:	f7f8 ff7c 	bl	8000b2c <__aeabi_dcmpun>
 8007c34:	bb70      	cbnz	r0, 8007c94 <_printf_float+0xc0>
 8007c36:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007c3a:	4b98      	ldr	r3, [pc, #608]	@ (8007e9c <_printf_float+0x2c8>)
 8007c3c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007c40:	f7f8 ff56 	bl	8000af0 <__aeabi_dcmple>
 8007c44:	bb30      	cbnz	r0, 8007c94 <_printf_float+0xc0>
 8007c46:	2200      	movs	r2, #0
 8007c48:	2300      	movs	r3, #0
 8007c4a:	4640      	mov	r0, r8
 8007c4c:	4649      	mov	r1, r9
 8007c4e:	f7f8 ff45 	bl	8000adc <__aeabi_dcmplt>
 8007c52:	b110      	cbz	r0, 8007c5a <_printf_float+0x86>
 8007c54:	232d      	movs	r3, #45	@ 0x2d
 8007c56:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007c5a:	4a91      	ldr	r2, [pc, #580]	@ (8007ea0 <_printf_float+0x2cc>)
 8007c5c:	4b91      	ldr	r3, [pc, #580]	@ (8007ea4 <_printf_float+0x2d0>)
 8007c5e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8007c62:	bf94      	ite	ls
 8007c64:	4690      	movls	r8, r2
 8007c66:	4698      	movhi	r8, r3
 8007c68:	2303      	movs	r3, #3
 8007c6a:	6123      	str	r3, [r4, #16]
 8007c6c:	f02b 0304 	bic.w	r3, fp, #4
 8007c70:	6023      	str	r3, [r4, #0]
 8007c72:	f04f 0900 	mov.w	r9, #0
 8007c76:	9700      	str	r7, [sp, #0]
 8007c78:	4633      	mov	r3, r6
 8007c7a:	aa0b      	add	r2, sp, #44	@ 0x2c
 8007c7c:	4621      	mov	r1, r4
 8007c7e:	4628      	mov	r0, r5
 8007c80:	f000 f9d2 	bl	8008028 <_printf_common>
 8007c84:	3001      	adds	r0, #1
 8007c86:	f040 808d 	bne.w	8007da4 <_printf_float+0x1d0>
 8007c8a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007c8e:	b00d      	add	sp, #52	@ 0x34
 8007c90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c94:	4642      	mov	r2, r8
 8007c96:	464b      	mov	r3, r9
 8007c98:	4640      	mov	r0, r8
 8007c9a:	4649      	mov	r1, r9
 8007c9c:	f7f8 ff46 	bl	8000b2c <__aeabi_dcmpun>
 8007ca0:	b140      	cbz	r0, 8007cb4 <_printf_float+0xe0>
 8007ca2:	464b      	mov	r3, r9
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	bfbc      	itt	lt
 8007ca8:	232d      	movlt	r3, #45	@ 0x2d
 8007caa:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8007cae:	4a7e      	ldr	r2, [pc, #504]	@ (8007ea8 <_printf_float+0x2d4>)
 8007cb0:	4b7e      	ldr	r3, [pc, #504]	@ (8007eac <_printf_float+0x2d8>)
 8007cb2:	e7d4      	b.n	8007c5e <_printf_float+0x8a>
 8007cb4:	6863      	ldr	r3, [r4, #4]
 8007cb6:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8007cba:	9206      	str	r2, [sp, #24]
 8007cbc:	1c5a      	adds	r2, r3, #1
 8007cbe:	d13b      	bne.n	8007d38 <_printf_float+0x164>
 8007cc0:	2306      	movs	r3, #6
 8007cc2:	6063      	str	r3, [r4, #4]
 8007cc4:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8007cc8:	2300      	movs	r3, #0
 8007cca:	6022      	str	r2, [r4, #0]
 8007ccc:	9303      	str	r3, [sp, #12]
 8007cce:	ab0a      	add	r3, sp, #40	@ 0x28
 8007cd0:	e9cd a301 	strd	sl, r3, [sp, #4]
 8007cd4:	ab09      	add	r3, sp, #36	@ 0x24
 8007cd6:	9300      	str	r3, [sp, #0]
 8007cd8:	6861      	ldr	r1, [r4, #4]
 8007cda:	ec49 8b10 	vmov	d0, r8, r9
 8007cde:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8007ce2:	4628      	mov	r0, r5
 8007ce4:	f7ff fed6 	bl	8007a94 <__cvt>
 8007ce8:	9b06      	ldr	r3, [sp, #24]
 8007cea:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007cec:	2b47      	cmp	r3, #71	@ 0x47
 8007cee:	4680      	mov	r8, r0
 8007cf0:	d129      	bne.n	8007d46 <_printf_float+0x172>
 8007cf2:	1cc8      	adds	r0, r1, #3
 8007cf4:	db02      	blt.n	8007cfc <_printf_float+0x128>
 8007cf6:	6863      	ldr	r3, [r4, #4]
 8007cf8:	4299      	cmp	r1, r3
 8007cfa:	dd41      	ble.n	8007d80 <_printf_float+0x1ac>
 8007cfc:	f1aa 0a02 	sub.w	sl, sl, #2
 8007d00:	fa5f fa8a 	uxtb.w	sl, sl
 8007d04:	3901      	subs	r1, #1
 8007d06:	4652      	mov	r2, sl
 8007d08:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8007d0c:	9109      	str	r1, [sp, #36]	@ 0x24
 8007d0e:	f7ff ff26 	bl	8007b5e <__exponent>
 8007d12:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007d14:	1813      	adds	r3, r2, r0
 8007d16:	2a01      	cmp	r2, #1
 8007d18:	4681      	mov	r9, r0
 8007d1a:	6123      	str	r3, [r4, #16]
 8007d1c:	dc02      	bgt.n	8007d24 <_printf_float+0x150>
 8007d1e:	6822      	ldr	r2, [r4, #0]
 8007d20:	07d2      	lsls	r2, r2, #31
 8007d22:	d501      	bpl.n	8007d28 <_printf_float+0x154>
 8007d24:	3301      	adds	r3, #1
 8007d26:	6123      	str	r3, [r4, #16]
 8007d28:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d0a2      	beq.n	8007c76 <_printf_float+0xa2>
 8007d30:	232d      	movs	r3, #45	@ 0x2d
 8007d32:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007d36:	e79e      	b.n	8007c76 <_printf_float+0xa2>
 8007d38:	9a06      	ldr	r2, [sp, #24]
 8007d3a:	2a47      	cmp	r2, #71	@ 0x47
 8007d3c:	d1c2      	bne.n	8007cc4 <_printf_float+0xf0>
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d1c0      	bne.n	8007cc4 <_printf_float+0xf0>
 8007d42:	2301      	movs	r3, #1
 8007d44:	e7bd      	b.n	8007cc2 <_printf_float+0xee>
 8007d46:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8007d4a:	d9db      	bls.n	8007d04 <_printf_float+0x130>
 8007d4c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8007d50:	d118      	bne.n	8007d84 <_printf_float+0x1b0>
 8007d52:	2900      	cmp	r1, #0
 8007d54:	6863      	ldr	r3, [r4, #4]
 8007d56:	dd0b      	ble.n	8007d70 <_printf_float+0x19c>
 8007d58:	6121      	str	r1, [r4, #16]
 8007d5a:	b913      	cbnz	r3, 8007d62 <_printf_float+0x18e>
 8007d5c:	6822      	ldr	r2, [r4, #0]
 8007d5e:	07d0      	lsls	r0, r2, #31
 8007d60:	d502      	bpl.n	8007d68 <_printf_float+0x194>
 8007d62:	3301      	adds	r3, #1
 8007d64:	440b      	add	r3, r1
 8007d66:	6123      	str	r3, [r4, #16]
 8007d68:	65a1      	str	r1, [r4, #88]	@ 0x58
 8007d6a:	f04f 0900 	mov.w	r9, #0
 8007d6e:	e7db      	b.n	8007d28 <_printf_float+0x154>
 8007d70:	b913      	cbnz	r3, 8007d78 <_printf_float+0x1a4>
 8007d72:	6822      	ldr	r2, [r4, #0]
 8007d74:	07d2      	lsls	r2, r2, #31
 8007d76:	d501      	bpl.n	8007d7c <_printf_float+0x1a8>
 8007d78:	3302      	adds	r3, #2
 8007d7a:	e7f4      	b.n	8007d66 <_printf_float+0x192>
 8007d7c:	2301      	movs	r3, #1
 8007d7e:	e7f2      	b.n	8007d66 <_printf_float+0x192>
 8007d80:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8007d84:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007d86:	4299      	cmp	r1, r3
 8007d88:	db05      	blt.n	8007d96 <_printf_float+0x1c2>
 8007d8a:	6823      	ldr	r3, [r4, #0]
 8007d8c:	6121      	str	r1, [r4, #16]
 8007d8e:	07d8      	lsls	r0, r3, #31
 8007d90:	d5ea      	bpl.n	8007d68 <_printf_float+0x194>
 8007d92:	1c4b      	adds	r3, r1, #1
 8007d94:	e7e7      	b.n	8007d66 <_printf_float+0x192>
 8007d96:	2900      	cmp	r1, #0
 8007d98:	bfd4      	ite	le
 8007d9a:	f1c1 0202 	rsble	r2, r1, #2
 8007d9e:	2201      	movgt	r2, #1
 8007da0:	4413      	add	r3, r2
 8007da2:	e7e0      	b.n	8007d66 <_printf_float+0x192>
 8007da4:	6823      	ldr	r3, [r4, #0]
 8007da6:	055a      	lsls	r2, r3, #21
 8007da8:	d407      	bmi.n	8007dba <_printf_float+0x1e6>
 8007daa:	6923      	ldr	r3, [r4, #16]
 8007dac:	4642      	mov	r2, r8
 8007dae:	4631      	mov	r1, r6
 8007db0:	4628      	mov	r0, r5
 8007db2:	47b8      	blx	r7
 8007db4:	3001      	adds	r0, #1
 8007db6:	d12b      	bne.n	8007e10 <_printf_float+0x23c>
 8007db8:	e767      	b.n	8007c8a <_printf_float+0xb6>
 8007dba:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8007dbe:	f240 80dd 	bls.w	8007f7c <_printf_float+0x3a8>
 8007dc2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8007dc6:	2200      	movs	r2, #0
 8007dc8:	2300      	movs	r3, #0
 8007dca:	f7f8 fe7d 	bl	8000ac8 <__aeabi_dcmpeq>
 8007dce:	2800      	cmp	r0, #0
 8007dd0:	d033      	beq.n	8007e3a <_printf_float+0x266>
 8007dd2:	4a37      	ldr	r2, [pc, #220]	@ (8007eb0 <_printf_float+0x2dc>)
 8007dd4:	2301      	movs	r3, #1
 8007dd6:	4631      	mov	r1, r6
 8007dd8:	4628      	mov	r0, r5
 8007dda:	47b8      	blx	r7
 8007ddc:	3001      	adds	r0, #1
 8007dde:	f43f af54 	beq.w	8007c8a <_printf_float+0xb6>
 8007de2:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8007de6:	4543      	cmp	r3, r8
 8007de8:	db02      	blt.n	8007df0 <_printf_float+0x21c>
 8007dea:	6823      	ldr	r3, [r4, #0]
 8007dec:	07d8      	lsls	r0, r3, #31
 8007dee:	d50f      	bpl.n	8007e10 <_printf_float+0x23c>
 8007df0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007df4:	4631      	mov	r1, r6
 8007df6:	4628      	mov	r0, r5
 8007df8:	47b8      	blx	r7
 8007dfa:	3001      	adds	r0, #1
 8007dfc:	f43f af45 	beq.w	8007c8a <_printf_float+0xb6>
 8007e00:	f04f 0900 	mov.w	r9, #0
 8007e04:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8007e08:	f104 0a1a 	add.w	sl, r4, #26
 8007e0c:	45c8      	cmp	r8, r9
 8007e0e:	dc09      	bgt.n	8007e24 <_printf_float+0x250>
 8007e10:	6823      	ldr	r3, [r4, #0]
 8007e12:	079b      	lsls	r3, r3, #30
 8007e14:	f100 8103 	bmi.w	800801e <_printf_float+0x44a>
 8007e18:	68e0      	ldr	r0, [r4, #12]
 8007e1a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007e1c:	4298      	cmp	r0, r3
 8007e1e:	bfb8      	it	lt
 8007e20:	4618      	movlt	r0, r3
 8007e22:	e734      	b.n	8007c8e <_printf_float+0xba>
 8007e24:	2301      	movs	r3, #1
 8007e26:	4652      	mov	r2, sl
 8007e28:	4631      	mov	r1, r6
 8007e2a:	4628      	mov	r0, r5
 8007e2c:	47b8      	blx	r7
 8007e2e:	3001      	adds	r0, #1
 8007e30:	f43f af2b 	beq.w	8007c8a <_printf_float+0xb6>
 8007e34:	f109 0901 	add.w	r9, r9, #1
 8007e38:	e7e8      	b.n	8007e0c <_printf_float+0x238>
 8007e3a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	dc39      	bgt.n	8007eb4 <_printf_float+0x2e0>
 8007e40:	4a1b      	ldr	r2, [pc, #108]	@ (8007eb0 <_printf_float+0x2dc>)
 8007e42:	2301      	movs	r3, #1
 8007e44:	4631      	mov	r1, r6
 8007e46:	4628      	mov	r0, r5
 8007e48:	47b8      	blx	r7
 8007e4a:	3001      	adds	r0, #1
 8007e4c:	f43f af1d 	beq.w	8007c8a <_printf_float+0xb6>
 8007e50:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8007e54:	ea59 0303 	orrs.w	r3, r9, r3
 8007e58:	d102      	bne.n	8007e60 <_printf_float+0x28c>
 8007e5a:	6823      	ldr	r3, [r4, #0]
 8007e5c:	07d9      	lsls	r1, r3, #31
 8007e5e:	d5d7      	bpl.n	8007e10 <_printf_float+0x23c>
 8007e60:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007e64:	4631      	mov	r1, r6
 8007e66:	4628      	mov	r0, r5
 8007e68:	47b8      	blx	r7
 8007e6a:	3001      	adds	r0, #1
 8007e6c:	f43f af0d 	beq.w	8007c8a <_printf_float+0xb6>
 8007e70:	f04f 0a00 	mov.w	sl, #0
 8007e74:	f104 0b1a 	add.w	fp, r4, #26
 8007e78:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007e7a:	425b      	negs	r3, r3
 8007e7c:	4553      	cmp	r3, sl
 8007e7e:	dc01      	bgt.n	8007e84 <_printf_float+0x2b0>
 8007e80:	464b      	mov	r3, r9
 8007e82:	e793      	b.n	8007dac <_printf_float+0x1d8>
 8007e84:	2301      	movs	r3, #1
 8007e86:	465a      	mov	r2, fp
 8007e88:	4631      	mov	r1, r6
 8007e8a:	4628      	mov	r0, r5
 8007e8c:	47b8      	blx	r7
 8007e8e:	3001      	adds	r0, #1
 8007e90:	f43f aefb 	beq.w	8007c8a <_printf_float+0xb6>
 8007e94:	f10a 0a01 	add.w	sl, sl, #1
 8007e98:	e7ee      	b.n	8007e78 <_printf_float+0x2a4>
 8007e9a:	bf00      	nop
 8007e9c:	7fefffff 	.word	0x7fefffff
 8007ea0:	0800a8c8 	.word	0x0800a8c8
 8007ea4:	0800a8cc 	.word	0x0800a8cc
 8007ea8:	0800a8d0 	.word	0x0800a8d0
 8007eac:	0800a8d4 	.word	0x0800a8d4
 8007eb0:	0800a8d8 	.word	0x0800a8d8
 8007eb4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007eb6:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8007eba:	4553      	cmp	r3, sl
 8007ebc:	bfa8      	it	ge
 8007ebe:	4653      	movge	r3, sl
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	4699      	mov	r9, r3
 8007ec4:	dc36      	bgt.n	8007f34 <_printf_float+0x360>
 8007ec6:	f04f 0b00 	mov.w	fp, #0
 8007eca:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007ece:	f104 021a 	add.w	r2, r4, #26
 8007ed2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007ed4:	9306      	str	r3, [sp, #24]
 8007ed6:	eba3 0309 	sub.w	r3, r3, r9
 8007eda:	455b      	cmp	r3, fp
 8007edc:	dc31      	bgt.n	8007f42 <_printf_float+0x36e>
 8007ede:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007ee0:	459a      	cmp	sl, r3
 8007ee2:	dc3a      	bgt.n	8007f5a <_printf_float+0x386>
 8007ee4:	6823      	ldr	r3, [r4, #0]
 8007ee6:	07da      	lsls	r2, r3, #31
 8007ee8:	d437      	bmi.n	8007f5a <_printf_float+0x386>
 8007eea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007eec:	ebaa 0903 	sub.w	r9, sl, r3
 8007ef0:	9b06      	ldr	r3, [sp, #24]
 8007ef2:	ebaa 0303 	sub.w	r3, sl, r3
 8007ef6:	4599      	cmp	r9, r3
 8007ef8:	bfa8      	it	ge
 8007efa:	4699      	movge	r9, r3
 8007efc:	f1b9 0f00 	cmp.w	r9, #0
 8007f00:	dc33      	bgt.n	8007f6a <_printf_float+0x396>
 8007f02:	f04f 0800 	mov.w	r8, #0
 8007f06:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007f0a:	f104 0b1a 	add.w	fp, r4, #26
 8007f0e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007f10:	ebaa 0303 	sub.w	r3, sl, r3
 8007f14:	eba3 0309 	sub.w	r3, r3, r9
 8007f18:	4543      	cmp	r3, r8
 8007f1a:	f77f af79 	ble.w	8007e10 <_printf_float+0x23c>
 8007f1e:	2301      	movs	r3, #1
 8007f20:	465a      	mov	r2, fp
 8007f22:	4631      	mov	r1, r6
 8007f24:	4628      	mov	r0, r5
 8007f26:	47b8      	blx	r7
 8007f28:	3001      	adds	r0, #1
 8007f2a:	f43f aeae 	beq.w	8007c8a <_printf_float+0xb6>
 8007f2e:	f108 0801 	add.w	r8, r8, #1
 8007f32:	e7ec      	b.n	8007f0e <_printf_float+0x33a>
 8007f34:	4642      	mov	r2, r8
 8007f36:	4631      	mov	r1, r6
 8007f38:	4628      	mov	r0, r5
 8007f3a:	47b8      	blx	r7
 8007f3c:	3001      	adds	r0, #1
 8007f3e:	d1c2      	bne.n	8007ec6 <_printf_float+0x2f2>
 8007f40:	e6a3      	b.n	8007c8a <_printf_float+0xb6>
 8007f42:	2301      	movs	r3, #1
 8007f44:	4631      	mov	r1, r6
 8007f46:	4628      	mov	r0, r5
 8007f48:	9206      	str	r2, [sp, #24]
 8007f4a:	47b8      	blx	r7
 8007f4c:	3001      	adds	r0, #1
 8007f4e:	f43f ae9c 	beq.w	8007c8a <_printf_float+0xb6>
 8007f52:	9a06      	ldr	r2, [sp, #24]
 8007f54:	f10b 0b01 	add.w	fp, fp, #1
 8007f58:	e7bb      	b.n	8007ed2 <_printf_float+0x2fe>
 8007f5a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007f5e:	4631      	mov	r1, r6
 8007f60:	4628      	mov	r0, r5
 8007f62:	47b8      	blx	r7
 8007f64:	3001      	adds	r0, #1
 8007f66:	d1c0      	bne.n	8007eea <_printf_float+0x316>
 8007f68:	e68f      	b.n	8007c8a <_printf_float+0xb6>
 8007f6a:	9a06      	ldr	r2, [sp, #24]
 8007f6c:	464b      	mov	r3, r9
 8007f6e:	4442      	add	r2, r8
 8007f70:	4631      	mov	r1, r6
 8007f72:	4628      	mov	r0, r5
 8007f74:	47b8      	blx	r7
 8007f76:	3001      	adds	r0, #1
 8007f78:	d1c3      	bne.n	8007f02 <_printf_float+0x32e>
 8007f7a:	e686      	b.n	8007c8a <_printf_float+0xb6>
 8007f7c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8007f80:	f1ba 0f01 	cmp.w	sl, #1
 8007f84:	dc01      	bgt.n	8007f8a <_printf_float+0x3b6>
 8007f86:	07db      	lsls	r3, r3, #31
 8007f88:	d536      	bpl.n	8007ff8 <_printf_float+0x424>
 8007f8a:	2301      	movs	r3, #1
 8007f8c:	4642      	mov	r2, r8
 8007f8e:	4631      	mov	r1, r6
 8007f90:	4628      	mov	r0, r5
 8007f92:	47b8      	blx	r7
 8007f94:	3001      	adds	r0, #1
 8007f96:	f43f ae78 	beq.w	8007c8a <_printf_float+0xb6>
 8007f9a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007f9e:	4631      	mov	r1, r6
 8007fa0:	4628      	mov	r0, r5
 8007fa2:	47b8      	blx	r7
 8007fa4:	3001      	adds	r0, #1
 8007fa6:	f43f ae70 	beq.w	8007c8a <_printf_float+0xb6>
 8007faa:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8007fae:	2200      	movs	r2, #0
 8007fb0:	2300      	movs	r3, #0
 8007fb2:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8007fb6:	f7f8 fd87 	bl	8000ac8 <__aeabi_dcmpeq>
 8007fba:	b9c0      	cbnz	r0, 8007fee <_printf_float+0x41a>
 8007fbc:	4653      	mov	r3, sl
 8007fbe:	f108 0201 	add.w	r2, r8, #1
 8007fc2:	4631      	mov	r1, r6
 8007fc4:	4628      	mov	r0, r5
 8007fc6:	47b8      	blx	r7
 8007fc8:	3001      	adds	r0, #1
 8007fca:	d10c      	bne.n	8007fe6 <_printf_float+0x412>
 8007fcc:	e65d      	b.n	8007c8a <_printf_float+0xb6>
 8007fce:	2301      	movs	r3, #1
 8007fd0:	465a      	mov	r2, fp
 8007fd2:	4631      	mov	r1, r6
 8007fd4:	4628      	mov	r0, r5
 8007fd6:	47b8      	blx	r7
 8007fd8:	3001      	adds	r0, #1
 8007fda:	f43f ae56 	beq.w	8007c8a <_printf_float+0xb6>
 8007fde:	f108 0801 	add.w	r8, r8, #1
 8007fe2:	45d0      	cmp	r8, sl
 8007fe4:	dbf3      	blt.n	8007fce <_printf_float+0x3fa>
 8007fe6:	464b      	mov	r3, r9
 8007fe8:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8007fec:	e6df      	b.n	8007dae <_printf_float+0x1da>
 8007fee:	f04f 0800 	mov.w	r8, #0
 8007ff2:	f104 0b1a 	add.w	fp, r4, #26
 8007ff6:	e7f4      	b.n	8007fe2 <_printf_float+0x40e>
 8007ff8:	2301      	movs	r3, #1
 8007ffa:	4642      	mov	r2, r8
 8007ffc:	e7e1      	b.n	8007fc2 <_printf_float+0x3ee>
 8007ffe:	2301      	movs	r3, #1
 8008000:	464a      	mov	r2, r9
 8008002:	4631      	mov	r1, r6
 8008004:	4628      	mov	r0, r5
 8008006:	47b8      	blx	r7
 8008008:	3001      	adds	r0, #1
 800800a:	f43f ae3e 	beq.w	8007c8a <_printf_float+0xb6>
 800800e:	f108 0801 	add.w	r8, r8, #1
 8008012:	68e3      	ldr	r3, [r4, #12]
 8008014:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008016:	1a5b      	subs	r3, r3, r1
 8008018:	4543      	cmp	r3, r8
 800801a:	dcf0      	bgt.n	8007ffe <_printf_float+0x42a>
 800801c:	e6fc      	b.n	8007e18 <_printf_float+0x244>
 800801e:	f04f 0800 	mov.w	r8, #0
 8008022:	f104 0919 	add.w	r9, r4, #25
 8008026:	e7f4      	b.n	8008012 <_printf_float+0x43e>

08008028 <_printf_common>:
 8008028:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800802c:	4616      	mov	r6, r2
 800802e:	4698      	mov	r8, r3
 8008030:	688a      	ldr	r2, [r1, #8]
 8008032:	690b      	ldr	r3, [r1, #16]
 8008034:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008038:	4293      	cmp	r3, r2
 800803a:	bfb8      	it	lt
 800803c:	4613      	movlt	r3, r2
 800803e:	6033      	str	r3, [r6, #0]
 8008040:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008044:	4607      	mov	r7, r0
 8008046:	460c      	mov	r4, r1
 8008048:	b10a      	cbz	r2, 800804e <_printf_common+0x26>
 800804a:	3301      	adds	r3, #1
 800804c:	6033      	str	r3, [r6, #0]
 800804e:	6823      	ldr	r3, [r4, #0]
 8008050:	0699      	lsls	r1, r3, #26
 8008052:	bf42      	ittt	mi
 8008054:	6833      	ldrmi	r3, [r6, #0]
 8008056:	3302      	addmi	r3, #2
 8008058:	6033      	strmi	r3, [r6, #0]
 800805a:	6825      	ldr	r5, [r4, #0]
 800805c:	f015 0506 	ands.w	r5, r5, #6
 8008060:	d106      	bne.n	8008070 <_printf_common+0x48>
 8008062:	f104 0a19 	add.w	sl, r4, #25
 8008066:	68e3      	ldr	r3, [r4, #12]
 8008068:	6832      	ldr	r2, [r6, #0]
 800806a:	1a9b      	subs	r3, r3, r2
 800806c:	42ab      	cmp	r3, r5
 800806e:	dc26      	bgt.n	80080be <_printf_common+0x96>
 8008070:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008074:	6822      	ldr	r2, [r4, #0]
 8008076:	3b00      	subs	r3, #0
 8008078:	bf18      	it	ne
 800807a:	2301      	movne	r3, #1
 800807c:	0692      	lsls	r2, r2, #26
 800807e:	d42b      	bmi.n	80080d8 <_printf_common+0xb0>
 8008080:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008084:	4641      	mov	r1, r8
 8008086:	4638      	mov	r0, r7
 8008088:	47c8      	blx	r9
 800808a:	3001      	adds	r0, #1
 800808c:	d01e      	beq.n	80080cc <_printf_common+0xa4>
 800808e:	6823      	ldr	r3, [r4, #0]
 8008090:	6922      	ldr	r2, [r4, #16]
 8008092:	f003 0306 	and.w	r3, r3, #6
 8008096:	2b04      	cmp	r3, #4
 8008098:	bf02      	ittt	eq
 800809a:	68e5      	ldreq	r5, [r4, #12]
 800809c:	6833      	ldreq	r3, [r6, #0]
 800809e:	1aed      	subeq	r5, r5, r3
 80080a0:	68a3      	ldr	r3, [r4, #8]
 80080a2:	bf0c      	ite	eq
 80080a4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80080a8:	2500      	movne	r5, #0
 80080aa:	4293      	cmp	r3, r2
 80080ac:	bfc4      	itt	gt
 80080ae:	1a9b      	subgt	r3, r3, r2
 80080b0:	18ed      	addgt	r5, r5, r3
 80080b2:	2600      	movs	r6, #0
 80080b4:	341a      	adds	r4, #26
 80080b6:	42b5      	cmp	r5, r6
 80080b8:	d11a      	bne.n	80080f0 <_printf_common+0xc8>
 80080ba:	2000      	movs	r0, #0
 80080bc:	e008      	b.n	80080d0 <_printf_common+0xa8>
 80080be:	2301      	movs	r3, #1
 80080c0:	4652      	mov	r2, sl
 80080c2:	4641      	mov	r1, r8
 80080c4:	4638      	mov	r0, r7
 80080c6:	47c8      	blx	r9
 80080c8:	3001      	adds	r0, #1
 80080ca:	d103      	bne.n	80080d4 <_printf_common+0xac>
 80080cc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80080d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80080d4:	3501      	adds	r5, #1
 80080d6:	e7c6      	b.n	8008066 <_printf_common+0x3e>
 80080d8:	18e1      	adds	r1, r4, r3
 80080da:	1c5a      	adds	r2, r3, #1
 80080dc:	2030      	movs	r0, #48	@ 0x30
 80080de:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80080e2:	4422      	add	r2, r4
 80080e4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80080e8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80080ec:	3302      	adds	r3, #2
 80080ee:	e7c7      	b.n	8008080 <_printf_common+0x58>
 80080f0:	2301      	movs	r3, #1
 80080f2:	4622      	mov	r2, r4
 80080f4:	4641      	mov	r1, r8
 80080f6:	4638      	mov	r0, r7
 80080f8:	47c8      	blx	r9
 80080fa:	3001      	adds	r0, #1
 80080fc:	d0e6      	beq.n	80080cc <_printf_common+0xa4>
 80080fe:	3601      	adds	r6, #1
 8008100:	e7d9      	b.n	80080b6 <_printf_common+0x8e>
	...

08008104 <_printf_i>:
 8008104:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008108:	7e0f      	ldrb	r7, [r1, #24]
 800810a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800810c:	2f78      	cmp	r7, #120	@ 0x78
 800810e:	4691      	mov	r9, r2
 8008110:	4680      	mov	r8, r0
 8008112:	460c      	mov	r4, r1
 8008114:	469a      	mov	sl, r3
 8008116:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800811a:	d807      	bhi.n	800812c <_printf_i+0x28>
 800811c:	2f62      	cmp	r7, #98	@ 0x62
 800811e:	d80a      	bhi.n	8008136 <_printf_i+0x32>
 8008120:	2f00      	cmp	r7, #0
 8008122:	f000 80d2 	beq.w	80082ca <_printf_i+0x1c6>
 8008126:	2f58      	cmp	r7, #88	@ 0x58
 8008128:	f000 80b9 	beq.w	800829e <_printf_i+0x19a>
 800812c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008130:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008134:	e03a      	b.n	80081ac <_printf_i+0xa8>
 8008136:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800813a:	2b15      	cmp	r3, #21
 800813c:	d8f6      	bhi.n	800812c <_printf_i+0x28>
 800813e:	a101      	add	r1, pc, #4	@ (adr r1, 8008144 <_printf_i+0x40>)
 8008140:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008144:	0800819d 	.word	0x0800819d
 8008148:	080081b1 	.word	0x080081b1
 800814c:	0800812d 	.word	0x0800812d
 8008150:	0800812d 	.word	0x0800812d
 8008154:	0800812d 	.word	0x0800812d
 8008158:	0800812d 	.word	0x0800812d
 800815c:	080081b1 	.word	0x080081b1
 8008160:	0800812d 	.word	0x0800812d
 8008164:	0800812d 	.word	0x0800812d
 8008168:	0800812d 	.word	0x0800812d
 800816c:	0800812d 	.word	0x0800812d
 8008170:	080082b1 	.word	0x080082b1
 8008174:	080081db 	.word	0x080081db
 8008178:	0800826b 	.word	0x0800826b
 800817c:	0800812d 	.word	0x0800812d
 8008180:	0800812d 	.word	0x0800812d
 8008184:	080082d3 	.word	0x080082d3
 8008188:	0800812d 	.word	0x0800812d
 800818c:	080081db 	.word	0x080081db
 8008190:	0800812d 	.word	0x0800812d
 8008194:	0800812d 	.word	0x0800812d
 8008198:	08008273 	.word	0x08008273
 800819c:	6833      	ldr	r3, [r6, #0]
 800819e:	1d1a      	adds	r2, r3, #4
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	6032      	str	r2, [r6, #0]
 80081a4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80081a8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80081ac:	2301      	movs	r3, #1
 80081ae:	e09d      	b.n	80082ec <_printf_i+0x1e8>
 80081b0:	6833      	ldr	r3, [r6, #0]
 80081b2:	6820      	ldr	r0, [r4, #0]
 80081b4:	1d19      	adds	r1, r3, #4
 80081b6:	6031      	str	r1, [r6, #0]
 80081b8:	0606      	lsls	r6, r0, #24
 80081ba:	d501      	bpl.n	80081c0 <_printf_i+0xbc>
 80081bc:	681d      	ldr	r5, [r3, #0]
 80081be:	e003      	b.n	80081c8 <_printf_i+0xc4>
 80081c0:	0645      	lsls	r5, r0, #25
 80081c2:	d5fb      	bpl.n	80081bc <_printf_i+0xb8>
 80081c4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80081c8:	2d00      	cmp	r5, #0
 80081ca:	da03      	bge.n	80081d4 <_printf_i+0xd0>
 80081cc:	232d      	movs	r3, #45	@ 0x2d
 80081ce:	426d      	negs	r5, r5
 80081d0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80081d4:	4859      	ldr	r0, [pc, #356]	@ (800833c <_printf_i+0x238>)
 80081d6:	230a      	movs	r3, #10
 80081d8:	e011      	b.n	80081fe <_printf_i+0xfa>
 80081da:	6821      	ldr	r1, [r4, #0]
 80081dc:	6833      	ldr	r3, [r6, #0]
 80081de:	0608      	lsls	r0, r1, #24
 80081e0:	f853 5b04 	ldr.w	r5, [r3], #4
 80081e4:	d402      	bmi.n	80081ec <_printf_i+0xe8>
 80081e6:	0649      	lsls	r1, r1, #25
 80081e8:	bf48      	it	mi
 80081ea:	b2ad      	uxthmi	r5, r5
 80081ec:	2f6f      	cmp	r7, #111	@ 0x6f
 80081ee:	4853      	ldr	r0, [pc, #332]	@ (800833c <_printf_i+0x238>)
 80081f0:	6033      	str	r3, [r6, #0]
 80081f2:	bf14      	ite	ne
 80081f4:	230a      	movne	r3, #10
 80081f6:	2308      	moveq	r3, #8
 80081f8:	2100      	movs	r1, #0
 80081fa:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80081fe:	6866      	ldr	r6, [r4, #4]
 8008200:	60a6      	str	r6, [r4, #8]
 8008202:	2e00      	cmp	r6, #0
 8008204:	bfa2      	ittt	ge
 8008206:	6821      	ldrge	r1, [r4, #0]
 8008208:	f021 0104 	bicge.w	r1, r1, #4
 800820c:	6021      	strge	r1, [r4, #0]
 800820e:	b90d      	cbnz	r5, 8008214 <_printf_i+0x110>
 8008210:	2e00      	cmp	r6, #0
 8008212:	d04b      	beq.n	80082ac <_printf_i+0x1a8>
 8008214:	4616      	mov	r6, r2
 8008216:	fbb5 f1f3 	udiv	r1, r5, r3
 800821a:	fb03 5711 	mls	r7, r3, r1, r5
 800821e:	5dc7      	ldrb	r7, [r0, r7]
 8008220:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008224:	462f      	mov	r7, r5
 8008226:	42bb      	cmp	r3, r7
 8008228:	460d      	mov	r5, r1
 800822a:	d9f4      	bls.n	8008216 <_printf_i+0x112>
 800822c:	2b08      	cmp	r3, #8
 800822e:	d10b      	bne.n	8008248 <_printf_i+0x144>
 8008230:	6823      	ldr	r3, [r4, #0]
 8008232:	07df      	lsls	r7, r3, #31
 8008234:	d508      	bpl.n	8008248 <_printf_i+0x144>
 8008236:	6923      	ldr	r3, [r4, #16]
 8008238:	6861      	ldr	r1, [r4, #4]
 800823a:	4299      	cmp	r1, r3
 800823c:	bfde      	ittt	le
 800823e:	2330      	movle	r3, #48	@ 0x30
 8008240:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008244:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8008248:	1b92      	subs	r2, r2, r6
 800824a:	6122      	str	r2, [r4, #16]
 800824c:	f8cd a000 	str.w	sl, [sp]
 8008250:	464b      	mov	r3, r9
 8008252:	aa03      	add	r2, sp, #12
 8008254:	4621      	mov	r1, r4
 8008256:	4640      	mov	r0, r8
 8008258:	f7ff fee6 	bl	8008028 <_printf_common>
 800825c:	3001      	adds	r0, #1
 800825e:	d14a      	bne.n	80082f6 <_printf_i+0x1f2>
 8008260:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008264:	b004      	add	sp, #16
 8008266:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800826a:	6823      	ldr	r3, [r4, #0]
 800826c:	f043 0320 	orr.w	r3, r3, #32
 8008270:	6023      	str	r3, [r4, #0]
 8008272:	4833      	ldr	r0, [pc, #204]	@ (8008340 <_printf_i+0x23c>)
 8008274:	2778      	movs	r7, #120	@ 0x78
 8008276:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800827a:	6823      	ldr	r3, [r4, #0]
 800827c:	6831      	ldr	r1, [r6, #0]
 800827e:	061f      	lsls	r7, r3, #24
 8008280:	f851 5b04 	ldr.w	r5, [r1], #4
 8008284:	d402      	bmi.n	800828c <_printf_i+0x188>
 8008286:	065f      	lsls	r7, r3, #25
 8008288:	bf48      	it	mi
 800828a:	b2ad      	uxthmi	r5, r5
 800828c:	6031      	str	r1, [r6, #0]
 800828e:	07d9      	lsls	r1, r3, #31
 8008290:	bf44      	itt	mi
 8008292:	f043 0320 	orrmi.w	r3, r3, #32
 8008296:	6023      	strmi	r3, [r4, #0]
 8008298:	b11d      	cbz	r5, 80082a2 <_printf_i+0x19e>
 800829a:	2310      	movs	r3, #16
 800829c:	e7ac      	b.n	80081f8 <_printf_i+0xf4>
 800829e:	4827      	ldr	r0, [pc, #156]	@ (800833c <_printf_i+0x238>)
 80082a0:	e7e9      	b.n	8008276 <_printf_i+0x172>
 80082a2:	6823      	ldr	r3, [r4, #0]
 80082a4:	f023 0320 	bic.w	r3, r3, #32
 80082a8:	6023      	str	r3, [r4, #0]
 80082aa:	e7f6      	b.n	800829a <_printf_i+0x196>
 80082ac:	4616      	mov	r6, r2
 80082ae:	e7bd      	b.n	800822c <_printf_i+0x128>
 80082b0:	6833      	ldr	r3, [r6, #0]
 80082b2:	6825      	ldr	r5, [r4, #0]
 80082b4:	6961      	ldr	r1, [r4, #20]
 80082b6:	1d18      	adds	r0, r3, #4
 80082b8:	6030      	str	r0, [r6, #0]
 80082ba:	062e      	lsls	r6, r5, #24
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	d501      	bpl.n	80082c4 <_printf_i+0x1c0>
 80082c0:	6019      	str	r1, [r3, #0]
 80082c2:	e002      	b.n	80082ca <_printf_i+0x1c6>
 80082c4:	0668      	lsls	r0, r5, #25
 80082c6:	d5fb      	bpl.n	80082c0 <_printf_i+0x1bc>
 80082c8:	8019      	strh	r1, [r3, #0]
 80082ca:	2300      	movs	r3, #0
 80082cc:	6123      	str	r3, [r4, #16]
 80082ce:	4616      	mov	r6, r2
 80082d0:	e7bc      	b.n	800824c <_printf_i+0x148>
 80082d2:	6833      	ldr	r3, [r6, #0]
 80082d4:	1d1a      	adds	r2, r3, #4
 80082d6:	6032      	str	r2, [r6, #0]
 80082d8:	681e      	ldr	r6, [r3, #0]
 80082da:	6862      	ldr	r2, [r4, #4]
 80082dc:	2100      	movs	r1, #0
 80082de:	4630      	mov	r0, r6
 80082e0:	f7f7 ff76 	bl	80001d0 <memchr>
 80082e4:	b108      	cbz	r0, 80082ea <_printf_i+0x1e6>
 80082e6:	1b80      	subs	r0, r0, r6
 80082e8:	6060      	str	r0, [r4, #4]
 80082ea:	6863      	ldr	r3, [r4, #4]
 80082ec:	6123      	str	r3, [r4, #16]
 80082ee:	2300      	movs	r3, #0
 80082f0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80082f4:	e7aa      	b.n	800824c <_printf_i+0x148>
 80082f6:	6923      	ldr	r3, [r4, #16]
 80082f8:	4632      	mov	r2, r6
 80082fa:	4649      	mov	r1, r9
 80082fc:	4640      	mov	r0, r8
 80082fe:	47d0      	blx	sl
 8008300:	3001      	adds	r0, #1
 8008302:	d0ad      	beq.n	8008260 <_printf_i+0x15c>
 8008304:	6823      	ldr	r3, [r4, #0]
 8008306:	079b      	lsls	r3, r3, #30
 8008308:	d413      	bmi.n	8008332 <_printf_i+0x22e>
 800830a:	68e0      	ldr	r0, [r4, #12]
 800830c:	9b03      	ldr	r3, [sp, #12]
 800830e:	4298      	cmp	r0, r3
 8008310:	bfb8      	it	lt
 8008312:	4618      	movlt	r0, r3
 8008314:	e7a6      	b.n	8008264 <_printf_i+0x160>
 8008316:	2301      	movs	r3, #1
 8008318:	4632      	mov	r2, r6
 800831a:	4649      	mov	r1, r9
 800831c:	4640      	mov	r0, r8
 800831e:	47d0      	blx	sl
 8008320:	3001      	adds	r0, #1
 8008322:	d09d      	beq.n	8008260 <_printf_i+0x15c>
 8008324:	3501      	adds	r5, #1
 8008326:	68e3      	ldr	r3, [r4, #12]
 8008328:	9903      	ldr	r1, [sp, #12]
 800832a:	1a5b      	subs	r3, r3, r1
 800832c:	42ab      	cmp	r3, r5
 800832e:	dcf2      	bgt.n	8008316 <_printf_i+0x212>
 8008330:	e7eb      	b.n	800830a <_printf_i+0x206>
 8008332:	2500      	movs	r5, #0
 8008334:	f104 0619 	add.w	r6, r4, #25
 8008338:	e7f5      	b.n	8008326 <_printf_i+0x222>
 800833a:	bf00      	nop
 800833c:	0800a8da 	.word	0x0800a8da
 8008340:	0800a8eb 	.word	0x0800a8eb

08008344 <std>:
 8008344:	2300      	movs	r3, #0
 8008346:	b510      	push	{r4, lr}
 8008348:	4604      	mov	r4, r0
 800834a:	e9c0 3300 	strd	r3, r3, [r0]
 800834e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008352:	6083      	str	r3, [r0, #8]
 8008354:	8181      	strh	r1, [r0, #12]
 8008356:	6643      	str	r3, [r0, #100]	@ 0x64
 8008358:	81c2      	strh	r2, [r0, #14]
 800835a:	6183      	str	r3, [r0, #24]
 800835c:	4619      	mov	r1, r3
 800835e:	2208      	movs	r2, #8
 8008360:	305c      	adds	r0, #92	@ 0x5c
 8008362:	f000 f948 	bl	80085f6 <memset>
 8008366:	4b0d      	ldr	r3, [pc, #52]	@ (800839c <std+0x58>)
 8008368:	6263      	str	r3, [r4, #36]	@ 0x24
 800836a:	4b0d      	ldr	r3, [pc, #52]	@ (80083a0 <std+0x5c>)
 800836c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800836e:	4b0d      	ldr	r3, [pc, #52]	@ (80083a4 <std+0x60>)
 8008370:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8008372:	4b0d      	ldr	r3, [pc, #52]	@ (80083a8 <std+0x64>)
 8008374:	6323      	str	r3, [r4, #48]	@ 0x30
 8008376:	4b0d      	ldr	r3, [pc, #52]	@ (80083ac <std+0x68>)
 8008378:	6224      	str	r4, [r4, #32]
 800837a:	429c      	cmp	r4, r3
 800837c:	d006      	beq.n	800838c <std+0x48>
 800837e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8008382:	4294      	cmp	r4, r2
 8008384:	d002      	beq.n	800838c <std+0x48>
 8008386:	33d0      	adds	r3, #208	@ 0xd0
 8008388:	429c      	cmp	r4, r3
 800838a:	d105      	bne.n	8008398 <std+0x54>
 800838c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8008390:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008394:	f000 b9c2 	b.w	800871c <__retarget_lock_init_recursive>
 8008398:	bd10      	pop	{r4, pc}
 800839a:	bf00      	nop
 800839c:	08008571 	.word	0x08008571
 80083a0:	08008593 	.word	0x08008593
 80083a4:	080085cb 	.word	0x080085cb
 80083a8:	080085ef 	.word	0x080085ef
 80083ac:	20000a94 	.word	0x20000a94

080083b0 <stdio_exit_handler>:
 80083b0:	4a02      	ldr	r2, [pc, #8]	@ (80083bc <stdio_exit_handler+0xc>)
 80083b2:	4903      	ldr	r1, [pc, #12]	@ (80083c0 <stdio_exit_handler+0x10>)
 80083b4:	4803      	ldr	r0, [pc, #12]	@ (80083c4 <stdio_exit_handler+0x14>)
 80083b6:	f000 b869 	b.w	800848c <_fwalk_sglue>
 80083ba:	bf00      	nop
 80083bc:	20000010 	.word	0x20000010
 80083c0:	0800a07d 	.word	0x0800a07d
 80083c4:	20000020 	.word	0x20000020

080083c8 <cleanup_stdio>:
 80083c8:	6841      	ldr	r1, [r0, #4]
 80083ca:	4b0c      	ldr	r3, [pc, #48]	@ (80083fc <cleanup_stdio+0x34>)
 80083cc:	4299      	cmp	r1, r3
 80083ce:	b510      	push	{r4, lr}
 80083d0:	4604      	mov	r4, r0
 80083d2:	d001      	beq.n	80083d8 <cleanup_stdio+0x10>
 80083d4:	f001 fe52 	bl	800a07c <_fflush_r>
 80083d8:	68a1      	ldr	r1, [r4, #8]
 80083da:	4b09      	ldr	r3, [pc, #36]	@ (8008400 <cleanup_stdio+0x38>)
 80083dc:	4299      	cmp	r1, r3
 80083de:	d002      	beq.n	80083e6 <cleanup_stdio+0x1e>
 80083e0:	4620      	mov	r0, r4
 80083e2:	f001 fe4b 	bl	800a07c <_fflush_r>
 80083e6:	68e1      	ldr	r1, [r4, #12]
 80083e8:	4b06      	ldr	r3, [pc, #24]	@ (8008404 <cleanup_stdio+0x3c>)
 80083ea:	4299      	cmp	r1, r3
 80083ec:	d004      	beq.n	80083f8 <cleanup_stdio+0x30>
 80083ee:	4620      	mov	r0, r4
 80083f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80083f4:	f001 be42 	b.w	800a07c <_fflush_r>
 80083f8:	bd10      	pop	{r4, pc}
 80083fa:	bf00      	nop
 80083fc:	20000a94 	.word	0x20000a94
 8008400:	20000afc 	.word	0x20000afc
 8008404:	20000b64 	.word	0x20000b64

08008408 <global_stdio_init.part.0>:
 8008408:	b510      	push	{r4, lr}
 800840a:	4b0b      	ldr	r3, [pc, #44]	@ (8008438 <global_stdio_init.part.0+0x30>)
 800840c:	4c0b      	ldr	r4, [pc, #44]	@ (800843c <global_stdio_init.part.0+0x34>)
 800840e:	4a0c      	ldr	r2, [pc, #48]	@ (8008440 <global_stdio_init.part.0+0x38>)
 8008410:	601a      	str	r2, [r3, #0]
 8008412:	4620      	mov	r0, r4
 8008414:	2200      	movs	r2, #0
 8008416:	2104      	movs	r1, #4
 8008418:	f7ff ff94 	bl	8008344 <std>
 800841c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8008420:	2201      	movs	r2, #1
 8008422:	2109      	movs	r1, #9
 8008424:	f7ff ff8e 	bl	8008344 <std>
 8008428:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800842c:	2202      	movs	r2, #2
 800842e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008432:	2112      	movs	r1, #18
 8008434:	f7ff bf86 	b.w	8008344 <std>
 8008438:	20000bcc 	.word	0x20000bcc
 800843c:	20000a94 	.word	0x20000a94
 8008440:	080083b1 	.word	0x080083b1

08008444 <__sfp_lock_acquire>:
 8008444:	4801      	ldr	r0, [pc, #4]	@ (800844c <__sfp_lock_acquire+0x8>)
 8008446:	f000 b96a 	b.w	800871e <__retarget_lock_acquire_recursive>
 800844a:	bf00      	nop
 800844c:	20000bd5 	.word	0x20000bd5

08008450 <__sfp_lock_release>:
 8008450:	4801      	ldr	r0, [pc, #4]	@ (8008458 <__sfp_lock_release+0x8>)
 8008452:	f000 b965 	b.w	8008720 <__retarget_lock_release_recursive>
 8008456:	bf00      	nop
 8008458:	20000bd5 	.word	0x20000bd5

0800845c <__sinit>:
 800845c:	b510      	push	{r4, lr}
 800845e:	4604      	mov	r4, r0
 8008460:	f7ff fff0 	bl	8008444 <__sfp_lock_acquire>
 8008464:	6a23      	ldr	r3, [r4, #32]
 8008466:	b11b      	cbz	r3, 8008470 <__sinit+0x14>
 8008468:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800846c:	f7ff bff0 	b.w	8008450 <__sfp_lock_release>
 8008470:	4b04      	ldr	r3, [pc, #16]	@ (8008484 <__sinit+0x28>)
 8008472:	6223      	str	r3, [r4, #32]
 8008474:	4b04      	ldr	r3, [pc, #16]	@ (8008488 <__sinit+0x2c>)
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	2b00      	cmp	r3, #0
 800847a:	d1f5      	bne.n	8008468 <__sinit+0xc>
 800847c:	f7ff ffc4 	bl	8008408 <global_stdio_init.part.0>
 8008480:	e7f2      	b.n	8008468 <__sinit+0xc>
 8008482:	bf00      	nop
 8008484:	080083c9 	.word	0x080083c9
 8008488:	20000bcc 	.word	0x20000bcc

0800848c <_fwalk_sglue>:
 800848c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008490:	4607      	mov	r7, r0
 8008492:	4688      	mov	r8, r1
 8008494:	4614      	mov	r4, r2
 8008496:	2600      	movs	r6, #0
 8008498:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800849c:	f1b9 0901 	subs.w	r9, r9, #1
 80084a0:	d505      	bpl.n	80084ae <_fwalk_sglue+0x22>
 80084a2:	6824      	ldr	r4, [r4, #0]
 80084a4:	2c00      	cmp	r4, #0
 80084a6:	d1f7      	bne.n	8008498 <_fwalk_sglue+0xc>
 80084a8:	4630      	mov	r0, r6
 80084aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80084ae:	89ab      	ldrh	r3, [r5, #12]
 80084b0:	2b01      	cmp	r3, #1
 80084b2:	d907      	bls.n	80084c4 <_fwalk_sglue+0x38>
 80084b4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80084b8:	3301      	adds	r3, #1
 80084ba:	d003      	beq.n	80084c4 <_fwalk_sglue+0x38>
 80084bc:	4629      	mov	r1, r5
 80084be:	4638      	mov	r0, r7
 80084c0:	47c0      	blx	r8
 80084c2:	4306      	orrs	r6, r0
 80084c4:	3568      	adds	r5, #104	@ 0x68
 80084c6:	e7e9      	b.n	800849c <_fwalk_sglue+0x10>

080084c8 <sniprintf>:
 80084c8:	b40c      	push	{r2, r3}
 80084ca:	b530      	push	{r4, r5, lr}
 80084cc:	4b17      	ldr	r3, [pc, #92]	@ (800852c <sniprintf+0x64>)
 80084ce:	1e0c      	subs	r4, r1, #0
 80084d0:	681d      	ldr	r5, [r3, #0]
 80084d2:	b09d      	sub	sp, #116	@ 0x74
 80084d4:	da08      	bge.n	80084e8 <sniprintf+0x20>
 80084d6:	238b      	movs	r3, #139	@ 0x8b
 80084d8:	602b      	str	r3, [r5, #0]
 80084da:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80084de:	b01d      	add	sp, #116	@ 0x74
 80084e0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80084e4:	b002      	add	sp, #8
 80084e6:	4770      	bx	lr
 80084e8:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80084ec:	f8ad 3014 	strh.w	r3, [sp, #20]
 80084f0:	bf14      	ite	ne
 80084f2:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 80084f6:	4623      	moveq	r3, r4
 80084f8:	9304      	str	r3, [sp, #16]
 80084fa:	9307      	str	r3, [sp, #28]
 80084fc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8008500:	9002      	str	r0, [sp, #8]
 8008502:	9006      	str	r0, [sp, #24]
 8008504:	f8ad 3016 	strh.w	r3, [sp, #22]
 8008508:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800850a:	ab21      	add	r3, sp, #132	@ 0x84
 800850c:	a902      	add	r1, sp, #8
 800850e:	4628      	mov	r0, r5
 8008510:	9301      	str	r3, [sp, #4]
 8008512:	f001 fc33 	bl	8009d7c <_svfiprintf_r>
 8008516:	1c43      	adds	r3, r0, #1
 8008518:	bfbc      	itt	lt
 800851a:	238b      	movlt	r3, #139	@ 0x8b
 800851c:	602b      	strlt	r3, [r5, #0]
 800851e:	2c00      	cmp	r4, #0
 8008520:	d0dd      	beq.n	80084de <sniprintf+0x16>
 8008522:	9b02      	ldr	r3, [sp, #8]
 8008524:	2200      	movs	r2, #0
 8008526:	701a      	strb	r2, [r3, #0]
 8008528:	e7d9      	b.n	80084de <sniprintf+0x16>
 800852a:	bf00      	nop
 800852c:	2000001c 	.word	0x2000001c

08008530 <siprintf>:
 8008530:	b40e      	push	{r1, r2, r3}
 8008532:	b500      	push	{lr}
 8008534:	b09c      	sub	sp, #112	@ 0x70
 8008536:	ab1d      	add	r3, sp, #116	@ 0x74
 8008538:	9002      	str	r0, [sp, #8]
 800853a:	9006      	str	r0, [sp, #24]
 800853c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8008540:	4809      	ldr	r0, [pc, #36]	@ (8008568 <siprintf+0x38>)
 8008542:	9107      	str	r1, [sp, #28]
 8008544:	9104      	str	r1, [sp, #16]
 8008546:	4909      	ldr	r1, [pc, #36]	@ (800856c <siprintf+0x3c>)
 8008548:	f853 2b04 	ldr.w	r2, [r3], #4
 800854c:	9105      	str	r1, [sp, #20]
 800854e:	6800      	ldr	r0, [r0, #0]
 8008550:	9301      	str	r3, [sp, #4]
 8008552:	a902      	add	r1, sp, #8
 8008554:	f001 fc12 	bl	8009d7c <_svfiprintf_r>
 8008558:	9b02      	ldr	r3, [sp, #8]
 800855a:	2200      	movs	r2, #0
 800855c:	701a      	strb	r2, [r3, #0]
 800855e:	b01c      	add	sp, #112	@ 0x70
 8008560:	f85d eb04 	ldr.w	lr, [sp], #4
 8008564:	b003      	add	sp, #12
 8008566:	4770      	bx	lr
 8008568:	2000001c 	.word	0x2000001c
 800856c:	ffff0208 	.word	0xffff0208

08008570 <__sread>:
 8008570:	b510      	push	{r4, lr}
 8008572:	460c      	mov	r4, r1
 8008574:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008578:	f000 f882 	bl	8008680 <_read_r>
 800857c:	2800      	cmp	r0, #0
 800857e:	bfab      	itete	ge
 8008580:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8008582:	89a3      	ldrhlt	r3, [r4, #12]
 8008584:	181b      	addge	r3, r3, r0
 8008586:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800858a:	bfac      	ite	ge
 800858c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800858e:	81a3      	strhlt	r3, [r4, #12]
 8008590:	bd10      	pop	{r4, pc}

08008592 <__swrite>:
 8008592:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008596:	461f      	mov	r7, r3
 8008598:	898b      	ldrh	r3, [r1, #12]
 800859a:	05db      	lsls	r3, r3, #23
 800859c:	4605      	mov	r5, r0
 800859e:	460c      	mov	r4, r1
 80085a0:	4616      	mov	r6, r2
 80085a2:	d505      	bpl.n	80085b0 <__swrite+0x1e>
 80085a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80085a8:	2302      	movs	r3, #2
 80085aa:	2200      	movs	r2, #0
 80085ac:	f000 f856 	bl	800865c <_lseek_r>
 80085b0:	89a3      	ldrh	r3, [r4, #12]
 80085b2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80085b6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80085ba:	81a3      	strh	r3, [r4, #12]
 80085bc:	4632      	mov	r2, r6
 80085be:	463b      	mov	r3, r7
 80085c0:	4628      	mov	r0, r5
 80085c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80085c6:	f000 b86d 	b.w	80086a4 <_write_r>

080085ca <__sseek>:
 80085ca:	b510      	push	{r4, lr}
 80085cc:	460c      	mov	r4, r1
 80085ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80085d2:	f000 f843 	bl	800865c <_lseek_r>
 80085d6:	1c43      	adds	r3, r0, #1
 80085d8:	89a3      	ldrh	r3, [r4, #12]
 80085da:	bf15      	itete	ne
 80085dc:	6560      	strne	r0, [r4, #84]	@ 0x54
 80085de:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80085e2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80085e6:	81a3      	strheq	r3, [r4, #12]
 80085e8:	bf18      	it	ne
 80085ea:	81a3      	strhne	r3, [r4, #12]
 80085ec:	bd10      	pop	{r4, pc}

080085ee <__sclose>:
 80085ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80085f2:	f000 b823 	b.w	800863c <_close_r>

080085f6 <memset>:
 80085f6:	4402      	add	r2, r0
 80085f8:	4603      	mov	r3, r0
 80085fa:	4293      	cmp	r3, r2
 80085fc:	d100      	bne.n	8008600 <memset+0xa>
 80085fe:	4770      	bx	lr
 8008600:	f803 1b01 	strb.w	r1, [r3], #1
 8008604:	e7f9      	b.n	80085fa <memset+0x4>

08008606 <strstr>:
 8008606:	780a      	ldrb	r2, [r1, #0]
 8008608:	b570      	push	{r4, r5, r6, lr}
 800860a:	b96a      	cbnz	r2, 8008628 <strstr+0x22>
 800860c:	bd70      	pop	{r4, r5, r6, pc}
 800860e:	429a      	cmp	r2, r3
 8008610:	d109      	bne.n	8008626 <strstr+0x20>
 8008612:	460c      	mov	r4, r1
 8008614:	4605      	mov	r5, r0
 8008616:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800861a:	2b00      	cmp	r3, #0
 800861c:	d0f6      	beq.n	800860c <strstr+0x6>
 800861e:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8008622:	429e      	cmp	r6, r3
 8008624:	d0f7      	beq.n	8008616 <strstr+0x10>
 8008626:	3001      	adds	r0, #1
 8008628:	7803      	ldrb	r3, [r0, #0]
 800862a:	2b00      	cmp	r3, #0
 800862c:	d1ef      	bne.n	800860e <strstr+0x8>
 800862e:	4618      	mov	r0, r3
 8008630:	e7ec      	b.n	800860c <strstr+0x6>
	...

08008634 <_localeconv_r>:
 8008634:	4800      	ldr	r0, [pc, #0]	@ (8008638 <_localeconv_r+0x4>)
 8008636:	4770      	bx	lr
 8008638:	2000015c 	.word	0x2000015c

0800863c <_close_r>:
 800863c:	b538      	push	{r3, r4, r5, lr}
 800863e:	4d06      	ldr	r5, [pc, #24]	@ (8008658 <_close_r+0x1c>)
 8008640:	2300      	movs	r3, #0
 8008642:	4604      	mov	r4, r0
 8008644:	4608      	mov	r0, r1
 8008646:	602b      	str	r3, [r5, #0]
 8008648:	f7f9 faee 	bl	8001c28 <_close>
 800864c:	1c43      	adds	r3, r0, #1
 800864e:	d102      	bne.n	8008656 <_close_r+0x1a>
 8008650:	682b      	ldr	r3, [r5, #0]
 8008652:	b103      	cbz	r3, 8008656 <_close_r+0x1a>
 8008654:	6023      	str	r3, [r4, #0]
 8008656:	bd38      	pop	{r3, r4, r5, pc}
 8008658:	20000bd0 	.word	0x20000bd0

0800865c <_lseek_r>:
 800865c:	b538      	push	{r3, r4, r5, lr}
 800865e:	4d07      	ldr	r5, [pc, #28]	@ (800867c <_lseek_r+0x20>)
 8008660:	4604      	mov	r4, r0
 8008662:	4608      	mov	r0, r1
 8008664:	4611      	mov	r1, r2
 8008666:	2200      	movs	r2, #0
 8008668:	602a      	str	r2, [r5, #0]
 800866a:	461a      	mov	r2, r3
 800866c:	f7f9 fb03 	bl	8001c76 <_lseek>
 8008670:	1c43      	adds	r3, r0, #1
 8008672:	d102      	bne.n	800867a <_lseek_r+0x1e>
 8008674:	682b      	ldr	r3, [r5, #0]
 8008676:	b103      	cbz	r3, 800867a <_lseek_r+0x1e>
 8008678:	6023      	str	r3, [r4, #0]
 800867a:	bd38      	pop	{r3, r4, r5, pc}
 800867c:	20000bd0 	.word	0x20000bd0

08008680 <_read_r>:
 8008680:	b538      	push	{r3, r4, r5, lr}
 8008682:	4d07      	ldr	r5, [pc, #28]	@ (80086a0 <_read_r+0x20>)
 8008684:	4604      	mov	r4, r0
 8008686:	4608      	mov	r0, r1
 8008688:	4611      	mov	r1, r2
 800868a:	2200      	movs	r2, #0
 800868c:	602a      	str	r2, [r5, #0]
 800868e:	461a      	mov	r2, r3
 8008690:	f7f9 fa91 	bl	8001bb6 <_read>
 8008694:	1c43      	adds	r3, r0, #1
 8008696:	d102      	bne.n	800869e <_read_r+0x1e>
 8008698:	682b      	ldr	r3, [r5, #0]
 800869a:	b103      	cbz	r3, 800869e <_read_r+0x1e>
 800869c:	6023      	str	r3, [r4, #0]
 800869e:	bd38      	pop	{r3, r4, r5, pc}
 80086a0:	20000bd0 	.word	0x20000bd0

080086a4 <_write_r>:
 80086a4:	b538      	push	{r3, r4, r5, lr}
 80086a6:	4d07      	ldr	r5, [pc, #28]	@ (80086c4 <_write_r+0x20>)
 80086a8:	4604      	mov	r4, r0
 80086aa:	4608      	mov	r0, r1
 80086ac:	4611      	mov	r1, r2
 80086ae:	2200      	movs	r2, #0
 80086b0:	602a      	str	r2, [r5, #0]
 80086b2:	461a      	mov	r2, r3
 80086b4:	f7f9 fa9c 	bl	8001bf0 <_write>
 80086b8:	1c43      	adds	r3, r0, #1
 80086ba:	d102      	bne.n	80086c2 <_write_r+0x1e>
 80086bc:	682b      	ldr	r3, [r5, #0]
 80086be:	b103      	cbz	r3, 80086c2 <_write_r+0x1e>
 80086c0:	6023      	str	r3, [r4, #0]
 80086c2:	bd38      	pop	{r3, r4, r5, pc}
 80086c4:	20000bd0 	.word	0x20000bd0

080086c8 <__errno>:
 80086c8:	4b01      	ldr	r3, [pc, #4]	@ (80086d0 <__errno+0x8>)
 80086ca:	6818      	ldr	r0, [r3, #0]
 80086cc:	4770      	bx	lr
 80086ce:	bf00      	nop
 80086d0:	2000001c 	.word	0x2000001c

080086d4 <__libc_init_array>:
 80086d4:	b570      	push	{r4, r5, r6, lr}
 80086d6:	4d0d      	ldr	r5, [pc, #52]	@ (800870c <__libc_init_array+0x38>)
 80086d8:	4c0d      	ldr	r4, [pc, #52]	@ (8008710 <__libc_init_array+0x3c>)
 80086da:	1b64      	subs	r4, r4, r5
 80086dc:	10a4      	asrs	r4, r4, #2
 80086de:	2600      	movs	r6, #0
 80086e0:	42a6      	cmp	r6, r4
 80086e2:	d109      	bne.n	80086f8 <__libc_init_array+0x24>
 80086e4:	4d0b      	ldr	r5, [pc, #44]	@ (8008714 <__libc_init_array+0x40>)
 80086e6:	4c0c      	ldr	r4, [pc, #48]	@ (8008718 <__libc_init_array+0x44>)
 80086e8:	f002 f866 	bl	800a7b8 <_init>
 80086ec:	1b64      	subs	r4, r4, r5
 80086ee:	10a4      	asrs	r4, r4, #2
 80086f0:	2600      	movs	r6, #0
 80086f2:	42a6      	cmp	r6, r4
 80086f4:	d105      	bne.n	8008702 <__libc_init_array+0x2e>
 80086f6:	bd70      	pop	{r4, r5, r6, pc}
 80086f8:	f855 3b04 	ldr.w	r3, [r5], #4
 80086fc:	4798      	blx	r3
 80086fe:	3601      	adds	r6, #1
 8008700:	e7ee      	b.n	80086e0 <__libc_init_array+0xc>
 8008702:	f855 3b04 	ldr.w	r3, [r5], #4
 8008706:	4798      	blx	r3
 8008708:	3601      	adds	r6, #1
 800870a:	e7f2      	b.n	80086f2 <__libc_init_array+0x1e>
 800870c:	0800ac40 	.word	0x0800ac40
 8008710:	0800ac40 	.word	0x0800ac40
 8008714:	0800ac40 	.word	0x0800ac40
 8008718:	0800ac44 	.word	0x0800ac44

0800871c <__retarget_lock_init_recursive>:
 800871c:	4770      	bx	lr

0800871e <__retarget_lock_acquire_recursive>:
 800871e:	4770      	bx	lr

08008720 <__retarget_lock_release_recursive>:
 8008720:	4770      	bx	lr

08008722 <quorem>:
 8008722:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008726:	6903      	ldr	r3, [r0, #16]
 8008728:	690c      	ldr	r4, [r1, #16]
 800872a:	42a3      	cmp	r3, r4
 800872c:	4607      	mov	r7, r0
 800872e:	db7e      	blt.n	800882e <quorem+0x10c>
 8008730:	3c01      	subs	r4, #1
 8008732:	f101 0814 	add.w	r8, r1, #20
 8008736:	00a3      	lsls	r3, r4, #2
 8008738:	f100 0514 	add.w	r5, r0, #20
 800873c:	9300      	str	r3, [sp, #0]
 800873e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008742:	9301      	str	r3, [sp, #4]
 8008744:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008748:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800874c:	3301      	adds	r3, #1
 800874e:	429a      	cmp	r2, r3
 8008750:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008754:	fbb2 f6f3 	udiv	r6, r2, r3
 8008758:	d32e      	bcc.n	80087b8 <quorem+0x96>
 800875a:	f04f 0a00 	mov.w	sl, #0
 800875e:	46c4      	mov	ip, r8
 8008760:	46ae      	mov	lr, r5
 8008762:	46d3      	mov	fp, sl
 8008764:	f85c 3b04 	ldr.w	r3, [ip], #4
 8008768:	b298      	uxth	r0, r3
 800876a:	fb06 a000 	mla	r0, r6, r0, sl
 800876e:	0c02      	lsrs	r2, r0, #16
 8008770:	0c1b      	lsrs	r3, r3, #16
 8008772:	fb06 2303 	mla	r3, r6, r3, r2
 8008776:	f8de 2000 	ldr.w	r2, [lr]
 800877a:	b280      	uxth	r0, r0
 800877c:	b292      	uxth	r2, r2
 800877e:	1a12      	subs	r2, r2, r0
 8008780:	445a      	add	r2, fp
 8008782:	f8de 0000 	ldr.w	r0, [lr]
 8008786:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800878a:	b29b      	uxth	r3, r3
 800878c:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8008790:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8008794:	b292      	uxth	r2, r2
 8008796:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800879a:	45e1      	cmp	r9, ip
 800879c:	f84e 2b04 	str.w	r2, [lr], #4
 80087a0:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80087a4:	d2de      	bcs.n	8008764 <quorem+0x42>
 80087a6:	9b00      	ldr	r3, [sp, #0]
 80087a8:	58eb      	ldr	r3, [r5, r3]
 80087aa:	b92b      	cbnz	r3, 80087b8 <quorem+0x96>
 80087ac:	9b01      	ldr	r3, [sp, #4]
 80087ae:	3b04      	subs	r3, #4
 80087b0:	429d      	cmp	r5, r3
 80087b2:	461a      	mov	r2, r3
 80087b4:	d32f      	bcc.n	8008816 <quorem+0xf4>
 80087b6:	613c      	str	r4, [r7, #16]
 80087b8:	4638      	mov	r0, r7
 80087ba:	f001 f97b 	bl	8009ab4 <__mcmp>
 80087be:	2800      	cmp	r0, #0
 80087c0:	db25      	blt.n	800880e <quorem+0xec>
 80087c2:	4629      	mov	r1, r5
 80087c4:	2000      	movs	r0, #0
 80087c6:	f858 2b04 	ldr.w	r2, [r8], #4
 80087ca:	f8d1 c000 	ldr.w	ip, [r1]
 80087ce:	fa1f fe82 	uxth.w	lr, r2
 80087d2:	fa1f f38c 	uxth.w	r3, ip
 80087d6:	eba3 030e 	sub.w	r3, r3, lr
 80087da:	4403      	add	r3, r0
 80087dc:	0c12      	lsrs	r2, r2, #16
 80087de:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80087e2:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80087e6:	b29b      	uxth	r3, r3
 80087e8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80087ec:	45c1      	cmp	r9, r8
 80087ee:	f841 3b04 	str.w	r3, [r1], #4
 80087f2:	ea4f 4022 	mov.w	r0, r2, asr #16
 80087f6:	d2e6      	bcs.n	80087c6 <quorem+0xa4>
 80087f8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80087fc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008800:	b922      	cbnz	r2, 800880c <quorem+0xea>
 8008802:	3b04      	subs	r3, #4
 8008804:	429d      	cmp	r5, r3
 8008806:	461a      	mov	r2, r3
 8008808:	d30b      	bcc.n	8008822 <quorem+0x100>
 800880a:	613c      	str	r4, [r7, #16]
 800880c:	3601      	adds	r6, #1
 800880e:	4630      	mov	r0, r6
 8008810:	b003      	add	sp, #12
 8008812:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008816:	6812      	ldr	r2, [r2, #0]
 8008818:	3b04      	subs	r3, #4
 800881a:	2a00      	cmp	r2, #0
 800881c:	d1cb      	bne.n	80087b6 <quorem+0x94>
 800881e:	3c01      	subs	r4, #1
 8008820:	e7c6      	b.n	80087b0 <quorem+0x8e>
 8008822:	6812      	ldr	r2, [r2, #0]
 8008824:	3b04      	subs	r3, #4
 8008826:	2a00      	cmp	r2, #0
 8008828:	d1ef      	bne.n	800880a <quorem+0xe8>
 800882a:	3c01      	subs	r4, #1
 800882c:	e7ea      	b.n	8008804 <quorem+0xe2>
 800882e:	2000      	movs	r0, #0
 8008830:	e7ee      	b.n	8008810 <quorem+0xee>
 8008832:	0000      	movs	r0, r0
 8008834:	0000      	movs	r0, r0
	...

08008838 <_dtoa_r>:
 8008838:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800883c:	69c7      	ldr	r7, [r0, #28]
 800883e:	b099      	sub	sp, #100	@ 0x64
 8008840:	ed8d 0b02 	vstr	d0, [sp, #8]
 8008844:	ec55 4b10 	vmov	r4, r5, d0
 8008848:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800884a:	9109      	str	r1, [sp, #36]	@ 0x24
 800884c:	4683      	mov	fp, r0
 800884e:	920e      	str	r2, [sp, #56]	@ 0x38
 8008850:	9313      	str	r3, [sp, #76]	@ 0x4c
 8008852:	b97f      	cbnz	r7, 8008874 <_dtoa_r+0x3c>
 8008854:	2010      	movs	r0, #16
 8008856:	f000 fdfd 	bl	8009454 <malloc>
 800885a:	4602      	mov	r2, r0
 800885c:	f8cb 001c 	str.w	r0, [fp, #28]
 8008860:	b920      	cbnz	r0, 800886c <_dtoa_r+0x34>
 8008862:	4ba7      	ldr	r3, [pc, #668]	@ (8008b00 <_dtoa_r+0x2c8>)
 8008864:	21ef      	movs	r1, #239	@ 0xef
 8008866:	48a7      	ldr	r0, [pc, #668]	@ (8008b04 <_dtoa_r+0x2cc>)
 8008868:	f001 fc68 	bl	800a13c <__assert_func>
 800886c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8008870:	6007      	str	r7, [r0, #0]
 8008872:	60c7      	str	r7, [r0, #12]
 8008874:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008878:	6819      	ldr	r1, [r3, #0]
 800887a:	b159      	cbz	r1, 8008894 <_dtoa_r+0x5c>
 800887c:	685a      	ldr	r2, [r3, #4]
 800887e:	604a      	str	r2, [r1, #4]
 8008880:	2301      	movs	r3, #1
 8008882:	4093      	lsls	r3, r2
 8008884:	608b      	str	r3, [r1, #8]
 8008886:	4658      	mov	r0, fp
 8008888:	f000 feda 	bl	8009640 <_Bfree>
 800888c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008890:	2200      	movs	r2, #0
 8008892:	601a      	str	r2, [r3, #0]
 8008894:	1e2b      	subs	r3, r5, #0
 8008896:	bfb9      	ittee	lt
 8008898:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800889c:	9303      	strlt	r3, [sp, #12]
 800889e:	2300      	movge	r3, #0
 80088a0:	6033      	strge	r3, [r6, #0]
 80088a2:	9f03      	ldr	r7, [sp, #12]
 80088a4:	4b98      	ldr	r3, [pc, #608]	@ (8008b08 <_dtoa_r+0x2d0>)
 80088a6:	bfbc      	itt	lt
 80088a8:	2201      	movlt	r2, #1
 80088aa:	6032      	strlt	r2, [r6, #0]
 80088ac:	43bb      	bics	r3, r7
 80088ae:	d112      	bne.n	80088d6 <_dtoa_r+0x9e>
 80088b0:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80088b2:	f242 730f 	movw	r3, #9999	@ 0x270f
 80088b6:	6013      	str	r3, [r2, #0]
 80088b8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80088bc:	4323      	orrs	r3, r4
 80088be:	f000 854d 	beq.w	800935c <_dtoa_r+0xb24>
 80088c2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80088c4:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8008b1c <_dtoa_r+0x2e4>
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	f000 854f 	beq.w	800936c <_dtoa_r+0xb34>
 80088ce:	f10a 0303 	add.w	r3, sl, #3
 80088d2:	f000 bd49 	b.w	8009368 <_dtoa_r+0xb30>
 80088d6:	ed9d 7b02 	vldr	d7, [sp, #8]
 80088da:	2200      	movs	r2, #0
 80088dc:	ec51 0b17 	vmov	r0, r1, d7
 80088e0:	2300      	movs	r3, #0
 80088e2:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 80088e6:	f7f8 f8ef 	bl	8000ac8 <__aeabi_dcmpeq>
 80088ea:	4680      	mov	r8, r0
 80088ec:	b158      	cbz	r0, 8008906 <_dtoa_r+0xce>
 80088ee:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80088f0:	2301      	movs	r3, #1
 80088f2:	6013      	str	r3, [r2, #0]
 80088f4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80088f6:	b113      	cbz	r3, 80088fe <_dtoa_r+0xc6>
 80088f8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80088fa:	4b84      	ldr	r3, [pc, #528]	@ (8008b0c <_dtoa_r+0x2d4>)
 80088fc:	6013      	str	r3, [r2, #0]
 80088fe:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8008b20 <_dtoa_r+0x2e8>
 8008902:	f000 bd33 	b.w	800936c <_dtoa_r+0xb34>
 8008906:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800890a:	aa16      	add	r2, sp, #88	@ 0x58
 800890c:	a917      	add	r1, sp, #92	@ 0x5c
 800890e:	4658      	mov	r0, fp
 8008910:	f001 f980 	bl	8009c14 <__d2b>
 8008914:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8008918:	4681      	mov	r9, r0
 800891a:	2e00      	cmp	r6, #0
 800891c:	d077      	beq.n	8008a0e <_dtoa_r+0x1d6>
 800891e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008920:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8008924:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008928:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800892c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8008930:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8008934:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8008938:	4619      	mov	r1, r3
 800893a:	2200      	movs	r2, #0
 800893c:	4b74      	ldr	r3, [pc, #464]	@ (8008b10 <_dtoa_r+0x2d8>)
 800893e:	f7f7 fca3 	bl	8000288 <__aeabi_dsub>
 8008942:	a369      	add	r3, pc, #420	@ (adr r3, 8008ae8 <_dtoa_r+0x2b0>)
 8008944:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008948:	f7f7 fe56 	bl	80005f8 <__aeabi_dmul>
 800894c:	a368      	add	r3, pc, #416	@ (adr r3, 8008af0 <_dtoa_r+0x2b8>)
 800894e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008952:	f7f7 fc9b 	bl	800028c <__adddf3>
 8008956:	4604      	mov	r4, r0
 8008958:	4630      	mov	r0, r6
 800895a:	460d      	mov	r5, r1
 800895c:	f7f7 fde2 	bl	8000524 <__aeabi_i2d>
 8008960:	a365      	add	r3, pc, #404	@ (adr r3, 8008af8 <_dtoa_r+0x2c0>)
 8008962:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008966:	f7f7 fe47 	bl	80005f8 <__aeabi_dmul>
 800896a:	4602      	mov	r2, r0
 800896c:	460b      	mov	r3, r1
 800896e:	4620      	mov	r0, r4
 8008970:	4629      	mov	r1, r5
 8008972:	f7f7 fc8b 	bl	800028c <__adddf3>
 8008976:	4604      	mov	r4, r0
 8008978:	460d      	mov	r5, r1
 800897a:	f7f8 f8ed 	bl	8000b58 <__aeabi_d2iz>
 800897e:	2200      	movs	r2, #0
 8008980:	4607      	mov	r7, r0
 8008982:	2300      	movs	r3, #0
 8008984:	4620      	mov	r0, r4
 8008986:	4629      	mov	r1, r5
 8008988:	f7f8 f8a8 	bl	8000adc <__aeabi_dcmplt>
 800898c:	b140      	cbz	r0, 80089a0 <_dtoa_r+0x168>
 800898e:	4638      	mov	r0, r7
 8008990:	f7f7 fdc8 	bl	8000524 <__aeabi_i2d>
 8008994:	4622      	mov	r2, r4
 8008996:	462b      	mov	r3, r5
 8008998:	f7f8 f896 	bl	8000ac8 <__aeabi_dcmpeq>
 800899c:	b900      	cbnz	r0, 80089a0 <_dtoa_r+0x168>
 800899e:	3f01      	subs	r7, #1
 80089a0:	2f16      	cmp	r7, #22
 80089a2:	d851      	bhi.n	8008a48 <_dtoa_r+0x210>
 80089a4:	4b5b      	ldr	r3, [pc, #364]	@ (8008b14 <_dtoa_r+0x2dc>)
 80089a6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80089aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089ae:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80089b2:	f7f8 f893 	bl	8000adc <__aeabi_dcmplt>
 80089b6:	2800      	cmp	r0, #0
 80089b8:	d048      	beq.n	8008a4c <_dtoa_r+0x214>
 80089ba:	3f01      	subs	r7, #1
 80089bc:	2300      	movs	r3, #0
 80089be:	9312      	str	r3, [sp, #72]	@ 0x48
 80089c0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80089c2:	1b9b      	subs	r3, r3, r6
 80089c4:	1e5a      	subs	r2, r3, #1
 80089c6:	bf44      	itt	mi
 80089c8:	f1c3 0801 	rsbmi	r8, r3, #1
 80089cc:	2300      	movmi	r3, #0
 80089ce:	9208      	str	r2, [sp, #32]
 80089d0:	bf54      	ite	pl
 80089d2:	f04f 0800 	movpl.w	r8, #0
 80089d6:	9308      	strmi	r3, [sp, #32]
 80089d8:	2f00      	cmp	r7, #0
 80089da:	db39      	blt.n	8008a50 <_dtoa_r+0x218>
 80089dc:	9b08      	ldr	r3, [sp, #32]
 80089de:	970f      	str	r7, [sp, #60]	@ 0x3c
 80089e0:	443b      	add	r3, r7
 80089e2:	9308      	str	r3, [sp, #32]
 80089e4:	2300      	movs	r3, #0
 80089e6:	930a      	str	r3, [sp, #40]	@ 0x28
 80089e8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80089ea:	2b09      	cmp	r3, #9
 80089ec:	d864      	bhi.n	8008ab8 <_dtoa_r+0x280>
 80089ee:	2b05      	cmp	r3, #5
 80089f0:	bfc4      	itt	gt
 80089f2:	3b04      	subgt	r3, #4
 80089f4:	9309      	strgt	r3, [sp, #36]	@ 0x24
 80089f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80089f8:	f1a3 0302 	sub.w	r3, r3, #2
 80089fc:	bfcc      	ite	gt
 80089fe:	2400      	movgt	r4, #0
 8008a00:	2401      	movle	r4, #1
 8008a02:	2b03      	cmp	r3, #3
 8008a04:	d863      	bhi.n	8008ace <_dtoa_r+0x296>
 8008a06:	e8df f003 	tbb	[pc, r3]
 8008a0a:	372a      	.short	0x372a
 8008a0c:	5535      	.short	0x5535
 8008a0e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8008a12:	441e      	add	r6, r3
 8008a14:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8008a18:	2b20      	cmp	r3, #32
 8008a1a:	bfc1      	itttt	gt
 8008a1c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8008a20:	409f      	lslgt	r7, r3
 8008a22:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8008a26:	fa24 f303 	lsrgt.w	r3, r4, r3
 8008a2a:	bfd6      	itet	le
 8008a2c:	f1c3 0320 	rsble	r3, r3, #32
 8008a30:	ea47 0003 	orrgt.w	r0, r7, r3
 8008a34:	fa04 f003 	lslle.w	r0, r4, r3
 8008a38:	f7f7 fd64 	bl	8000504 <__aeabi_ui2d>
 8008a3c:	2201      	movs	r2, #1
 8008a3e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8008a42:	3e01      	subs	r6, #1
 8008a44:	9214      	str	r2, [sp, #80]	@ 0x50
 8008a46:	e777      	b.n	8008938 <_dtoa_r+0x100>
 8008a48:	2301      	movs	r3, #1
 8008a4a:	e7b8      	b.n	80089be <_dtoa_r+0x186>
 8008a4c:	9012      	str	r0, [sp, #72]	@ 0x48
 8008a4e:	e7b7      	b.n	80089c0 <_dtoa_r+0x188>
 8008a50:	427b      	negs	r3, r7
 8008a52:	930a      	str	r3, [sp, #40]	@ 0x28
 8008a54:	2300      	movs	r3, #0
 8008a56:	eba8 0807 	sub.w	r8, r8, r7
 8008a5a:	930f      	str	r3, [sp, #60]	@ 0x3c
 8008a5c:	e7c4      	b.n	80089e8 <_dtoa_r+0x1b0>
 8008a5e:	2300      	movs	r3, #0
 8008a60:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008a62:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	dc35      	bgt.n	8008ad4 <_dtoa_r+0x29c>
 8008a68:	2301      	movs	r3, #1
 8008a6a:	9300      	str	r3, [sp, #0]
 8008a6c:	9307      	str	r3, [sp, #28]
 8008a6e:	461a      	mov	r2, r3
 8008a70:	920e      	str	r2, [sp, #56]	@ 0x38
 8008a72:	e00b      	b.n	8008a8c <_dtoa_r+0x254>
 8008a74:	2301      	movs	r3, #1
 8008a76:	e7f3      	b.n	8008a60 <_dtoa_r+0x228>
 8008a78:	2300      	movs	r3, #0
 8008a7a:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008a7c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008a7e:	18fb      	adds	r3, r7, r3
 8008a80:	9300      	str	r3, [sp, #0]
 8008a82:	3301      	adds	r3, #1
 8008a84:	2b01      	cmp	r3, #1
 8008a86:	9307      	str	r3, [sp, #28]
 8008a88:	bfb8      	it	lt
 8008a8a:	2301      	movlt	r3, #1
 8008a8c:	f8db 001c 	ldr.w	r0, [fp, #28]
 8008a90:	2100      	movs	r1, #0
 8008a92:	2204      	movs	r2, #4
 8008a94:	f102 0514 	add.w	r5, r2, #20
 8008a98:	429d      	cmp	r5, r3
 8008a9a:	d91f      	bls.n	8008adc <_dtoa_r+0x2a4>
 8008a9c:	6041      	str	r1, [r0, #4]
 8008a9e:	4658      	mov	r0, fp
 8008aa0:	f000 fd8e 	bl	80095c0 <_Balloc>
 8008aa4:	4682      	mov	sl, r0
 8008aa6:	2800      	cmp	r0, #0
 8008aa8:	d13c      	bne.n	8008b24 <_dtoa_r+0x2ec>
 8008aaa:	4b1b      	ldr	r3, [pc, #108]	@ (8008b18 <_dtoa_r+0x2e0>)
 8008aac:	4602      	mov	r2, r0
 8008aae:	f240 11af 	movw	r1, #431	@ 0x1af
 8008ab2:	e6d8      	b.n	8008866 <_dtoa_r+0x2e>
 8008ab4:	2301      	movs	r3, #1
 8008ab6:	e7e0      	b.n	8008a7a <_dtoa_r+0x242>
 8008ab8:	2401      	movs	r4, #1
 8008aba:	2300      	movs	r3, #0
 8008abc:	9309      	str	r3, [sp, #36]	@ 0x24
 8008abe:	940b      	str	r4, [sp, #44]	@ 0x2c
 8008ac0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008ac4:	9300      	str	r3, [sp, #0]
 8008ac6:	9307      	str	r3, [sp, #28]
 8008ac8:	2200      	movs	r2, #0
 8008aca:	2312      	movs	r3, #18
 8008acc:	e7d0      	b.n	8008a70 <_dtoa_r+0x238>
 8008ace:	2301      	movs	r3, #1
 8008ad0:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008ad2:	e7f5      	b.n	8008ac0 <_dtoa_r+0x288>
 8008ad4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008ad6:	9300      	str	r3, [sp, #0]
 8008ad8:	9307      	str	r3, [sp, #28]
 8008ada:	e7d7      	b.n	8008a8c <_dtoa_r+0x254>
 8008adc:	3101      	adds	r1, #1
 8008ade:	0052      	lsls	r2, r2, #1
 8008ae0:	e7d8      	b.n	8008a94 <_dtoa_r+0x25c>
 8008ae2:	bf00      	nop
 8008ae4:	f3af 8000 	nop.w
 8008ae8:	636f4361 	.word	0x636f4361
 8008aec:	3fd287a7 	.word	0x3fd287a7
 8008af0:	8b60c8b3 	.word	0x8b60c8b3
 8008af4:	3fc68a28 	.word	0x3fc68a28
 8008af8:	509f79fb 	.word	0x509f79fb
 8008afc:	3fd34413 	.word	0x3fd34413
 8008b00:	0800a909 	.word	0x0800a909
 8008b04:	0800a920 	.word	0x0800a920
 8008b08:	7ff00000 	.word	0x7ff00000
 8008b0c:	0800a8d9 	.word	0x0800a8d9
 8008b10:	3ff80000 	.word	0x3ff80000
 8008b14:	0800aa18 	.word	0x0800aa18
 8008b18:	0800a978 	.word	0x0800a978
 8008b1c:	0800a905 	.word	0x0800a905
 8008b20:	0800a8d8 	.word	0x0800a8d8
 8008b24:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008b28:	6018      	str	r0, [r3, #0]
 8008b2a:	9b07      	ldr	r3, [sp, #28]
 8008b2c:	2b0e      	cmp	r3, #14
 8008b2e:	f200 80a4 	bhi.w	8008c7a <_dtoa_r+0x442>
 8008b32:	2c00      	cmp	r4, #0
 8008b34:	f000 80a1 	beq.w	8008c7a <_dtoa_r+0x442>
 8008b38:	2f00      	cmp	r7, #0
 8008b3a:	dd33      	ble.n	8008ba4 <_dtoa_r+0x36c>
 8008b3c:	4bad      	ldr	r3, [pc, #692]	@ (8008df4 <_dtoa_r+0x5bc>)
 8008b3e:	f007 020f 	and.w	r2, r7, #15
 8008b42:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008b46:	ed93 7b00 	vldr	d7, [r3]
 8008b4a:	05f8      	lsls	r0, r7, #23
 8008b4c:	ed8d 7b04 	vstr	d7, [sp, #16]
 8008b50:	ea4f 1427 	mov.w	r4, r7, asr #4
 8008b54:	d516      	bpl.n	8008b84 <_dtoa_r+0x34c>
 8008b56:	4ba8      	ldr	r3, [pc, #672]	@ (8008df8 <_dtoa_r+0x5c0>)
 8008b58:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008b5c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008b60:	f7f7 fe74 	bl	800084c <__aeabi_ddiv>
 8008b64:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008b68:	f004 040f 	and.w	r4, r4, #15
 8008b6c:	2603      	movs	r6, #3
 8008b6e:	4da2      	ldr	r5, [pc, #648]	@ (8008df8 <_dtoa_r+0x5c0>)
 8008b70:	b954      	cbnz	r4, 8008b88 <_dtoa_r+0x350>
 8008b72:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008b76:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008b7a:	f7f7 fe67 	bl	800084c <__aeabi_ddiv>
 8008b7e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008b82:	e028      	b.n	8008bd6 <_dtoa_r+0x39e>
 8008b84:	2602      	movs	r6, #2
 8008b86:	e7f2      	b.n	8008b6e <_dtoa_r+0x336>
 8008b88:	07e1      	lsls	r1, r4, #31
 8008b8a:	d508      	bpl.n	8008b9e <_dtoa_r+0x366>
 8008b8c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008b90:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008b94:	f7f7 fd30 	bl	80005f8 <__aeabi_dmul>
 8008b98:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008b9c:	3601      	adds	r6, #1
 8008b9e:	1064      	asrs	r4, r4, #1
 8008ba0:	3508      	adds	r5, #8
 8008ba2:	e7e5      	b.n	8008b70 <_dtoa_r+0x338>
 8008ba4:	f000 80d2 	beq.w	8008d4c <_dtoa_r+0x514>
 8008ba8:	427c      	negs	r4, r7
 8008baa:	4b92      	ldr	r3, [pc, #584]	@ (8008df4 <_dtoa_r+0x5bc>)
 8008bac:	4d92      	ldr	r5, [pc, #584]	@ (8008df8 <_dtoa_r+0x5c0>)
 8008bae:	f004 020f 	and.w	r2, r4, #15
 8008bb2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008bb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bba:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008bbe:	f7f7 fd1b 	bl	80005f8 <__aeabi_dmul>
 8008bc2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008bc6:	1124      	asrs	r4, r4, #4
 8008bc8:	2300      	movs	r3, #0
 8008bca:	2602      	movs	r6, #2
 8008bcc:	2c00      	cmp	r4, #0
 8008bce:	f040 80b2 	bne.w	8008d36 <_dtoa_r+0x4fe>
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	d1d3      	bne.n	8008b7e <_dtoa_r+0x346>
 8008bd6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8008bd8:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	f000 80b7 	beq.w	8008d50 <_dtoa_r+0x518>
 8008be2:	4b86      	ldr	r3, [pc, #536]	@ (8008dfc <_dtoa_r+0x5c4>)
 8008be4:	2200      	movs	r2, #0
 8008be6:	4620      	mov	r0, r4
 8008be8:	4629      	mov	r1, r5
 8008bea:	f7f7 ff77 	bl	8000adc <__aeabi_dcmplt>
 8008bee:	2800      	cmp	r0, #0
 8008bf0:	f000 80ae 	beq.w	8008d50 <_dtoa_r+0x518>
 8008bf4:	9b07      	ldr	r3, [sp, #28]
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	f000 80aa 	beq.w	8008d50 <_dtoa_r+0x518>
 8008bfc:	9b00      	ldr	r3, [sp, #0]
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	dd37      	ble.n	8008c72 <_dtoa_r+0x43a>
 8008c02:	1e7b      	subs	r3, r7, #1
 8008c04:	9304      	str	r3, [sp, #16]
 8008c06:	4620      	mov	r0, r4
 8008c08:	4b7d      	ldr	r3, [pc, #500]	@ (8008e00 <_dtoa_r+0x5c8>)
 8008c0a:	2200      	movs	r2, #0
 8008c0c:	4629      	mov	r1, r5
 8008c0e:	f7f7 fcf3 	bl	80005f8 <__aeabi_dmul>
 8008c12:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008c16:	9c00      	ldr	r4, [sp, #0]
 8008c18:	3601      	adds	r6, #1
 8008c1a:	4630      	mov	r0, r6
 8008c1c:	f7f7 fc82 	bl	8000524 <__aeabi_i2d>
 8008c20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008c24:	f7f7 fce8 	bl	80005f8 <__aeabi_dmul>
 8008c28:	4b76      	ldr	r3, [pc, #472]	@ (8008e04 <_dtoa_r+0x5cc>)
 8008c2a:	2200      	movs	r2, #0
 8008c2c:	f7f7 fb2e 	bl	800028c <__adddf3>
 8008c30:	4605      	mov	r5, r0
 8008c32:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8008c36:	2c00      	cmp	r4, #0
 8008c38:	f040 808d 	bne.w	8008d56 <_dtoa_r+0x51e>
 8008c3c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008c40:	4b71      	ldr	r3, [pc, #452]	@ (8008e08 <_dtoa_r+0x5d0>)
 8008c42:	2200      	movs	r2, #0
 8008c44:	f7f7 fb20 	bl	8000288 <__aeabi_dsub>
 8008c48:	4602      	mov	r2, r0
 8008c4a:	460b      	mov	r3, r1
 8008c4c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008c50:	462a      	mov	r2, r5
 8008c52:	4633      	mov	r3, r6
 8008c54:	f7f7 ff60 	bl	8000b18 <__aeabi_dcmpgt>
 8008c58:	2800      	cmp	r0, #0
 8008c5a:	f040 828b 	bne.w	8009174 <_dtoa_r+0x93c>
 8008c5e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008c62:	462a      	mov	r2, r5
 8008c64:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8008c68:	f7f7 ff38 	bl	8000adc <__aeabi_dcmplt>
 8008c6c:	2800      	cmp	r0, #0
 8008c6e:	f040 8128 	bne.w	8008ec2 <_dtoa_r+0x68a>
 8008c72:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8008c76:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8008c7a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	f2c0 815a 	blt.w	8008f36 <_dtoa_r+0x6fe>
 8008c82:	2f0e      	cmp	r7, #14
 8008c84:	f300 8157 	bgt.w	8008f36 <_dtoa_r+0x6fe>
 8008c88:	4b5a      	ldr	r3, [pc, #360]	@ (8008df4 <_dtoa_r+0x5bc>)
 8008c8a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008c8e:	ed93 7b00 	vldr	d7, [r3]
 8008c92:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	ed8d 7b00 	vstr	d7, [sp]
 8008c9a:	da03      	bge.n	8008ca4 <_dtoa_r+0x46c>
 8008c9c:	9b07      	ldr	r3, [sp, #28]
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	f340 8101 	ble.w	8008ea6 <_dtoa_r+0x66e>
 8008ca4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8008ca8:	4656      	mov	r6, sl
 8008caa:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008cae:	4620      	mov	r0, r4
 8008cb0:	4629      	mov	r1, r5
 8008cb2:	f7f7 fdcb 	bl	800084c <__aeabi_ddiv>
 8008cb6:	f7f7 ff4f 	bl	8000b58 <__aeabi_d2iz>
 8008cba:	4680      	mov	r8, r0
 8008cbc:	f7f7 fc32 	bl	8000524 <__aeabi_i2d>
 8008cc0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008cc4:	f7f7 fc98 	bl	80005f8 <__aeabi_dmul>
 8008cc8:	4602      	mov	r2, r0
 8008cca:	460b      	mov	r3, r1
 8008ccc:	4620      	mov	r0, r4
 8008cce:	4629      	mov	r1, r5
 8008cd0:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8008cd4:	f7f7 fad8 	bl	8000288 <__aeabi_dsub>
 8008cd8:	f806 4b01 	strb.w	r4, [r6], #1
 8008cdc:	9d07      	ldr	r5, [sp, #28]
 8008cde:	eba6 040a 	sub.w	r4, r6, sl
 8008ce2:	42a5      	cmp	r5, r4
 8008ce4:	4602      	mov	r2, r0
 8008ce6:	460b      	mov	r3, r1
 8008ce8:	f040 8117 	bne.w	8008f1a <_dtoa_r+0x6e2>
 8008cec:	f7f7 face 	bl	800028c <__adddf3>
 8008cf0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008cf4:	4604      	mov	r4, r0
 8008cf6:	460d      	mov	r5, r1
 8008cf8:	f7f7 ff0e 	bl	8000b18 <__aeabi_dcmpgt>
 8008cfc:	2800      	cmp	r0, #0
 8008cfe:	f040 80f9 	bne.w	8008ef4 <_dtoa_r+0x6bc>
 8008d02:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008d06:	4620      	mov	r0, r4
 8008d08:	4629      	mov	r1, r5
 8008d0a:	f7f7 fedd 	bl	8000ac8 <__aeabi_dcmpeq>
 8008d0e:	b118      	cbz	r0, 8008d18 <_dtoa_r+0x4e0>
 8008d10:	f018 0f01 	tst.w	r8, #1
 8008d14:	f040 80ee 	bne.w	8008ef4 <_dtoa_r+0x6bc>
 8008d18:	4649      	mov	r1, r9
 8008d1a:	4658      	mov	r0, fp
 8008d1c:	f000 fc90 	bl	8009640 <_Bfree>
 8008d20:	2300      	movs	r3, #0
 8008d22:	7033      	strb	r3, [r6, #0]
 8008d24:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8008d26:	3701      	adds	r7, #1
 8008d28:	601f      	str	r7, [r3, #0]
 8008d2a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	f000 831d 	beq.w	800936c <_dtoa_r+0xb34>
 8008d32:	601e      	str	r6, [r3, #0]
 8008d34:	e31a      	b.n	800936c <_dtoa_r+0xb34>
 8008d36:	07e2      	lsls	r2, r4, #31
 8008d38:	d505      	bpl.n	8008d46 <_dtoa_r+0x50e>
 8008d3a:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008d3e:	f7f7 fc5b 	bl	80005f8 <__aeabi_dmul>
 8008d42:	3601      	adds	r6, #1
 8008d44:	2301      	movs	r3, #1
 8008d46:	1064      	asrs	r4, r4, #1
 8008d48:	3508      	adds	r5, #8
 8008d4a:	e73f      	b.n	8008bcc <_dtoa_r+0x394>
 8008d4c:	2602      	movs	r6, #2
 8008d4e:	e742      	b.n	8008bd6 <_dtoa_r+0x39e>
 8008d50:	9c07      	ldr	r4, [sp, #28]
 8008d52:	9704      	str	r7, [sp, #16]
 8008d54:	e761      	b.n	8008c1a <_dtoa_r+0x3e2>
 8008d56:	4b27      	ldr	r3, [pc, #156]	@ (8008df4 <_dtoa_r+0x5bc>)
 8008d58:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008d5a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008d5e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008d62:	4454      	add	r4, sl
 8008d64:	2900      	cmp	r1, #0
 8008d66:	d053      	beq.n	8008e10 <_dtoa_r+0x5d8>
 8008d68:	4928      	ldr	r1, [pc, #160]	@ (8008e0c <_dtoa_r+0x5d4>)
 8008d6a:	2000      	movs	r0, #0
 8008d6c:	f7f7 fd6e 	bl	800084c <__aeabi_ddiv>
 8008d70:	4633      	mov	r3, r6
 8008d72:	462a      	mov	r2, r5
 8008d74:	f7f7 fa88 	bl	8000288 <__aeabi_dsub>
 8008d78:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008d7c:	4656      	mov	r6, sl
 8008d7e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008d82:	f7f7 fee9 	bl	8000b58 <__aeabi_d2iz>
 8008d86:	4605      	mov	r5, r0
 8008d88:	f7f7 fbcc 	bl	8000524 <__aeabi_i2d>
 8008d8c:	4602      	mov	r2, r0
 8008d8e:	460b      	mov	r3, r1
 8008d90:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008d94:	f7f7 fa78 	bl	8000288 <__aeabi_dsub>
 8008d98:	3530      	adds	r5, #48	@ 0x30
 8008d9a:	4602      	mov	r2, r0
 8008d9c:	460b      	mov	r3, r1
 8008d9e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008da2:	f806 5b01 	strb.w	r5, [r6], #1
 8008da6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008daa:	f7f7 fe97 	bl	8000adc <__aeabi_dcmplt>
 8008dae:	2800      	cmp	r0, #0
 8008db0:	d171      	bne.n	8008e96 <_dtoa_r+0x65e>
 8008db2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008db6:	4911      	ldr	r1, [pc, #68]	@ (8008dfc <_dtoa_r+0x5c4>)
 8008db8:	2000      	movs	r0, #0
 8008dba:	f7f7 fa65 	bl	8000288 <__aeabi_dsub>
 8008dbe:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008dc2:	f7f7 fe8b 	bl	8000adc <__aeabi_dcmplt>
 8008dc6:	2800      	cmp	r0, #0
 8008dc8:	f040 8095 	bne.w	8008ef6 <_dtoa_r+0x6be>
 8008dcc:	42a6      	cmp	r6, r4
 8008dce:	f43f af50 	beq.w	8008c72 <_dtoa_r+0x43a>
 8008dd2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8008dd6:	4b0a      	ldr	r3, [pc, #40]	@ (8008e00 <_dtoa_r+0x5c8>)
 8008dd8:	2200      	movs	r2, #0
 8008dda:	f7f7 fc0d 	bl	80005f8 <__aeabi_dmul>
 8008dde:	4b08      	ldr	r3, [pc, #32]	@ (8008e00 <_dtoa_r+0x5c8>)
 8008de0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008de4:	2200      	movs	r2, #0
 8008de6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008dea:	f7f7 fc05 	bl	80005f8 <__aeabi_dmul>
 8008dee:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008df2:	e7c4      	b.n	8008d7e <_dtoa_r+0x546>
 8008df4:	0800aa18 	.word	0x0800aa18
 8008df8:	0800a9f0 	.word	0x0800a9f0
 8008dfc:	3ff00000 	.word	0x3ff00000
 8008e00:	40240000 	.word	0x40240000
 8008e04:	401c0000 	.word	0x401c0000
 8008e08:	40140000 	.word	0x40140000
 8008e0c:	3fe00000 	.word	0x3fe00000
 8008e10:	4631      	mov	r1, r6
 8008e12:	4628      	mov	r0, r5
 8008e14:	f7f7 fbf0 	bl	80005f8 <__aeabi_dmul>
 8008e18:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008e1c:	9415      	str	r4, [sp, #84]	@ 0x54
 8008e1e:	4656      	mov	r6, sl
 8008e20:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008e24:	f7f7 fe98 	bl	8000b58 <__aeabi_d2iz>
 8008e28:	4605      	mov	r5, r0
 8008e2a:	f7f7 fb7b 	bl	8000524 <__aeabi_i2d>
 8008e2e:	4602      	mov	r2, r0
 8008e30:	460b      	mov	r3, r1
 8008e32:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008e36:	f7f7 fa27 	bl	8000288 <__aeabi_dsub>
 8008e3a:	3530      	adds	r5, #48	@ 0x30
 8008e3c:	f806 5b01 	strb.w	r5, [r6], #1
 8008e40:	4602      	mov	r2, r0
 8008e42:	460b      	mov	r3, r1
 8008e44:	42a6      	cmp	r6, r4
 8008e46:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008e4a:	f04f 0200 	mov.w	r2, #0
 8008e4e:	d124      	bne.n	8008e9a <_dtoa_r+0x662>
 8008e50:	4bac      	ldr	r3, [pc, #688]	@ (8009104 <_dtoa_r+0x8cc>)
 8008e52:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8008e56:	f7f7 fa19 	bl	800028c <__adddf3>
 8008e5a:	4602      	mov	r2, r0
 8008e5c:	460b      	mov	r3, r1
 8008e5e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008e62:	f7f7 fe59 	bl	8000b18 <__aeabi_dcmpgt>
 8008e66:	2800      	cmp	r0, #0
 8008e68:	d145      	bne.n	8008ef6 <_dtoa_r+0x6be>
 8008e6a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008e6e:	49a5      	ldr	r1, [pc, #660]	@ (8009104 <_dtoa_r+0x8cc>)
 8008e70:	2000      	movs	r0, #0
 8008e72:	f7f7 fa09 	bl	8000288 <__aeabi_dsub>
 8008e76:	4602      	mov	r2, r0
 8008e78:	460b      	mov	r3, r1
 8008e7a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008e7e:	f7f7 fe2d 	bl	8000adc <__aeabi_dcmplt>
 8008e82:	2800      	cmp	r0, #0
 8008e84:	f43f aef5 	beq.w	8008c72 <_dtoa_r+0x43a>
 8008e88:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8008e8a:	1e73      	subs	r3, r6, #1
 8008e8c:	9315      	str	r3, [sp, #84]	@ 0x54
 8008e8e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8008e92:	2b30      	cmp	r3, #48	@ 0x30
 8008e94:	d0f8      	beq.n	8008e88 <_dtoa_r+0x650>
 8008e96:	9f04      	ldr	r7, [sp, #16]
 8008e98:	e73e      	b.n	8008d18 <_dtoa_r+0x4e0>
 8008e9a:	4b9b      	ldr	r3, [pc, #620]	@ (8009108 <_dtoa_r+0x8d0>)
 8008e9c:	f7f7 fbac 	bl	80005f8 <__aeabi_dmul>
 8008ea0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008ea4:	e7bc      	b.n	8008e20 <_dtoa_r+0x5e8>
 8008ea6:	d10c      	bne.n	8008ec2 <_dtoa_r+0x68a>
 8008ea8:	4b98      	ldr	r3, [pc, #608]	@ (800910c <_dtoa_r+0x8d4>)
 8008eaa:	2200      	movs	r2, #0
 8008eac:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008eb0:	f7f7 fba2 	bl	80005f8 <__aeabi_dmul>
 8008eb4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008eb8:	f7f7 fe24 	bl	8000b04 <__aeabi_dcmpge>
 8008ebc:	2800      	cmp	r0, #0
 8008ebe:	f000 8157 	beq.w	8009170 <_dtoa_r+0x938>
 8008ec2:	2400      	movs	r4, #0
 8008ec4:	4625      	mov	r5, r4
 8008ec6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008ec8:	43db      	mvns	r3, r3
 8008eca:	9304      	str	r3, [sp, #16]
 8008ecc:	4656      	mov	r6, sl
 8008ece:	2700      	movs	r7, #0
 8008ed0:	4621      	mov	r1, r4
 8008ed2:	4658      	mov	r0, fp
 8008ed4:	f000 fbb4 	bl	8009640 <_Bfree>
 8008ed8:	2d00      	cmp	r5, #0
 8008eda:	d0dc      	beq.n	8008e96 <_dtoa_r+0x65e>
 8008edc:	b12f      	cbz	r7, 8008eea <_dtoa_r+0x6b2>
 8008ede:	42af      	cmp	r7, r5
 8008ee0:	d003      	beq.n	8008eea <_dtoa_r+0x6b2>
 8008ee2:	4639      	mov	r1, r7
 8008ee4:	4658      	mov	r0, fp
 8008ee6:	f000 fbab 	bl	8009640 <_Bfree>
 8008eea:	4629      	mov	r1, r5
 8008eec:	4658      	mov	r0, fp
 8008eee:	f000 fba7 	bl	8009640 <_Bfree>
 8008ef2:	e7d0      	b.n	8008e96 <_dtoa_r+0x65e>
 8008ef4:	9704      	str	r7, [sp, #16]
 8008ef6:	4633      	mov	r3, r6
 8008ef8:	461e      	mov	r6, r3
 8008efa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008efe:	2a39      	cmp	r2, #57	@ 0x39
 8008f00:	d107      	bne.n	8008f12 <_dtoa_r+0x6da>
 8008f02:	459a      	cmp	sl, r3
 8008f04:	d1f8      	bne.n	8008ef8 <_dtoa_r+0x6c0>
 8008f06:	9a04      	ldr	r2, [sp, #16]
 8008f08:	3201      	adds	r2, #1
 8008f0a:	9204      	str	r2, [sp, #16]
 8008f0c:	2230      	movs	r2, #48	@ 0x30
 8008f0e:	f88a 2000 	strb.w	r2, [sl]
 8008f12:	781a      	ldrb	r2, [r3, #0]
 8008f14:	3201      	adds	r2, #1
 8008f16:	701a      	strb	r2, [r3, #0]
 8008f18:	e7bd      	b.n	8008e96 <_dtoa_r+0x65e>
 8008f1a:	4b7b      	ldr	r3, [pc, #492]	@ (8009108 <_dtoa_r+0x8d0>)
 8008f1c:	2200      	movs	r2, #0
 8008f1e:	f7f7 fb6b 	bl	80005f8 <__aeabi_dmul>
 8008f22:	2200      	movs	r2, #0
 8008f24:	2300      	movs	r3, #0
 8008f26:	4604      	mov	r4, r0
 8008f28:	460d      	mov	r5, r1
 8008f2a:	f7f7 fdcd 	bl	8000ac8 <__aeabi_dcmpeq>
 8008f2e:	2800      	cmp	r0, #0
 8008f30:	f43f aebb 	beq.w	8008caa <_dtoa_r+0x472>
 8008f34:	e6f0      	b.n	8008d18 <_dtoa_r+0x4e0>
 8008f36:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8008f38:	2a00      	cmp	r2, #0
 8008f3a:	f000 80db 	beq.w	80090f4 <_dtoa_r+0x8bc>
 8008f3e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008f40:	2a01      	cmp	r2, #1
 8008f42:	f300 80bf 	bgt.w	80090c4 <_dtoa_r+0x88c>
 8008f46:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8008f48:	2a00      	cmp	r2, #0
 8008f4a:	f000 80b7 	beq.w	80090bc <_dtoa_r+0x884>
 8008f4e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8008f52:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8008f54:	4646      	mov	r6, r8
 8008f56:	9a08      	ldr	r2, [sp, #32]
 8008f58:	2101      	movs	r1, #1
 8008f5a:	441a      	add	r2, r3
 8008f5c:	4658      	mov	r0, fp
 8008f5e:	4498      	add	r8, r3
 8008f60:	9208      	str	r2, [sp, #32]
 8008f62:	f000 fc21 	bl	80097a8 <__i2b>
 8008f66:	4605      	mov	r5, r0
 8008f68:	b15e      	cbz	r6, 8008f82 <_dtoa_r+0x74a>
 8008f6a:	9b08      	ldr	r3, [sp, #32]
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	dd08      	ble.n	8008f82 <_dtoa_r+0x74a>
 8008f70:	42b3      	cmp	r3, r6
 8008f72:	9a08      	ldr	r2, [sp, #32]
 8008f74:	bfa8      	it	ge
 8008f76:	4633      	movge	r3, r6
 8008f78:	eba8 0803 	sub.w	r8, r8, r3
 8008f7c:	1af6      	subs	r6, r6, r3
 8008f7e:	1ad3      	subs	r3, r2, r3
 8008f80:	9308      	str	r3, [sp, #32]
 8008f82:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008f84:	b1f3      	cbz	r3, 8008fc4 <_dtoa_r+0x78c>
 8008f86:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008f88:	2b00      	cmp	r3, #0
 8008f8a:	f000 80b7 	beq.w	80090fc <_dtoa_r+0x8c4>
 8008f8e:	b18c      	cbz	r4, 8008fb4 <_dtoa_r+0x77c>
 8008f90:	4629      	mov	r1, r5
 8008f92:	4622      	mov	r2, r4
 8008f94:	4658      	mov	r0, fp
 8008f96:	f000 fcc7 	bl	8009928 <__pow5mult>
 8008f9a:	464a      	mov	r2, r9
 8008f9c:	4601      	mov	r1, r0
 8008f9e:	4605      	mov	r5, r0
 8008fa0:	4658      	mov	r0, fp
 8008fa2:	f000 fc17 	bl	80097d4 <__multiply>
 8008fa6:	4649      	mov	r1, r9
 8008fa8:	9004      	str	r0, [sp, #16]
 8008faa:	4658      	mov	r0, fp
 8008fac:	f000 fb48 	bl	8009640 <_Bfree>
 8008fb0:	9b04      	ldr	r3, [sp, #16]
 8008fb2:	4699      	mov	r9, r3
 8008fb4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008fb6:	1b1a      	subs	r2, r3, r4
 8008fb8:	d004      	beq.n	8008fc4 <_dtoa_r+0x78c>
 8008fba:	4649      	mov	r1, r9
 8008fbc:	4658      	mov	r0, fp
 8008fbe:	f000 fcb3 	bl	8009928 <__pow5mult>
 8008fc2:	4681      	mov	r9, r0
 8008fc4:	2101      	movs	r1, #1
 8008fc6:	4658      	mov	r0, fp
 8008fc8:	f000 fbee 	bl	80097a8 <__i2b>
 8008fcc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008fce:	4604      	mov	r4, r0
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	f000 81cf 	beq.w	8009374 <_dtoa_r+0xb3c>
 8008fd6:	461a      	mov	r2, r3
 8008fd8:	4601      	mov	r1, r0
 8008fda:	4658      	mov	r0, fp
 8008fdc:	f000 fca4 	bl	8009928 <__pow5mult>
 8008fe0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008fe2:	2b01      	cmp	r3, #1
 8008fe4:	4604      	mov	r4, r0
 8008fe6:	f300 8095 	bgt.w	8009114 <_dtoa_r+0x8dc>
 8008fea:	9b02      	ldr	r3, [sp, #8]
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	f040 8087 	bne.w	8009100 <_dtoa_r+0x8c8>
 8008ff2:	9b03      	ldr	r3, [sp, #12]
 8008ff4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	f040 8089 	bne.w	8009110 <_dtoa_r+0x8d8>
 8008ffe:	9b03      	ldr	r3, [sp, #12]
 8009000:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8009004:	0d1b      	lsrs	r3, r3, #20
 8009006:	051b      	lsls	r3, r3, #20
 8009008:	b12b      	cbz	r3, 8009016 <_dtoa_r+0x7de>
 800900a:	9b08      	ldr	r3, [sp, #32]
 800900c:	3301      	adds	r3, #1
 800900e:	9308      	str	r3, [sp, #32]
 8009010:	f108 0801 	add.w	r8, r8, #1
 8009014:	2301      	movs	r3, #1
 8009016:	930a      	str	r3, [sp, #40]	@ 0x28
 8009018:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800901a:	2b00      	cmp	r3, #0
 800901c:	f000 81b0 	beq.w	8009380 <_dtoa_r+0xb48>
 8009020:	6923      	ldr	r3, [r4, #16]
 8009022:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009026:	6918      	ldr	r0, [r3, #16]
 8009028:	f000 fb72 	bl	8009710 <__hi0bits>
 800902c:	f1c0 0020 	rsb	r0, r0, #32
 8009030:	9b08      	ldr	r3, [sp, #32]
 8009032:	4418      	add	r0, r3
 8009034:	f010 001f 	ands.w	r0, r0, #31
 8009038:	d077      	beq.n	800912a <_dtoa_r+0x8f2>
 800903a:	f1c0 0320 	rsb	r3, r0, #32
 800903e:	2b04      	cmp	r3, #4
 8009040:	dd6b      	ble.n	800911a <_dtoa_r+0x8e2>
 8009042:	9b08      	ldr	r3, [sp, #32]
 8009044:	f1c0 001c 	rsb	r0, r0, #28
 8009048:	4403      	add	r3, r0
 800904a:	4480      	add	r8, r0
 800904c:	4406      	add	r6, r0
 800904e:	9308      	str	r3, [sp, #32]
 8009050:	f1b8 0f00 	cmp.w	r8, #0
 8009054:	dd05      	ble.n	8009062 <_dtoa_r+0x82a>
 8009056:	4649      	mov	r1, r9
 8009058:	4642      	mov	r2, r8
 800905a:	4658      	mov	r0, fp
 800905c:	f000 fcbe 	bl	80099dc <__lshift>
 8009060:	4681      	mov	r9, r0
 8009062:	9b08      	ldr	r3, [sp, #32]
 8009064:	2b00      	cmp	r3, #0
 8009066:	dd05      	ble.n	8009074 <_dtoa_r+0x83c>
 8009068:	4621      	mov	r1, r4
 800906a:	461a      	mov	r2, r3
 800906c:	4658      	mov	r0, fp
 800906e:	f000 fcb5 	bl	80099dc <__lshift>
 8009072:	4604      	mov	r4, r0
 8009074:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8009076:	2b00      	cmp	r3, #0
 8009078:	d059      	beq.n	800912e <_dtoa_r+0x8f6>
 800907a:	4621      	mov	r1, r4
 800907c:	4648      	mov	r0, r9
 800907e:	f000 fd19 	bl	8009ab4 <__mcmp>
 8009082:	2800      	cmp	r0, #0
 8009084:	da53      	bge.n	800912e <_dtoa_r+0x8f6>
 8009086:	1e7b      	subs	r3, r7, #1
 8009088:	9304      	str	r3, [sp, #16]
 800908a:	4649      	mov	r1, r9
 800908c:	2300      	movs	r3, #0
 800908e:	220a      	movs	r2, #10
 8009090:	4658      	mov	r0, fp
 8009092:	f000 faf7 	bl	8009684 <__multadd>
 8009096:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009098:	4681      	mov	r9, r0
 800909a:	2b00      	cmp	r3, #0
 800909c:	f000 8172 	beq.w	8009384 <_dtoa_r+0xb4c>
 80090a0:	2300      	movs	r3, #0
 80090a2:	4629      	mov	r1, r5
 80090a4:	220a      	movs	r2, #10
 80090a6:	4658      	mov	r0, fp
 80090a8:	f000 faec 	bl	8009684 <__multadd>
 80090ac:	9b00      	ldr	r3, [sp, #0]
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	4605      	mov	r5, r0
 80090b2:	dc67      	bgt.n	8009184 <_dtoa_r+0x94c>
 80090b4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80090b6:	2b02      	cmp	r3, #2
 80090b8:	dc41      	bgt.n	800913e <_dtoa_r+0x906>
 80090ba:	e063      	b.n	8009184 <_dtoa_r+0x94c>
 80090bc:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80090be:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80090c2:	e746      	b.n	8008f52 <_dtoa_r+0x71a>
 80090c4:	9b07      	ldr	r3, [sp, #28]
 80090c6:	1e5c      	subs	r4, r3, #1
 80090c8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80090ca:	42a3      	cmp	r3, r4
 80090cc:	bfbf      	itttt	lt
 80090ce:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 80090d0:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 80090d2:	940a      	strlt	r4, [sp, #40]	@ 0x28
 80090d4:	1ae3      	sublt	r3, r4, r3
 80090d6:	bfb4      	ite	lt
 80090d8:	18d2      	addlt	r2, r2, r3
 80090da:	1b1c      	subge	r4, r3, r4
 80090dc:	9b07      	ldr	r3, [sp, #28]
 80090de:	bfbc      	itt	lt
 80090e0:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 80090e2:	2400      	movlt	r4, #0
 80090e4:	2b00      	cmp	r3, #0
 80090e6:	bfb5      	itete	lt
 80090e8:	eba8 0603 	sublt.w	r6, r8, r3
 80090ec:	9b07      	ldrge	r3, [sp, #28]
 80090ee:	2300      	movlt	r3, #0
 80090f0:	4646      	movge	r6, r8
 80090f2:	e730      	b.n	8008f56 <_dtoa_r+0x71e>
 80090f4:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80090f6:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80090f8:	4646      	mov	r6, r8
 80090fa:	e735      	b.n	8008f68 <_dtoa_r+0x730>
 80090fc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80090fe:	e75c      	b.n	8008fba <_dtoa_r+0x782>
 8009100:	2300      	movs	r3, #0
 8009102:	e788      	b.n	8009016 <_dtoa_r+0x7de>
 8009104:	3fe00000 	.word	0x3fe00000
 8009108:	40240000 	.word	0x40240000
 800910c:	40140000 	.word	0x40140000
 8009110:	9b02      	ldr	r3, [sp, #8]
 8009112:	e780      	b.n	8009016 <_dtoa_r+0x7de>
 8009114:	2300      	movs	r3, #0
 8009116:	930a      	str	r3, [sp, #40]	@ 0x28
 8009118:	e782      	b.n	8009020 <_dtoa_r+0x7e8>
 800911a:	d099      	beq.n	8009050 <_dtoa_r+0x818>
 800911c:	9a08      	ldr	r2, [sp, #32]
 800911e:	331c      	adds	r3, #28
 8009120:	441a      	add	r2, r3
 8009122:	4498      	add	r8, r3
 8009124:	441e      	add	r6, r3
 8009126:	9208      	str	r2, [sp, #32]
 8009128:	e792      	b.n	8009050 <_dtoa_r+0x818>
 800912a:	4603      	mov	r3, r0
 800912c:	e7f6      	b.n	800911c <_dtoa_r+0x8e4>
 800912e:	9b07      	ldr	r3, [sp, #28]
 8009130:	9704      	str	r7, [sp, #16]
 8009132:	2b00      	cmp	r3, #0
 8009134:	dc20      	bgt.n	8009178 <_dtoa_r+0x940>
 8009136:	9300      	str	r3, [sp, #0]
 8009138:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800913a:	2b02      	cmp	r3, #2
 800913c:	dd1e      	ble.n	800917c <_dtoa_r+0x944>
 800913e:	9b00      	ldr	r3, [sp, #0]
 8009140:	2b00      	cmp	r3, #0
 8009142:	f47f aec0 	bne.w	8008ec6 <_dtoa_r+0x68e>
 8009146:	4621      	mov	r1, r4
 8009148:	2205      	movs	r2, #5
 800914a:	4658      	mov	r0, fp
 800914c:	f000 fa9a 	bl	8009684 <__multadd>
 8009150:	4601      	mov	r1, r0
 8009152:	4604      	mov	r4, r0
 8009154:	4648      	mov	r0, r9
 8009156:	f000 fcad 	bl	8009ab4 <__mcmp>
 800915a:	2800      	cmp	r0, #0
 800915c:	f77f aeb3 	ble.w	8008ec6 <_dtoa_r+0x68e>
 8009160:	4656      	mov	r6, sl
 8009162:	2331      	movs	r3, #49	@ 0x31
 8009164:	f806 3b01 	strb.w	r3, [r6], #1
 8009168:	9b04      	ldr	r3, [sp, #16]
 800916a:	3301      	adds	r3, #1
 800916c:	9304      	str	r3, [sp, #16]
 800916e:	e6ae      	b.n	8008ece <_dtoa_r+0x696>
 8009170:	9c07      	ldr	r4, [sp, #28]
 8009172:	9704      	str	r7, [sp, #16]
 8009174:	4625      	mov	r5, r4
 8009176:	e7f3      	b.n	8009160 <_dtoa_r+0x928>
 8009178:	9b07      	ldr	r3, [sp, #28]
 800917a:	9300      	str	r3, [sp, #0]
 800917c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800917e:	2b00      	cmp	r3, #0
 8009180:	f000 8104 	beq.w	800938c <_dtoa_r+0xb54>
 8009184:	2e00      	cmp	r6, #0
 8009186:	dd05      	ble.n	8009194 <_dtoa_r+0x95c>
 8009188:	4629      	mov	r1, r5
 800918a:	4632      	mov	r2, r6
 800918c:	4658      	mov	r0, fp
 800918e:	f000 fc25 	bl	80099dc <__lshift>
 8009192:	4605      	mov	r5, r0
 8009194:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009196:	2b00      	cmp	r3, #0
 8009198:	d05a      	beq.n	8009250 <_dtoa_r+0xa18>
 800919a:	6869      	ldr	r1, [r5, #4]
 800919c:	4658      	mov	r0, fp
 800919e:	f000 fa0f 	bl	80095c0 <_Balloc>
 80091a2:	4606      	mov	r6, r0
 80091a4:	b928      	cbnz	r0, 80091b2 <_dtoa_r+0x97a>
 80091a6:	4b84      	ldr	r3, [pc, #528]	@ (80093b8 <_dtoa_r+0xb80>)
 80091a8:	4602      	mov	r2, r0
 80091aa:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80091ae:	f7ff bb5a 	b.w	8008866 <_dtoa_r+0x2e>
 80091b2:	692a      	ldr	r2, [r5, #16]
 80091b4:	3202      	adds	r2, #2
 80091b6:	0092      	lsls	r2, r2, #2
 80091b8:	f105 010c 	add.w	r1, r5, #12
 80091bc:	300c      	adds	r0, #12
 80091be:	f000 ffaf 	bl	800a120 <memcpy>
 80091c2:	2201      	movs	r2, #1
 80091c4:	4631      	mov	r1, r6
 80091c6:	4658      	mov	r0, fp
 80091c8:	f000 fc08 	bl	80099dc <__lshift>
 80091cc:	f10a 0301 	add.w	r3, sl, #1
 80091d0:	9307      	str	r3, [sp, #28]
 80091d2:	9b00      	ldr	r3, [sp, #0]
 80091d4:	4453      	add	r3, sl
 80091d6:	930b      	str	r3, [sp, #44]	@ 0x2c
 80091d8:	9b02      	ldr	r3, [sp, #8]
 80091da:	f003 0301 	and.w	r3, r3, #1
 80091de:	462f      	mov	r7, r5
 80091e0:	930a      	str	r3, [sp, #40]	@ 0x28
 80091e2:	4605      	mov	r5, r0
 80091e4:	9b07      	ldr	r3, [sp, #28]
 80091e6:	4621      	mov	r1, r4
 80091e8:	3b01      	subs	r3, #1
 80091ea:	4648      	mov	r0, r9
 80091ec:	9300      	str	r3, [sp, #0]
 80091ee:	f7ff fa98 	bl	8008722 <quorem>
 80091f2:	4639      	mov	r1, r7
 80091f4:	9002      	str	r0, [sp, #8]
 80091f6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80091fa:	4648      	mov	r0, r9
 80091fc:	f000 fc5a 	bl	8009ab4 <__mcmp>
 8009200:	462a      	mov	r2, r5
 8009202:	9008      	str	r0, [sp, #32]
 8009204:	4621      	mov	r1, r4
 8009206:	4658      	mov	r0, fp
 8009208:	f000 fc70 	bl	8009aec <__mdiff>
 800920c:	68c2      	ldr	r2, [r0, #12]
 800920e:	4606      	mov	r6, r0
 8009210:	bb02      	cbnz	r2, 8009254 <_dtoa_r+0xa1c>
 8009212:	4601      	mov	r1, r0
 8009214:	4648      	mov	r0, r9
 8009216:	f000 fc4d 	bl	8009ab4 <__mcmp>
 800921a:	4602      	mov	r2, r0
 800921c:	4631      	mov	r1, r6
 800921e:	4658      	mov	r0, fp
 8009220:	920e      	str	r2, [sp, #56]	@ 0x38
 8009222:	f000 fa0d 	bl	8009640 <_Bfree>
 8009226:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009228:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800922a:	9e07      	ldr	r6, [sp, #28]
 800922c:	ea43 0102 	orr.w	r1, r3, r2
 8009230:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009232:	4319      	orrs	r1, r3
 8009234:	d110      	bne.n	8009258 <_dtoa_r+0xa20>
 8009236:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800923a:	d029      	beq.n	8009290 <_dtoa_r+0xa58>
 800923c:	9b08      	ldr	r3, [sp, #32]
 800923e:	2b00      	cmp	r3, #0
 8009240:	dd02      	ble.n	8009248 <_dtoa_r+0xa10>
 8009242:	9b02      	ldr	r3, [sp, #8]
 8009244:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8009248:	9b00      	ldr	r3, [sp, #0]
 800924a:	f883 8000 	strb.w	r8, [r3]
 800924e:	e63f      	b.n	8008ed0 <_dtoa_r+0x698>
 8009250:	4628      	mov	r0, r5
 8009252:	e7bb      	b.n	80091cc <_dtoa_r+0x994>
 8009254:	2201      	movs	r2, #1
 8009256:	e7e1      	b.n	800921c <_dtoa_r+0x9e4>
 8009258:	9b08      	ldr	r3, [sp, #32]
 800925a:	2b00      	cmp	r3, #0
 800925c:	db04      	blt.n	8009268 <_dtoa_r+0xa30>
 800925e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009260:	430b      	orrs	r3, r1
 8009262:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8009264:	430b      	orrs	r3, r1
 8009266:	d120      	bne.n	80092aa <_dtoa_r+0xa72>
 8009268:	2a00      	cmp	r2, #0
 800926a:	dded      	ble.n	8009248 <_dtoa_r+0xa10>
 800926c:	4649      	mov	r1, r9
 800926e:	2201      	movs	r2, #1
 8009270:	4658      	mov	r0, fp
 8009272:	f000 fbb3 	bl	80099dc <__lshift>
 8009276:	4621      	mov	r1, r4
 8009278:	4681      	mov	r9, r0
 800927a:	f000 fc1b 	bl	8009ab4 <__mcmp>
 800927e:	2800      	cmp	r0, #0
 8009280:	dc03      	bgt.n	800928a <_dtoa_r+0xa52>
 8009282:	d1e1      	bne.n	8009248 <_dtoa_r+0xa10>
 8009284:	f018 0f01 	tst.w	r8, #1
 8009288:	d0de      	beq.n	8009248 <_dtoa_r+0xa10>
 800928a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800928e:	d1d8      	bne.n	8009242 <_dtoa_r+0xa0a>
 8009290:	9a00      	ldr	r2, [sp, #0]
 8009292:	2339      	movs	r3, #57	@ 0x39
 8009294:	7013      	strb	r3, [r2, #0]
 8009296:	4633      	mov	r3, r6
 8009298:	461e      	mov	r6, r3
 800929a:	3b01      	subs	r3, #1
 800929c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80092a0:	2a39      	cmp	r2, #57	@ 0x39
 80092a2:	d052      	beq.n	800934a <_dtoa_r+0xb12>
 80092a4:	3201      	adds	r2, #1
 80092a6:	701a      	strb	r2, [r3, #0]
 80092a8:	e612      	b.n	8008ed0 <_dtoa_r+0x698>
 80092aa:	2a00      	cmp	r2, #0
 80092ac:	dd07      	ble.n	80092be <_dtoa_r+0xa86>
 80092ae:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80092b2:	d0ed      	beq.n	8009290 <_dtoa_r+0xa58>
 80092b4:	9a00      	ldr	r2, [sp, #0]
 80092b6:	f108 0301 	add.w	r3, r8, #1
 80092ba:	7013      	strb	r3, [r2, #0]
 80092bc:	e608      	b.n	8008ed0 <_dtoa_r+0x698>
 80092be:	9b07      	ldr	r3, [sp, #28]
 80092c0:	9a07      	ldr	r2, [sp, #28]
 80092c2:	f803 8c01 	strb.w	r8, [r3, #-1]
 80092c6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80092c8:	4293      	cmp	r3, r2
 80092ca:	d028      	beq.n	800931e <_dtoa_r+0xae6>
 80092cc:	4649      	mov	r1, r9
 80092ce:	2300      	movs	r3, #0
 80092d0:	220a      	movs	r2, #10
 80092d2:	4658      	mov	r0, fp
 80092d4:	f000 f9d6 	bl	8009684 <__multadd>
 80092d8:	42af      	cmp	r7, r5
 80092da:	4681      	mov	r9, r0
 80092dc:	f04f 0300 	mov.w	r3, #0
 80092e0:	f04f 020a 	mov.w	r2, #10
 80092e4:	4639      	mov	r1, r7
 80092e6:	4658      	mov	r0, fp
 80092e8:	d107      	bne.n	80092fa <_dtoa_r+0xac2>
 80092ea:	f000 f9cb 	bl	8009684 <__multadd>
 80092ee:	4607      	mov	r7, r0
 80092f0:	4605      	mov	r5, r0
 80092f2:	9b07      	ldr	r3, [sp, #28]
 80092f4:	3301      	adds	r3, #1
 80092f6:	9307      	str	r3, [sp, #28]
 80092f8:	e774      	b.n	80091e4 <_dtoa_r+0x9ac>
 80092fa:	f000 f9c3 	bl	8009684 <__multadd>
 80092fe:	4629      	mov	r1, r5
 8009300:	4607      	mov	r7, r0
 8009302:	2300      	movs	r3, #0
 8009304:	220a      	movs	r2, #10
 8009306:	4658      	mov	r0, fp
 8009308:	f000 f9bc 	bl	8009684 <__multadd>
 800930c:	4605      	mov	r5, r0
 800930e:	e7f0      	b.n	80092f2 <_dtoa_r+0xaba>
 8009310:	9b00      	ldr	r3, [sp, #0]
 8009312:	2b00      	cmp	r3, #0
 8009314:	bfcc      	ite	gt
 8009316:	461e      	movgt	r6, r3
 8009318:	2601      	movle	r6, #1
 800931a:	4456      	add	r6, sl
 800931c:	2700      	movs	r7, #0
 800931e:	4649      	mov	r1, r9
 8009320:	2201      	movs	r2, #1
 8009322:	4658      	mov	r0, fp
 8009324:	f000 fb5a 	bl	80099dc <__lshift>
 8009328:	4621      	mov	r1, r4
 800932a:	4681      	mov	r9, r0
 800932c:	f000 fbc2 	bl	8009ab4 <__mcmp>
 8009330:	2800      	cmp	r0, #0
 8009332:	dcb0      	bgt.n	8009296 <_dtoa_r+0xa5e>
 8009334:	d102      	bne.n	800933c <_dtoa_r+0xb04>
 8009336:	f018 0f01 	tst.w	r8, #1
 800933a:	d1ac      	bne.n	8009296 <_dtoa_r+0xa5e>
 800933c:	4633      	mov	r3, r6
 800933e:	461e      	mov	r6, r3
 8009340:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009344:	2a30      	cmp	r2, #48	@ 0x30
 8009346:	d0fa      	beq.n	800933e <_dtoa_r+0xb06>
 8009348:	e5c2      	b.n	8008ed0 <_dtoa_r+0x698>
 800934a:	459a      	cmp	sl, r3
 800934c:	d1a4      	bne.n	8009298 <_dtoa_r+0xa60>
 800934e:	9b04      	ldr	r3, [sp, #16]
 8009350:	3301      	adds	r3, #1
 8009352:	9304      	str	r3, [sp, #16]
 8009354:	2331      	movs	r3, #49	@ 0x31
 8009356:	f88a 3000 	strb.w	r3, [sl]
 800935a:	e5b9      	b.n	8008ed0 <_dtoa_r+0x698>
 800935c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800935e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 80093bc <_dtoa_r+0xb84>
 8009362:	b11b      	cbz	r3, 800936c <_dtoa_r+0xb34>
 8009364:	f10a 0308 	add.w	r3, sl, #8
 8009368:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800936a:	6013      	str	r3, [r2, #0]
 800936c:	4650      	mov	r0, sl
 800936e:	b019      	add	sp, #100	@ 0x64
 8009370:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009374:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009376:	2b01      	cmp	r3, #1
 8009378:	f77f ae37 	ble.w	8008fea <_dtoa_r+0x7b2>
 800937c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800937e:	930a      	str	r3, [sp, #40]	@ 0x28
 8009380:	2001      	movs	r0, #1
 8009382:	e655      	b.n	8009030 <_dtoa_r+0x7f8>
 8009384:	9b00      	ldr	r3, [sp, #0]
 8009386:	2b00      	cmp	r3, #0
 8009388:	f77f aed6 	ble.w	8009138 <_dtoa_r+0x900>
 800938c:	4656      	mov	r6, sl
 800938e:	4621      	mov	r1, r4
 8009390:	4648      	mov	r0, r9
 8009392:	f7ff f9c6 	bl	8008722 <quorem>
 8009396:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800939a:	f806 8b01 	strb.w	r8, [r6], #1
 800939e:	9b00      	ldr	r3, [sp, #0]
 80093a0:	eba6 020a 	sub.w	r2, r6, sl
 80093a4:	4293      	cmp	r3, r2
 80093a6:	ddb3      	ble.n	8009310 <_dtoa_r+0xad8>
 80093a8:	4649      	mov	r1, r9
 80093aa:	2300      	movs	r3, #0
 80093ac:	220a      	movs	r2, #10
 80093ae:	4658      	mov	r0, fp
 80093b0:	f000 f968 	bl	8009684 <__multadd>
 80093b4:	4681      	mov	r9, r0
 80093b6:	e7ea      	b.n	800938e <_dtoa_r+0xb56>
 80093b8:	0800a978 	.word	0x0800a978
 80093bc:	0800a8fc 	.word	0x0800a8fc

080093c0 <_free_r>:
 80093c0:	b538      	push	{r3, r4, r5, lr}
 80093c2:	4605      	mov	r5, r0
 80093c4:	2900      	cmp	r1, #0
 80093c6:	d041      	beq.n	800944c <_free_r+0x8c>
 80093c8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80093cc:	1f0c      	subs	r4, r1, #4
 80093ce:	2b00      	cmp	r3, #0
 80093d0:	bfb8      	it	lt
 80093d2:	18e4      	addlt	r4, r4, r3
 80093d4:	f000 f8e8 	bl	80095a8 <__malloc_lock>
 80093d8:	4a1d      	ldr	r2, [pc, #116]	@ (8009450 <_free_r+0x90>)
 80093da:	6813      	ldr	r3, [r2, #0]
 80093dc:	b933      	cbnz	r3, 80093ec <_free_r+0x2c>
 80093de:	6063      	str	r3, [r4, #4]
 80093e0:	6014      	str	r4, [r2, #0]
 80093e2:	4628      	mov	r0, r5
 80093e4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80093e8:	f000 b8e4 	b.w	80095b4 <__malloc_unlock>
 80093ec:	42a3      	cmp	r3, r4
 80093ee:	d908      	bls.n	8009402 <_free_r+0x42>
 80093f0:	6820      	ldr	r0, [r4, #0]
 80093f2:	1821      	adds	r1, r4, r0
 80093f4:	428b      	cmp	r3, r1
 80093f6:	bf01      	itttt	eq
 80093f8:	6819      	ldreq	r1, [r3, #0]
 80093fa:	685b      	ldreq	r3, [r3, #4]
 80093fc:	1809      	addeq	r1, r1, r0
 80093fe:	6021      	streq	r1, [r4, #0]
 8009400:	e7ed      	b.n	80093de <_free_r+0x1e>
 8009402:	461a      	mov	r2, r3
 8009404:	685b      	ldr	r3, [r3, #4]
 8009406:	b10b      	cbz	r3, 800940c <_free_r+0x4c>
 8009408:	42a3      	cmp	r3, r4
 800940a:	d9fa      	bls.n	8009402 <_free_r+0x42>
 800940c:	6811      	ldr	r1, [r2, #0]
 800940e:	1850      	adds	r0, r2, r1
 8009410:	42a0      	cmp	r0, r4
 8009412:	d10b      	bne.n	800942c <_free_r+0x6c>
 8009414:	6820      	ldr	r0, [r4, #0]
 8009416:	4401      	add	r1, r0
 8009418:	1850      	adds	r0, r2, r1
 800941a:	4283      	cmp	r3, r0
 800941c:	6011      	str	r1, [r2, #0]
 800941e:	d1e0      	bne.n	80093e2 <_free_r+0x22>
 8009420:	6818      	ldr	r0, [r3, #0]
 8009422:	685b      	ldr	r3, [r3, #4]
 8009424:	6053      	str	r3, [r2, #4]
 8009426:	4408      	add	r0, r1
 8009428:	6010      	str	r0, [r2, #0]
 800942a:	e7da      	b.n	80093e2 <_free_r+0x22>
 800942c:	d902      	bls.n	8009434 <_free_r+0x74>
 800942e:	230c      	movs	r3, #12
 8009430:	602b      	str	r3, [r5, #0]
 8009432:	e7d6      	b.n	80093e2 <_free_r+0x22>
 8009434:	6820      	ldr	r0, [r4, #0]
 8009436:	1821      	adds	r1, r4, r0
 8009438:	428b      	cmp	r3, r1
 800943a:	bf04      	itt	eq
 800943c:	6819      	ldreq	r1, [r3, #0]
 800943e:	685b      	ldreq	r3, [r3, #4]
 8009440:	6063      	str	r3, [r4, #4]
 8009442:	bf04      	itt	eq
 8009444:	1809      	addeq	r1, r1, r0
 8009446:	6021      	streq	r1, [r4, #0]
 8009448:	6054      	str	r4, [r2, #4]
 800944a:	e7ca      	b.n	80093e2 <_free_r+0x22>
 800944c:	bd38      	pop	{r3, r4, r5, pc}
 800944e:	bf00      	nop
 8009450:	20000bdc 	.word	0x20000bdc

08009454 <malloc>:
 8009454:	4b02      	ldr	r3, [pc, #8]	@ (8009460 <malloc+0xc>)
 8009456:	4601      	mov	r1, r0
 8009458:	6818      	ldr	r0, [r3, #0]
 800945a:	f000 b825 	b.w	80094a8 <_malloc_r>
 800945e:	bf00      	nop
 8009460:	2000001c 	.word	0x2000001c

08009464 <sbrk_aligned>:
 8009464:	b570      	push	{r4, r5, r6, lr}
 8009466:	4e0f      	ldr	r6, [pc, #60]	@ (80094a4 <sbrk_aligned+0x40>)
 8009468:	460c      	mov	r4, r1
 800946a:	6831      	ldr	r1, [r6, #0]
 800946c:	4605      	mov	r5, r0
 800946e:	b911      	cbnz	r1, 8009476 <sbrk_aligned+0x12>
 8009470:	f000 fe46 	bl	800a100 <_sbrk_r>
 8009474:	6030      	str	r0, [r6, #0]
 8009476:	4621      	mov	r1, r4
 8009478:	4628      	mov	r0, r5
 800947a:	f000 fe41 	bl	800a100 <_sbrk_r>
 800947e:	1c43      	adds	r3, r0, #1
 8009480:	d103      	bne.n	800948a <sbrk_aligned+0x26>
 8009482:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8009486:	4620      	mov	r0, r4
 8009488:	bd70      	pop	{r4, r5, r6, pc}
 800948a:	1cc4      	adds	r4, r0, #3
 800948c:	f024 0403 	bic.w	r4, r4, #3
 8009490:	42a0      	cmp	r0, r4
 8009492:	d0f8      	beq.n	8009486 <sbrk_aligned+0x22>
 8009494:	1a21      	subs	r1, r4, r0
 8009496:	4628      	mov	r0, r5
 8009498:	f000 fe32 	bl	800a100 <_sbrk_r>
 800949c:	3001      	adds	r0, #1
 800949e:	d1f2      	bne.n	8009486 <sbrk_aligned+0x22>
 80094a0:	e7ef      	b.n	8009482 <sbrk_aligned+0x1e>
 80094a2:	bf00      	nop
 80094a4:	20000bd8 	.word	0x20000bd8

080094a8 <_malloc_r>:
 80094a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80094ac:	1ccd      	adds	r5, r1, #3
 80094ae:	f025 0503 	bic.w	r5, r5, #3
 80094b2:	3508      	adds	r5, #8
 80094b4:	2d0c      	cmp	r5, #12
 80094b6:	bf38      	it	cc
 80094b8:	250c      	movcc	r5, #12
 80094ba:	2d00      	cmp	r5, #0
 80094bc:	4606      	mov	r6, r0
 80094be:	db01      	blt.n	80094c4 <_malloc_r+0x1c>
 80094c0:	42a9      	cmp	r1, r5
 80094c2:	d904      	bls.n	80094ce <_malloc_r+0x26>
 80094c4:	230c      	movs	r3, #12
 80094c6:	6033      	str	r3, [r6, #0]
 80094c8:	2000      	movs	r0, #0
 80094ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80094ce:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80095a4 <_malloc_r+0xfc>
 80094d2:	f000 f869 	bl	80095a8 <__malloc_lock>
 80094d6:	f8d8 3000 	ldr.w	r3, [r8]
 80094da:	461c      	mov	r4, r3
 80094dc:	bb44      	cbnz	r4, 8009530 <_malloc_r+0x88>
 80094de:	4629      	mov	r1, r5
 80094e0:	4630      	mov	r0, r6
 80094e2:	f7ff ffbf 	bl	8009464 <sbrk_aligned>
 80094e6:	1c43      	adds	r3, r0, #1
 80094e8:	4604      	mov	r4, r0
 80094ea:	d158      	bne.n	800959e <_malloc_r+0xf6>
 80094ec:	f8d8 4000 	ldr.w	r4, [r8]
 80094f0:	4627      	mov	r7, r4
 80094f2:	2f00      	cmp	r7, #0
 80094f4:	d143      	bne.n	800957e <_malloc_r+0xd6>
 80094f6:	2c00      	cmp	r4, #0
 80094f8:	d04b      	beq.n	8009592 <_malloc_r+0xea>
 80094fa:	6823      	ldr	r3, [r4, #0]
 80094fc:	4639      	mov	r1, r7
 80094fe:	4630      	mov	r0, r6
 8009500:	eb04 0903 	add.w	r9, r4, r3
 8009504:	f000 fdfc 	bl	800a100 <_sbrk_r>
 8009508:	4581      	cmp	r9, r0
 800950a:	d142      	bne.n	8009592 <_malloc_r+0xea>
 800950c:	6821      	ldr	r1, [r4, #0]
 800950e:	1a6d      	subs	r5, r5, r1
 8009510:	4629      	mov	r1, r5
 8009512:	4630      	mov	r0, r6
 8009514:	f7ff ffa6 	bl	8009464 <sbrk_aligned>
 8009518:	3001      	adds	r0, #1
 800951a:	d03a      	beq.n	8009592 <_malloc_r+0xea>
 800951c:	6823      	ldr	r3, [r4, #0]
 800951e:	442b      	add	r3, r5
 8009520:	6023      	str	r3, [r4, #0]
 8009522:	f8d8 3000 	ldr.w	r3, [r8]
 8009526:	685a      	ldr	r2, [r3, #4]
 8009528:	bb62      	cbnz	r2, 8009584 <_malloc_r+0xdc>
 800952a:	f8c8 7000 	str.w	r7, [r8]
 800952e:	e00f      	b.n	8009550 <_malloc_r+0xa8>
 8009530:	6822      	ldr	r2, [r4, #0]
 8009532:	1b52      	subs	r2, r2, r5
 8009534:	d420      	bmi.n	8009578 <_malloc_r+0xd0>
 8009536:	2a0b      	cmp	r2, #11
 8009538:	d917      	bls.n	800956a <_malloc_r+0xc2>
 800953a:	1961      	adds	r1, r4, r5
 800953c:	42a3      	cmp	r3, r4
 800953e:	6025      	str	r5, [r4, #0]
 8009540:	bf18      	it	ne
 8009542:	6059      	strne	r1, [r3, #4]
 8009544:	6863      	ldr	r3, [r4, #4]
 8009546:	bf08      	it	eq
 8009548:	f8c8 1000 	streq.w	r1, [r8]
 800954c:	5162      	str	r2, [r4, r5]
 800954e:	604b      	str	r3, [r1, #4]
 8009550:	4630      	mov	r0, r6
 8009552:	f000 f82f 	bl	80095b4 <__malloc_unlock>
 8009556:	f104 000b 	add.w	r0, r4, #11
 800955a:	1d23      	adds	r3, r4, #4
 800955c:	f020 0007 	bic.w	r0, r0, #7
 8009560:	1ac2      	subs	r2, r0, r3
 8009562:	bf1c      	itt	ne
 8009564:	1a1b      	subne	r3, r3, r0
 8009566:	50a3      	strne	r3, [r4, r2]
 8009568:	e7af      	b.n	80094ca <_malloc_r+0x22>
 800956a:	6862      	ldr	r2, [r4, #4]
 800956c:	42a3      	cmp	r3, r4
 800956e:	bf0c      	ite	eq
 8009570:	f8c8 2000 	streq.w	r2, [r8]
 8009574:	605a      	strne	r2, [r3, #4]
 8009576:	e7eb      	b.n	8009550 <_malloc_r+0xa8>
 8009578:	4623      	mov	r3, r4
 800957a:	6864      	ldr	r4, [r4, #4]
 800957c:	e7ae      	b.n	80094dc <_malloc_r+0x34>
 800957e:	463c      	mov	r4, r7
 8009580:	687f      	ldr	r7, [r7, #4]
 8009582:	e7b6      	b.n	80094f2 <_malloc_r+0x4a>
 8009584:	461a      	mov	r2, r3
 8009586:	685b      	ldr	r3, [r3, #4]
 8009588:	42a3      	cmp	r3, r4
 800958a:	d1fb      	bne.n	8009584 <_malloc_r+0xdc>
 800958c:	2300      	movs	r3, #0
 800958e:	6053      	str	r3, [r2, #4]
 8009590:	e7de      	b.n	8009550 <_malloc_r+0xa8>
 8009592:	230c      	movs	r3, #12
 8009594:	6033      	str	r3, [r6, #0]
 8009596:	4630      	mov	r0, r6
 8009598:	f000 f80c 	bl	80095b4 <__malloc_unlock>
 800959c:	e794      	b.n	80094c8 <_malloc_r+0x20>
 800959e:	6005      	str	r5, [r0, #0]
 80095a0:	e7d6      	b.n	8009550 <_malloc_r+0xa8>
 80095a2:	bf00      	nop
 80095a4:	20000bdc 	.word	0x20000bdc

080095a8 <__malloc_lock>:
 80095a8:	4801      	ldr	r0, [pc, #4]	@ (80095b0 <__malloc_lock+0x8>)
 80095aa:	f7ff b8b8 	b.w	800871e <__retarget_lock_acquire_recursive>
 80095ae:	bf00      	nop
 80095b0:	20000bd4 	.word	0x20000bd4

080095b4 <__malloc_unlock>:
 80095b4:	4801      	ldr	r0, [pc, #4]	@ (80095bc <__malloc_unlock+0x8>)
 80095b6:	f7ff b8b3 	b.w	8008720 <__retarget_lock_release_recursive>
 80095ba:	bf00      	nop
 80095bc:	20000bd4 	.word	0x20000bd4

080095c0 <_Balloc>:
 80095c0:	b570      	push	{r4, r5, r6, lr}
 80095c2:	69c6      	ldr	r6, [r0, #28]
 80095c4:	4604      	mov	r4, r0
 80095c6:	460d      	mov	r5, r1
 80095c8:	b976      	cbnz	r6, 80095e8 <_Balloc+0x28>
 80095ca:	2010      	movs	r0, #16
 80095cc:	f7ff ff42 	bl	8009454 <malloc>
 80095d0:	4602      	mov	r2, r0
 80095d2:	61e0      	str	r0, [r4, #28]
 80095d4:	b920      	cbnz	r0, 80095e0 <_Balloc+0x20>
 80095d6:	4b18      	ldr	r3, [pc, #96]	@ (8009638 <_Balloc+0x78>)
 80095d8:	4818      	ldr	r0, [pc, #96]	@ (800963c <_Balloc+0x7c>)
 80095da:	216b      	movs	r1, #107	@ 0x6b
 80095dc:	f000 fdae 	bl	800a13c <__assert_func>
 80095e0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80095e4:	6006      	str	r6, [r0, #0]
 80095e6:	60c6      	str	r6, [r0, #12]
 80095e8:	69e6      	ldr	r6, [r4, #28]
 80095ea:	68f3      	ldr	r3, [r6, #12]
 80095ec:	b183      	cbz	r3, 8009610 <_Balloc+0x50>
 80095ee:	69e3      	ldr	r3, [r4, #28]
 80095f0:	68db      	ldr	r3, [r3, #12]
 80095f2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80095f6:	b9b8      	cbnz	r0, 8009628 <_Balloc+0x68>
 80095f8:	2101      	movs	r1, #1
 80095fa:	fa01 f605 	lsl.w	r6, r1, r5
 80095fe:	1d72      	adds	r2, r6, #5
 8009600:	0092      	lsls	r2, r2, #2
 8009602:	4620      	mov	r0, r4
 8009604:	f000 fdb8 	bl	800a178 <_calloc_r>
 8009608:	b160      	cbz	r0, 8009624 <_Balloc+0x64>
 800960a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800960e:	e00e      	b.n	800962e <_Balloc+0x6e>
 8009610:	2221      	movs	r2, #33	@ 0x21
 8009612:	2104      	movs	r1, #4
 8009614:	4620      	mov	r0, r4
 8009616:	f000 fdaf 	bl	800a178 <_calloc_r>
 800961a:	69e3      	ldr	r3, [r4, #28]
 800961c:	60f0      	str	r0, [r6, #12]
 800961e:	68db      	ldr	r3, [r3, #12]
 8009620:	2b00      	cmp	r3, #0
 8009622:	d1e4      	bne.n	80095ee <_Balloc+0x2e>
 8009624:	2000      	movs	r0, #0
 8009626:	bd70      	pop	{r4, r5, r6, pc}
 8009628:	6802      	ldr	r2, [r0, #0]
 800962a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800962e:	2300      	movs	r3, #0
 8009630:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009634:	e7f7      	b.n	8009626 <_Balloc+0x66>
 8009636:	bf00      	nop
 8009638:	0800a909 	.word	0x0800a909
 800963c:	0800a989 	.word	0x0800a989

08009640 <_Bfree>:
 8009640:	b570      	push	{r4, r5, r6, lr}
 8009642:	69c6      	ldr	r6, [r0, #28]
 8009644:	4605      	mov	r5, r0
 8009646:	460c      	mov	r4, r1
 8009648:	b976      	cbnz	r6, 8009668 <_Bfree+0x28>
 800964a:	2010      	movs	r0, #16
 800964c:	f7ff ff02 	bl	8009454 <malloc>
 8009650:	4602      	mov	r2, r0
 8009652:	61e8      	str	r0, [r5, #28]
 8009654:	b920      	cbnz	r0, 8009660 <_Bfree+0x20>
 8009656:	4b09      	ldr	r3, [pc, #36]	@ (800967c <_Bfree+0x3c>)
 8009658:	4809      	ldr	r0, [pc, #36]	@ (8009680 <_Bfree+0x40>)
 800965a:	218f      	movs	r1, #143	@ 0x8f
 800965c:	f000 fd6e 	bl	800a13c <__assert_func>
 8009660:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009664:	6006      	str	r6, [r0, #0]
 8009666:	60c6      	str	r6, [r0, #12]
 8009668:	b13c      	cbz	r4, 800967a <_Bfree+0x3a>
 800966a:	69eb      	ldr	r3, [r5, #28]
 800966c:	6862      	ldr	r2, [r4, #4]
 800966e:	68db      	ldr	r3, [r3, #12]
 8009670:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009674:	6021      	str	r1, [r4, #0]
 8009676:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800967a:	bd70      	pop	{r4, r5, r6, pc}
 800967c:	0800a909 	.word	0x0800a909
 8009680:	0800a989 	.word	0x0800a989

08009684 <__multadd>:
 8009684:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009688:	690d      	ldr	r5, [r1, #16]
 800968a:	4607      	mov	r7, r0
 800968c:	460c      	mov	r4, r1
 800968e:	461e      	mov	r6, r3
 8009690:	f101 0c14 	add.w	ip, r1, #20
 8009694:	2000      	movs	r0, #0
 8009696:	f8dc 3000 	ldr.w	r3, [ip]
 800969a:	b299      	uxth	r1, r3
 800969c:	fb02 6101 	mla	r1, r2, r1, r6
 80096a0:	0c1e      	lsrs	r6, r3, #16
 80096a2:	0c0b      	lsrs	r3, r1, #16
 80096a4:	fb02 3306 	mla	r3, r2, r6, r3
 80096a8:	b289      	uxth	r1, r1
 80096aa:	3001      	adds	r0, #1
 80096ac:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80096b0:	4285      	cmp	r5, r0
 80096b2:	f84c 1b04 	str.w	r1, [ip], #4
 80096b6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80096ba:	dcec      	bgt.n	8009696 <__multadd+0x12>
 80096bc:	b30e      	cbz	r6, 8009702 <__multadd+0x7e>
 80096be:	68a3      	ldr	r3, [r4, #8]
 80096c0:	42ab      	cmp	r3, r5
 80096c2:	dc19      	bgt.n	80096f8 <__multadd+0x74>
 80096c4:	6861      	ldr	r1, [r4, #4]
 80096c6:	4638      	mov	r0, r7
 80096c8:	3101      	adds	r1, #1
 80096ca:	f7ff ff79 	bl	80095c0 <_Balloc>
 80096ce:	4680      	mov	r8, r0
 80096d0:	b928      	cbnz	r0, 80096de <__multadd+0x5a>
 80096d2:	4602      	mov	r2, r0
 80096d4:	4b0c      	ldr	r3, [pc, #48]	@ (8009708 <__multadd+0x84>)
 80096d6:	480d      	ldr	r0, [pc, #52]	@ (800970c <__multadd+0x88>)
 80096d8:	21ba      	movs	r1, #186	@ 0xba
 80096da:	f000 fd2f 	bl	800a13c <__assert_func>
 80096de:	6922      	ldr	r2, [r4, #16]
 80096e0:	3202      	adds	r2, #2
 80096e2:	f104 010c 	add.w	r1, r4, #12
 80096e6:	0092      	lsls	r2, r2, #2
 80096e8:	300c      	adds	r0, #12
 80096ea:	f000 fd19 	bl	800a120 <memcpy>
 80096ee:	4621      	mov	r1, r4
 80096f0:	4638      	mov	r0, r7
 80096f2:	f7ff ffa5 	bl	8009640 <_Bfree>
 80096f6:	4644      	mov	r4, r8
 80096f8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80096fc:	3501      	adds	r5, #1
 80096fe:	615e      	str	r6, [r3, #20]
 8009700:	6125      	str	r5, [r4, #16]
 8009702:	4620      	mov	r0, r4
 8009704:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009708:	0800a978 	.word	0x0800a978
 800970c:	0800a989 	.word	0x0800a989

08009710 <__hi0bits>:
 8009710:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8009714:	4603      	mov	r3, r0
 8009716:	bf36      	itet	cc
 8009718:	0403      	lslcc	r3, r0, #16
 800971a:	2000      	movcs	r0, #0
 800971c:	2010      	movcc	r0, #16
 800971e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009722:	bf3c      	itt	cc
 8009724:	021b      	lslcc	r3, r3, #8
 8009726:	3008      	addcc	r0, #8
 8009728:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800972c:	bf3c      	itt	cc
 800972e:	011b      	lslcc	r3, r3, #4
 8009730:	3004      	addcc	r0, #4
 8009732:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009736:	bf3c      	itt	cc
 8009738:	009b      	lslcc	r3, r3, #2
 800973a:	3002      	addcc	r0, #2
 800973c:	2b00      	cmp	r3, #0
 800973e:	db05      	blt.n	800974c <__hi0bits+0x3c>
 8009740:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8009744:	f100 0001 	add.w	r0, r0, #1
 8009748:	bf08      	it	eq
 800974a:	2020      	moveq	r0, #32
 800974c:	4770      	bx	lr

0800974e <__lo0bits>:
 800974e:	6803      	ldr	r3, [r0, #0]
 8009750:	4602      	mov	r2, r0
 8009752:	f013 0007 	ands.w	r0, r3, #7
 8009756:	d00b      	beq.n	8009770 <__lo0bits+0x22>
 8009758:	07d9      	lsls	r1, r3, #31
 800975a:	d421      	bmi.n	80097a0 <__lo0bits+0x52>
 800975c:	0798      	lsls	r0, r3, #30
 800975e:	bf49      	itett	mi
 8009760:	085b      	lsrmi	r3, r3, #1
 8009762:	089b      	lsrpl	r3, r3, #2
 8009764:	2001      	movmi	r0, #1
 8009766:	6013      	strmi	r3, [r2, #0]
 8009768:	bf5c      	itt	pl
 800976a:	6013      	strpl	r3, [r2, #0]
 800976c:	2002      	movpl	r0, #2
 800976e:	4770      	bx	lr
 8009770:	b299      	uxth	r1, r3
 8009772:	b909      	cbnz	r1, 8009778 <__lo0bits+0x2a>
 8009774:	0c1b      	lsrs	r3, r3, #16
 8009776:	2010      	movs	r0, #16
 8009778:	b2d9      	uxtb	r1, r3
 800977a:	b909      	cbnz	r1, 8009780 <__lo0bits+0x32>
 800977c:	3008      	adds	r0, #8
 800977e:	0a1b      	lsrs	r3, r3, #8
 8009780:	0719      	lsls	r1, r3, #28
 8009782:	bf04      	itt	eq
 8009784:	091b      	lsreq	r3, r3, #4
 8009786:	3004      	addeq	r0, #4
 8009788:	0799      	lsls	r1, r3, #30
 800978a:	bf04      	itt	eq
 800978c:	089b      	lsreq	r3, r3, #2
 800978e:	3002      	addeq	r0, #2
 8009790:	07d9      	lsls	r1, r3, #31
 8009792:	d403      	bmi.n	800979c <__lo0bits+0x4e>
 8009794:	085b      	lsrs	r3, r3, #1
 8009796:	f100 0001 	add.w	r0, r0, #1
 800979a:	d003      	beq.n	80097a4 <__lo0bits+0x56>
 800979c:	6013      	str	r3, [r2, #0]
 800979e:	4770      	bx	lr
 80097a0:	2000      	movs	r0, #0
 80097a2:	4770      	bx	lr
 80097a4:	2020      	movs	r0, #32
 80097a6:	4770      	bx	lr

080097a8 <__i2b>:
 80097a8:	b510      	push	{r4, lr}
 80097aa:	460c      	mov	r4, r1
 80097ac:	2101      	movs	r1, #1
 80097ae:	f7ff ff07 	bl	80095c0 <_Balloc>
 80097b2:	4602      	mov	r2, r0
 80097b4:	b928      	cbnz	r0, 80097c2 <__i2b+0x1a>
 80097b6:	4b05      	ldr	r3, [pc, #20]	@ (80097cc <__i2b+0x24>)
 80097b8:	4805      	ldr	r0, [pc, #20]	@ (80097d0 <__i2b+0x28>)
 80097ba:	f240 1145 	movw	r1, #325	@ 0x145
 80097be:	f000 fcbd 	bl	800a13c <__assert_func>
 80097c2:	2301      	movs	r3, #1
 80097c4:	6144      	str	r4, [r0, #20]
 80097c6:	6103      	str	r3, [r0, #16]
 80097c8:	bd10      	pop	{r4, pc}
 80097ca:	bf00      	nop
 80097cc:	0800a978 	.word	0x0800a978
 80097d0:	0800a989 	.word	0x0800a989

080097d4 <__multiply>:
 80097d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80097d8:	4614      	mov	r4, r2
 80097da:	690a      	ldr	r2, [r1, #16]
 80097dc:	6923      	ldr	r3, [r4, #16]
 80097de:	429a      	cmp	r2, r3
 80097e0:	bfa8      	it	ge
 80097e2:	4623      	movge	r3, r4
 80097e4:	460f      	mov	r7, r1
 80097e6:	bfa4      	itt	ge
 80097e8:	460c      	movge	r4, r1
 80097ea:	461f      	movge	r7, r3
 80097ec:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80097f0:	f8d7 9010 	ldr.w	r9, [r7, #16]
 80097f4:	68a3      	ldr	r3, [r4, #8]
 80097f6:	6861      	ldr	r1, [r4, #4]
 80097f8:	eb0a 0609 	add.w	r6, sl, r9
 80097fc:	42b3      	cmp	r3, r6
 80097fe:	b085      	sub	sp, #20
 8009800:	bfb8      	it	lt
 8009802:	3101      	addlt	r1, #1
 8009804:	f7ff fedc 	bl	80095c0 <_Balloc>
 8009808:	b930      	cbnz	r0, 8009818 <__multiply+0x44>
 800980a:	4602      	mov	r2, r0
 800980c:	4b44      	ldr	r3, [pc, #272]	@ (8009920 <__multiply+0x14c>)
 800980e:	4845      	ldr	r0, [pc, #276]	@ (8009924 <__multiply+0x150>)
 8009810:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8009814:	f000 fc92 	bl	800a13c <__assert_func>
 8009818:	f100 0514 	add.w	r5, r0, #20
 800981c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009820:	462b      	mov	r3, r5
 8009822:	2200      	movs	r2, #0
 8009824:	4543      	cmp	r3, r8
 8009826:	d321      	bcc.n	800986c <__multiply+0x98>
 8009828:	f107 0114 	add.w	r1, r7, #20
 800982c:	f104 0214 	add.w	r2, r4, #20
 8009830:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8009834:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8009838:	9302      	str	r3, [sp, #8]
 800983a:	1b13      	subs	r3, r2, r4
 800983c:	3b15      	subs	r3, #21
 800983e:	f023 0303 	bic.w	r3, r3, #3
 8009842:	3304      	adds	r3, #4
 8009844:	f104 0715 	add.w	r7, r4, #21
 8009848:	42ba      	cmp	r2, r7
 800984a:	bf38      	it	cc
 800984c:	2304      	movcc	r3, #4
 800984e:	9301      	str	r3, [sp, #4]
 8009850:	9b02      	ldr	r3, [sp, #8]
 8009852:	9103      	str	r1, [sp, #12]
 8009854:	428b      	cmp	r3, r1
 8009856:	d80c      	bhi.n	8009872 <__multiply+0x9e>
 8009858:	2e00      	cmp	r6, #0
 800985a:	dd03      	ble.n	8009864 <__multiply+0x90>
 800985c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009860:	2b00      	cmp	r3, #0
 8009862:	d05b      	beq.n	800991c <__multiply+0x148>
 8009864:	6106      	str	r6, [r0, #16]
 8009866:	b005      	add	sp, #20
 8009868:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800986c:	f843 2b04 	str.w	r2, [r3], #4
 8009870:	e7d8      	b.n	8009824 <__multiply+0x50>
 8009872:	f8b1 a000 	ldrh.w	sl, [r1]
 8009876:	f1ba 0f00 	cmp.w	sl, #0
 800987a:	d024      	beq.n	80098c6 <__multiply+0xf2>
 800987c:	f104 0e14 	add.w	lr, r4, #20
 8009880:	46a9      	mov	r9, r5
 8009882:	f04f 0c00 	mov.w	ip, #0
 8009886:	f85e 7b04 	ldr.w	r7, [lr], #4
 800988a:	f8d9 3000 	ldr.w	r3, [r9]
 800988e:	fa1f fb87 	uxth.w	fp, r7
 8009892:	b29b      	uxth	r3, r3
 8009894:	fb0a 330b 	mla	r3, sl, fp, r3
 8009898:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800989c:	f8d9 7000 	ldr.w	r7, [r9]
 80098a0:	4463      	add	r3, ip
 80098a2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80098a6:	fb0a c70b 	mla	r7, sl, fp, ip
 80098aa:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 80098ae:	b29b      	uxth	r3, r3
 80098b0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80098b4:	4572      	cmp	r2, lr
 80098b6:	f849 3b04 	str.w	r3, [r9], #4
 80098ba:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80098be:	d8e2      	bhi.n	8009886 <__multiply+0xb2>
 80098c0:	9b01      	ldr	r3, [sp, #4]
 80098c2:	f845 c003 	str.w	ip, [r5, r3]
 80098c6:	9b03      	ldr	r3, [sp, #12]
 80098c8:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80098cc:	3104      	adds	r1, #4
 80098ce:	f1b9 0f00 	cmp.w	r9, #0
 80098d2:	d021      	beq.n	8009918 <__multiply+0x144>
 80098d4:	682b      	ldr	r3, [r5, #0]
 80098d6:	f104 0c14 	add.w	ip, r4, #20
 80098da:	46ae      	mov	lr, r5
 80098dc:	f04f 0a00 	mov.w	sl, #0
 80098e0:	f8bc b000 	ldrh.w	fp, [ip]
 80098e4:	f8be 7002 	ldrh.w	r7, [lr, #2]
 80098e8:	fb09 770b 	mla	r7, r9, fp, r7
 80098ec:	4457      	add	r7, sl
 80098ee:	b29b      	uxth	r3, r3
 80098f0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80098f4:	f84e 3b04 	str.w	r3, [lr], #4
 80098f8:	f85c 3b04 	ldr.w	r3, [ip], #4
 80098fc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009900:	f8be 3000 	ldrh.w	r3, [lr]
 8009904:	fb09 330a 	mla	r3, r9, sl, r3
 8009908:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800990c:	4562      	cmp	r2, ip
 800990e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009912:	d8e5      	bhi.n	80098e0 <__multiply+0x10c>
 8009914:	9f01      	ldr	r7, [sp, #4]
 8009916:	51eb      	str	r3, [r5, r7]
 8009918:	3504      	adds	r5, #4
 800991a:	e799      	b.n	8009850 <__multiply+0x7c>
 800991c:	3e01      	subs	r6, #1
 800991e:	e79b      	b.n	8009858 <__multiply+0x84>
 8009920:	0800a978 	.word	0x0800a978
 8009924:	0800a989 	.word	0x0800a989

08009928 <__pow5mult>:
 8009928:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800992c:	4615      	mov	r5, r2
 800992e:	f012 0203 	ands.w	r2, r2, #3
 8009932:	4607      	mov	r7, r0
 8009934:	460e      	mov	r6, r1
 8009936:	d007      	beq.n	8009948 <__pow5mult+0x20>
 8009938:	4c25      	ldr	r4, [pc, #148]	@ (80099d0 <__pow5mult+0xa8>)
 800993a:	3a01      	subs	r2, #1
 800993c:	2300      	movs	r3, #0
 800993e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009942:	f7ff fe9f 	bl	8009684 <__multadd>
 8009946:	4606      	mov	r6, r0
 8009948:	10ad      	asrs	r5, r5, #2
 800994a:	d03d      	beq.n	80099c8 <__pow5mult+0xa0>
 800994c:	69fc      	ldr	r4, [r7, #28]
 800994e:	b97c      	cbnz	r4, 8009970 <__pow5mult+0x48>
 8009950:	2010      	movs	r0, #16
 8009952:	f7ff fd7f 	bl	8009454 <malloc>
 8009956:	4602      	mov	r2, r0
 8009958:	61f8      	str	r0, [r7, #28]
 800995a:	b928      	cbnz	r0, 8009968 <__pow5mult+0x40>
 800995c:	4b1d      	ldr	r3, [pc, #116]	@ (80099d4 <__pow5mult+0xac>)
 800995e:	481e      	ldr	r0, [pc, #120]	@ (80099d8 <__pow5mult+0xb0>)
 8009960:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8009964:	f000 fbea 	bl	800a13c <__assert_func>
 8009968:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800996c:	6004      	str	r4, [r0, #0]
 800996e:	60c4      	str	r4, [r0, #12]
 8009970:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8009974:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009978:	b94c      	cbnz	r4, 800998e <__pow5mult+0x66>
 800997a:	f240 2171 	movw	r1, #625	@ 0x271
 800997e:	4638      	mov	r0, r7
 8009980:	f7ff ff12 	bl	80097a8 <__i2b>
 8009984:	2300      	movs	r3, #0
 8009986:	f8c8 0008 	str.w	r0, [r8, #8]
 800998a:	4604      	mov	r4, r0
 800998c:	6003      	str	r3, [r0, #0]
 800998e:	f04f 0900 	mov.w	r9, #0
 8009992:	07eb      	lsls	r3, r5, #31
 8009994:	d50a      	bpl.n	80099ac <__pow5mult+0x84>
 8009996:	4631      	mov	r1, r6
 8009998:	4622      	mov	r2, r4
 800999a:	4638      	mov	r0, r7
 800999c:	f7ff ff1a 	bl	80097d4 <__multiply>
 80099a0:	4631      	mov	r1, r6
 80099a2:	4680      	mov	r8, r0
 80099a4:	4638      	mov	r0, r7
 80099a6:	f7ff fe4b 	bl	8009640 <_Bfree>
 80099aa:	4646      	mov	r6, r8
 80099ac:	106d      	asrs	r5, r5, #1
 80099ae:	d00b      	beq.n	80099c8 <__pow5mult+0xa0>
 80099b0:	6820      	ldr	r0, [r4, #0]
 80099b2:	b938      	cbnz	r0, 80099c4 <__pow5mult+0x9c>
 80099b4:	4622      	mov	r2, r4
 80099b6:	4621      	mov	r1, r4
 80099b8:	4638      	mov	r0, r7
 80099ba:	f7ff ff0b 	bl	80097d4 <__multiply>
 80099be:	6020      	str	r0, [r4, #0]
 80099c0:	f8c0 9000 	str.w	r9, [r0]
 80099c4:	4604      	mov	r4, r0
 80099c6:	e7e4      	b.n	8009992 <__pow5mult+0x6a>
 80099c8:	4630      	mov	r0, r6
 80099ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80099ce:	bf00      	nop
 80099d0:	0800a9e4 	.word	0x0800a9e4
 80099d4:	0800a909 	.word	0x0800a909
 80099d8:	0800a989 	.word	0x0800a989

080099dc <__lshift>:
 80099dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80099e0:	460c      	mov	r4, r1
 80099e2:	6849      	ldr	r1, [r1, #4]
 80099e4:	6923      	ldr	r3, [r4, #16]
 80099e6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80099ea:	68a3      	ldr	r3, [r4, #8]
 80099ec:	4607      	mov	r7, r0
 80099ee:	4691      	mov	r9, r2
 80099f0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80099f4:	f108 0601 	add.w	r6, r8, #1
 80099f8:	42b3      	cmp	r3, r6
 80099fa:	db0b      	blt.n	8009a14 <__lshift+0x38>
 80099fc:	4638      	mov	r0, r7
 80099fe:	f7ff fddf 	bl	80095c0 <_Balloc>
 8009a02:	4605      	mov	r5, r0
 8009a04:	b948      	cbnz	r0, 8009a1a <__lshift+0x3e>
 8009a06:	4602      	mov	r2, r0
 8009a08:	4b28      	ldr	r3, [pc, #160]	@ (8009aac <__lshift+0xd0>)
 8009a0a:	4829      	ldr	r0, [pc, #164]	@ (8009ab0 <__lshift+0xd4>)
 8009a0c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8009a10:	f000 fb94 	bl	800a13c <__assert_func>
 8009a14:	3101      	adds	r1, #1
 8009a16:	005b      	lsls	r3, r3, #1
 8009a18:	e7ee      	b.n	80099f8 <__lshift+0x1c>
 8009a1a:	2300      	movs	r3, #0
 8009a1c:	f100 0114 	add.w	r1, r0, #20
 8009a20:	f100 0210 	add.w	r2, r0, #16
 8009a24:	4618      	mov	r0, r3
 8009a26:	4553      	cmp	r3, sl
 8009a28:	db33      	blt.n	8009a92 <__lshift+0xb6>
 8009a2a:	6920      	ldr	r0, [r4, #16]
 8009a2c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009a30:	f104 0314 	add.w	r3, r4, #20
 8009a34:	f019 091f 	ands.w	r9, r9, #31
 8009a38:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009a3c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009a40:	d02b      	beq.n	8009a9a <__lshift+0xbe>
 8009a42:	f1c9 0e20 	rsb	lr, r9, #32
 8009a46:	468a      	mov	sl, r1
 8009a48:	2200      	movs	r2, #0
 8009a4a:	6818      	ldr	r0, [r3, #0]
 8009a4c:	fa00 f009 	lsl.w	r0, r0, r9
 8009a50:	4310      	orrs	r0, r2
 8009a52:	f84a 0b04 	str.w	r0, [sl], #4
 8009a56:	f853 2b04 	ldr.w	r2, [r3], #4
 8009a5a:	459c      	cmp	ip, r3
 8009a5c:	fa22 f20e 	lsr.w	r2, r2, lr
 8009a60:	d8f3      	bhi.n	8009a4a <__lshift+0x6e>
 8009a62:	ebac 0304 	sub.w	r3, ip, r4
 8009a66:	3b15      	subs	r3, #21
 8009a68:	f023 0303 	bic.w	r3, r3, #3
 8009a6c:	3304      	adds	r3, #4
 8009a6e:	f104 0015 	add.w	r0, r4, #21
 8009a72:	4584      	cmp	ip, r0
 8009a74:	bf38      	it	cc
 8009a76:	2304      	movcc	r3, #4
 8009a78:	50ca      	str	r2, [r1, r3]
 8009a7a:	b10a      	cbz	r2, 8009a80 <__lshift+0xa4>
 8009a7c:	f108 0602 	add.w	r6, r8, #2
 8009a80:	3e01      	subs	r6, #1
 8009a82:	4638      	mov	r0, r7
 8009a84:	612e      	str	r6, [r5, #16]
 8009a86:	4621      	mov	r1, r4
 8009a88:	f7ff fdda 	bl	8009640 <_Bfree>
 8009a8c:	4628      	mov	r0, r5
 8009a8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009a92:	f842 0f04 	str.w	r0, [r2, #4]!
 8009a96:	3301      	adds	r3, #1
 8009a98:	e7c5      	b.n	8009a26 <__lshift+0x4a>
 8009a9a:	3904      	subs	r1, #4
 8009a9c:	f853 2b04 	ldr.w	r2, [r3], #4
 8009aa0:	f841 2f04 	str.w	r2, [r1, #4]!
 8009aa4:	459c      	cmp	ip, r3
 8009aa6:	d8f9      	bhi.n	8009a9c <__lshift+0xc0>
 8009aa8:	e7ea      	b.n	8009a80 <__lshift+0xa4>
 8009aaa:	bf00      	nop
 8009aac:	0800a978 	.word	0x0800a978
 8009ab0:	0800a989 	.word	0x0800a989

08009ab4 <__mcmp>:
 8009ab4:	690a      	ldr	r2, [r1, #16]
 8009ab6:	4603      	mov	r3, r0
 8009ab8:	6900      	ldr	r0, [r0, #16]
 8009aba:	1a80      	subs	r0, r0, r2
 8009abc:	b530      	push	{r4, r5, lr}
 8009abe:	d10e      	bne.n	8009ade <__mcmp+0x2a>
 8009ac0:	3314      	adds	r3, #20
 8009ac2:	3114      	adds	r1, #20
 8009ac4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8009ac8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8009acc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8009ad0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8009ad4:	4295      	cmp	r5, r2
 8009ad6:	d003      	beq.n	8009ae0 <__mcmp+0x2c>
 8009ad8:	d205      	bcs.n	8009ae6 <__mcmp+0x32>
 8009ada:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009ade:	bd30      	pop	{r4, r5, pc}
 8009ae0:	42a3      	cmp	r3, r4
 8009ae2:	d3f3      	bcc.n	8009acc <__mcmp+0x18>
 8009ae4:	e7fb      	b.n	8009ade <__mcmp+0x2a>
 8009ae6:	2001      	movs	r0, #1
 8009ae8:	e7f9      	b.n	8009ade <__mcmp+0x2a>
	...

08009aec <__mdiff>:
 8009aec:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009af0:	4689      	mov	r9, r1
 8009af2:	4606      	mov	r6, r0
 8009af4:	4611      	mov	r1, r2
 8009af6:	4648      	mov	r0, r9
 8009af8:	4614      	mov	r4, r2
 8009afa:	f7ff ffdb 	bl	8009ab4 <__mcmp>
 8009afe:	1e05      	subs	r5, r0, #0
 8009b00:	d112      	bne.n	8009b28 <__mdiff+0x3c>
 8009b02:	4629      	mov	r1, r5
 8009b04:	4630      	mov	r0, r6
 8009b06:	f7ff fd5b 	bl	80095c0 <_Balloc>
 8009b0a:	4602      	mov	r2, r0
 8009b0c:	b928      	cbnz	r0, 8009b1a <__mdiff+0x2e>
 8009b0e:	4b3f      	ldr	r3, [pc, #252]	@ (8009c0c <__mdiff+0x120>)
 8009b10:	f240 2137 	movw	r1, #567	@ 0x237
 8009b14:	483e      	ldr	r0, [pc, #248]	@ (8009c10 <__mdiff+0x124>)
 8009b16:	f000 fb11 	bl	800a13c <__assert_func>
 8009b1a:	2301      	movs	r3, #1
 8009b1c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009b20:	4610      	mov	r0, r2
 8009b22:	b003      	add	sp, #12
 8009b24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b28:	bfbc      	itt	lt
 8009b2a:	464b      	movlt	r3, r9
 8009b2c:	46a1      	movlt	r9, r4
 8009b2e:	4630      	mov	r0, r6
 8009b30:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8009b34:	bfba      	itte	lt
 8009b36:	461c      	movlt	r4, r3
 8009b38:	2501      	movlt	r5, #1
 8009b3a:	2500      	movge	r5, #0
 8009b3c:	f7ff fd40 	bl	80095c0 <_Balloc>
 8009b40:	4602      	mov	r2, r0
 8009b42:	b918      	cbnz	r0, 8009b4c <__mdiff+0x60>
 8009b44:	4b31      	ldr	r3, [pc, #196]	@ (8009c0c <__mdiff+0x120>)
 8009b46:	f240 2145 	movw	r1, #581	@ 0x245
 8009b4a:	e7e3      	b.n	8009b14 <__mdiff+0x28>
 8009b4c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8009b50:	6926      	ldr	r6, [r4, #16]
 8009b52:	60c5      	str	r5, [r0, #12]
 8009b54:	f109 0310 	add.w	r3, r9, #16
 8009b58:	f109 0514 	add.w	r5, r9, #20
 8009b5c:	f104 0e14 	add.w	lr, r4, #20
 8009b60:	f100 0b14 	add.w	fp, r0, #20
 8009b64:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8009b68:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8009b6c:	9301      	str	r3, [sp, #4]
 8009b6e:	46d9      	mov	r9, fp
 8009b70:	f04f 0c00 	mov.w	ip, #0
 8009b74:	9b01      	ldr	r3, [sp, #4]
 8009b76:	f85e 0b04 	ldr.w	r0, [lr], #4
 8009b7a:	f853 af04 	ldr.w	sl, [r3, #4]!
 8009b7e:	9301      	str	r3, [sp, #4]
 8009b80:	fa1f f38a 	uxth.w	r3, sl
 8009b84:	4619      	mov	r1, r3
 8009b86:	b283      	uxth	r3, r0
 8009b88:	1acb      	subs	r3, r1, r3
 8009b8a:	0c00      	lsrs	r0, r0, #16
 8009b8c:	4463      	add	r3, ip
 8009b8e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8009b92:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8009b96:	b29b      	uxth	r3, r3
 8009b98:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8009b9c:	4576      	cmp	r6, lr
 8009b9e:	f849 3b04 	str.w	r3, [r9], #4
 8009ba2:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009ba6:	d8e5      	bhi.n	8009b74 <__mdiff+0x88>
 8009ba8:	1b33      	subs	r3, r6, r4
 8009baa:	3b15      	subs	r3, #21
 8009bac:	f023 0303 	bic.w	r3, r3, #3
 8009bb0:	3415      	adds	r4, #21
 8009bb2:	3304      	adds	r3, #4
 8009bb4:	42a6      	cmp	r6, r4
 8009bb6:	bf38      	it	cc
 8009bb8:	2304      	movcc	r3, #4
 8009bba:	441d      	add	r5, r3
 8009bbc:	445b      	add	r3, fp
 8009bbe:	461e      	mov	r6, r3
 8009bc0:	462c      	mov	r4, r5
 8009bc2:	4544      	cmp	r4, r8
 8009bc4:	d30e      	bcc.n	8009be4 <__mdiff+0xf8>
 8009bc6:	f108 0103 	add.w	r1, r8, #3
 8009bca:	1b49      	subs	r1, r1, r5
 8009bcc:	f021 0103 	bic.w	r1, r1, #3
 8009bd0:	3d03      	subs	r5, #3
 8009bd2:	45a8      	cmp	r8, r5
 8009bd4:	bf38      	it	cc
 8009bd6:	2100      	movcc	r1, #0
 8009bd8:	440b      	add	r3, r1
 8009bda:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009bde:	b191      	cbz	r1, 8009c06 <__mdiff+0x11a>
 8009be0:	6117      	str	r7, [r2, #16]
 8009be2:	e79d      	b.n	8009b20 <__mdiff+0x34>
 8009be4:	f854 1b04 	ldr.w	r1, [r4], #4
 8009be8:	46e6      	mov	lr, ip
 8009bea:	0c08      	lsrs	r0, r1, #16
 8009bec:	fa1c fc81 	uxtah	ip, ip, r1
 8009bf0:	4471      	add	r1, lr
 8009bf2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8009bf6:	b289      	uxth	r1, r1
 8009bf8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8009bfc:	f846 1b04 	str.w	r1, [r6], #4
 8009c00:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009c04:	e7dd      	b.n	8009bc2 <__mdiff+0xd6>
 8009c06:	3f01      	subs	r7, #1
 8009c08:	e7e7      	b.n	8009bda <__mdiff+0xee>
 8009c0a:	bf00      	nop
 8009c0c:	0800a978 	.word	0x0800a978
 8009c10:	0800a989 	.word	0x0800a989

08009c14 <__d2b>:
 8009c14:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009c18:	460f      	mov	r7, r1
 8009c1a:	2101      	movs	r1, #1
 8009c1c:	ec59 8b10 	vmov	r8, r9, d0
 8009c20:	4616      	mov	r6, r2
 8009c22:	f7ff fccd 	bl	80095c0 <_Balloc>
 8009c26:	4604      	mov	r4, r0
 8009c28:	b930      	cbnz	r0, 8009c38 <__d2b+0x24>
 8009c2a:	4602      	mov	r2, r0
 8009c2c:	4b23      	ldr	r3, [pc, #140]	@ (8009cbc <__d2b+0xa8>)
 8009c2e:	4824      	ldr	r0, [pc, #144]	@ (8009cc0 <__d2b+0xac>)
 8009c30:	f240 310f 	movw	r1, #783	@ 0x30f
 8009c34:	f000 fa82 	bl	800a13c <__assert_func>
 8009c38:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8009c3c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009c40:	b10d      	cbz	r5, 8009c46 <__d2b+0x32>
 8009c42:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009c46:	9301      	str	r3, [sp, #4]
 8009c48:	f1b8 0300 	subs.w	r3, r8, #0
 8009c4c:	d023      	beq.n	8009c96 <__d2b+0x82>
 8009c4e:	4668      	mov	r0, sp
 8009c50:	9300      	str	r3, [sp, #0]
 8009c52:	f7ff fd7c 	bl	800974e <__lo0bits>
 8009c56:	e9dd 1200 	ldrd	r1, r2, [sp]
 8009c5a:	b1d0      	cbz	r0, 8009c92 <__d2b+0x7e>
 8009c5c:	f1c0 0320 	rsb	r3, r0, #32
 8009c60:	fa02 f303 	lsl.w	r3, r2, r3
 8009c64:	430b      	orrs	r3, r1
 8009c66:	40c2      	lsrs	r2, r0
 8009c68:	6163      	str	r3, [r4, #20]
 8009c6a:	9201      	str	r2, [sp, #4]
 8009c6c:	9b01      	ldr	r3, [sp, #4]
 8009c6e:	61a3      	str	r3, [r4, #24]
 8009c70:	2b00      	cmp	r3, #0
 8009c72:	bf0c      	ite	eq
 8009c74:	2201      	moveq	r2, #1
 8009c76:	2202      	movne	r2, #2
 8009c78:	6122      	str	r2, [r4, #16]
 8009c7a:	b1a5      	cbz	r5, 8009ca6 <__d2b+0x92>
 8009c7c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8009c80:	4405      	add	r5, r0
 8009c82:	603d      	str	r5, [r7, #0]
 8009c84:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8009c88:	6030      	str	r0, [r6, #0]
 8009c8a:	4620      	mov	r0, r4
 8009c8c:	b003      	add	sp, #12
 8009c8e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009c92:	6161      	str	r1, [r4, #20]
 8009c94:	e7ea      	b.n	8009c6c <__d2b+0x58>
 8009c96:	a801      	add	r0, sp, #4
 8009c98:	f7ff fd59 	bl	800974e <__lo0bits>
 8009c9c:	9b01      	ldr	r3, [sp, #4]
 8009c9e:	6163      	str	r3, [r4, #20]
 8009ca0:	3020      	adds	r0, #32
 8009ca2:	2201      	movs	r2, #1
 8009ca4:	e7e8      	b.n	8009c78 <__d2b+0x64>
 8009ca6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009caa:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8009cae:	6038      	str	r0, [r7, #0]
 8009cb0:	6918      	ldr	r0, [r3, #16]
 8009cb2:	f7ff fd2d 	bl	8009710 <__hi0bits>
 8009cb6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009cba:	e7e5      	b.n	8009c88 <__d2b+0x74>
 8009cbc:	0800a978 	.word	0x0800a978
 8009cc0:	0800a989 	.word	0x0800a989

08009cc4 <__ssputs_r>:
 8009cc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009cc8:	688e      	ldr	r6, [r1, #8]
 8009cca:	461f      	mov	r7, r3
 8009ccc:	42be      	cmp	r6, r7
 8009cce:	680b      	ldr	r3, [r1, #0]
 8009cd0:	4682      	mov	sl, r0
 8009cd2:	460c      	mov	r4, r1
 8009cd4:	4690      	mov	r8, r2
 8009cd6:	d82d      	bhi.n	8009d34 <__ssputs_r+0x70>
 8009cd8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009cdc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8009ce0:	d026      	beq.n	8009d30 <__ssputs_r+0x6c>
 8009ce2:	6965      	ldr	r5, [r4, #20]
 8009ce4:	6909      	ldr	r1, [r1, #16]
 8009ce6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009cea:	eba3 0901 	sub.w	r9, r3, r1
 8009cee:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009cf2:	1c7b      	adds	r3, r7, #1
 8009cf4:	444b      	add	r3, r9
 8009cf6:	106d      	asrs	r5, r5, #1
 8009cf8:	429d      	cmp	r5, r3
 8009cfa:	bf38      	it	cc
 8009cfc:	461d      	movcc	r5, r3
 8009cfe:	0553      	lsls	r3, r2, #21
 8009d00:	d527      	bpl.n	8009d52 <__ssputs_r+0x8e>
 8009d02:	4629      	mov	r1, r5
 8009d04:	f7ff fbd0 	bl	80094a8 <_malloc_r>
 8009d08:	4606      	mov	r6, r0
 8009d0a:	b360      	cbz	r0, 8009d66 <__ssputs_r+0xa2>
 8009d0c:	6921      	ldr	r1, [r4, #16]
 8009d0e:	464a      	mov	r2, r9
 8009d10:	f000 fa06 	bl	800a120 <memcpy>
 8009d14:	89a3      	ldrh	r3, [r4, #12]
 8009d16:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8009d1a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009d1e:	81a3      	strh	r3, [r4, #12]
 8009d20:	6126      	str	r6, [r4, #16]
 8009d22:	6165      	str	r5, [r4, #20]
 8009d24:	444e      	add	r6, r9
 8009d26:	eba5 0509 	sub.w	r5, r5, r9
 8009d2a:	6026      	str	r6, [r4, #0]
 8009d2c:	60a5      	str	r5, [r4, #8]
 8009d2e:	463e      	mov	r6, r7
 8009d30:	42be      	cmp	r6, r7
 8009d32:	d900      	bls.n	8009d36 <__ssputs_r+0x72>
 8009d34:	463e      	mov	r6, r7
 8009d36:	6820      	ldr	r0, [r4, #0]
 8009d38:	4632      	mov	r2, r6
 8009d3a:	4641      	mov	r1, r8
 8009d3c:	f000 f9c6 	bl	800a0cc <memmove>
 8009d40:	68a3      	ldr	r3, [r4, #8]
 8009d42:	1b9b      	subs	r3, r3, r6
 8009d44:	60a3      	str	r3, [r4, #8]
 8009d46:	6823      	ldr	r3, [r4, #0]
 8009d48:	4433      	add	r3, r6
 8009d4a:	6023      	str	r3, [r4, #0]
 8009d4c:	2000      	movs	r0, #0
 8009d4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009d52:	462a      	mov	r2, r5
 8009d54:	f000 fa36 	bl	800a1c4 <_realloc_r>
 8009d58:	4606      	mov	r6, r0
 8009d5a:	2800      	cmp	r0, #0
 8009d5c:	d1e0      	bne.n	8009d20 <__ssputs_r+0x5c>
 8009d5e:	6921      	ldr	r1, [r4, #16]
 8009d60:	4650      	mov	r0, sl
 8009d62:	f7ff fb2d 	bl	80093c0 <_free_r>
 8009d66:	230c      	movs	r3, #12
 8009d68:	f8ca 3000 	str.w	r3, [sl]
 8009d6c:	89a3      	ldrh	r3, [r4, #12]
 8009d6e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009d72:	81a3      	strh	r3, [r4, #12]
 8009d74:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009d78:	e7e9      	b.n	8009d4e <__ssputs_r+0x8a>
	...

08009d7c <_svfiprintf_r>:
 8009d7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d80:	4698      	mov	r8, r3
 8009d82:	898b      	ldrh	r3, [r1, #12]
 8009d84:	061b      	lsls	r3, r3, #24
 8009d86:	b09d      	sub	sp, #116	@ 0x74
 8009d88:	4607      	mov	r7, r0
 8009d8a:	460d      	mov	r5, r1
 8009d8c:	4614      	mov	r4, r2
 8009d8e:	d510      	bpl.n	8009db2 <_svfiprintf_r+0x36>
 8009d90:	690b      	ldr	r3, [r1, #16]
 8009d92:	b973      	cbnz	r3, 8009db2 <_svfiprintf_r+0x36>
 8009d94:	2140      	movs	r1, #64	@ 0x40
 8009d96:	f7ff fb87 	bl	80094a8 <_malloc_r>
 8009d9a:	6028      	str	r0, [r5, #0]
 8009d9c:	6128      	str	r0, [r5, #16]
 8009d9e:	b930      	cbnz	r0, 8009dae <_svfiprintf_r+0x32>
 8009da0:	230c      	movs	r3, #12
 8009da2:	603b      	str	r3, [r7, #0]
 8009da4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009da8:	b01d      	add	sp, #116	@ 0x74
 8009daa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009dae:	2340      	movs	r3, #64	@ 0x40
 8009db0:	616b      	str	r3, [r5, #20]
 8009db2:	2300      	movs	r3, #0
 8009db4:	9309      	str	r3, [sp, #36]	@ 0x24
 8009db6:	2320      	movs	r3, #32
 8009db8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009dbc:	f8cd 800c 	str.w	r8, [sp, #12]
 8009dc0:	2330      	movs	r3, #48	@ 0x30
 8009dc2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8009f60 <_svfiprintf_r+0x1e4>
 8009dc6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009dca:	f04f 0901 	mov.w	r9, #1
 8009dce:	4623      	mov	r3, r4
 8009dd0:	469a      	mov	sl, r3
 8009dd2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009dd6:	b10a      	cbz	r2, 8009ddc <_svfiprintf_r+0x60>
 8009dd8:	2a25      	cmp	r2, #37	@ 0x25
 8009dda:	d1f9      	bne.n	8009dd0 <_svfiprintf_r+0x54>
 8009ddc:	ebba 0b04 	subs.w	fp, sl, r4
 8009de0:	d00b      	beq.n	8009dfa <_svfiprintf_r+0x7e>
 8009de2:	465b      	mov	r3, fp
 8009de4:	4622      	mov	r2, r4
 8009de6:	4629      	mov	r1, r5
 8009de8:	4638      	mov	r0, r7
 8009dea:	f7ff ff6b 	bl	8009cc4 <__ssputs_r>
 8009dee:	3001      	adds	r0, #1
 8009df0:	f000 80a7 	beq.w	8009f42 <_svfiprintf_r+0x1c6>
 8009df4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009df6:	445a      	add	r2, fp
 8009df8:	9209      	str	r2, [sp, #36]	@ 0x24
 8009dfa:	f89a 3000 	ldrb.w	r3, [sl]
 8009dfe:	2b00      	cmp	r3, #0
 8009e00:	f000 809f 	beq.w	8009f42 <_svfiprintf_r+0x1c6>
 8009e04:	2300      	movs	r3, #0
 8009e06:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009e0a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009e0e:	f10a 0a01 	add.w	sl, sl, #1
 8009e12:	9304      	str	r3, [sp, #16]
 8009e14:	9307      	str	r3, [sp, #28]
 8009e16:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009e1a:	931a      	str	r3, [sp, #104]	@ 0x68
 8009e1c:	4654      	mov	r4, sl
 8009e1e:	2205      	movs	r2, #5
 8009e20:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009e24:	484e      	ldr	r0, [pc, #312]	@ (8009f60 <_svfiprintf_r+0x1e4>)
 8009e26:	f7f6 f9d3 	bl	80001d0 <memchr>
 8009e2a:	9a04      	ldr	r2, [sp, #16]
 8009e2c:	b9d8      	cbnz	r0, 8009e66 <_svfiprintf_r+0xea>
 8009e2e:	06d0      	lsls	r0, r2, #27
 8009e30:	bf44      	itt	mi
 8009e32:	2320      	movmi	r3, #32
 8009e34:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009e38:	0711      	lsls	r1, r2, #28
 8009e3a:	bf44      	itt	mi
 8009e3c:	232b      	movmi	r3, #43	@ 0x2b
 8009e3e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009e42:	f89a 3000 	ldrb.w	r3, [sl]
 8009e46:	2b2a      	cmp	r3, #42	@ 0x2a
 8009e48:	d015      	beq.n	8009e76 <_svfiprintf_r+0xfa>
 8009e4a:	9a07      	ldr	r2, [sp, #28]
 8009e4c:	4654      	mov	r4, sl
 8009e4e:	2000      	movs	r0, #0
 8009e50:	f04f 0c0a 	mov.w	ip, #10
 8009e54:	4621      	mov	r1, r4
 8009e56:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009e5a:	3b30      	subs	r3, #48	@ 0x30
 8009e5c:	2b09      	cmp	r3, #9
 8009e5e:	d94b      	bls.n	8009ef8 <_svfiprintf_r+0x17c>
 8009e60:	b1b0      	cbz	r0, 8009e90 <_svfiprintf_r+0x114>
 8009e62:	9207      	str	r2, [sp, #28]
 8009e64:	e014      	b.n	8009e90 <_svfiprintf_r+0x114>
 8009e66:	eba0 0308 	sub.w	r3, r0, r8
 8009e6a:	fa09 f303 	lsl.w	r3, r9, r3
 8009e6e:	4313      	orrs	r3, r2
 8009e70:	9304      	str	r3, [sp, #16]
 8009e72:	46a2      	mov	sl, r4
 8009e74:	e7d2      	b.n	8009e1c <_svfiprintf_r+0xa0>
 8009e76:	9b03      	ldr	r3, [sp, #12]
 8009e78:	1d19      	adds	r1, r3, #4
 8009e7a:	681b      	ldr	r3, [r3, #0]
 8009e7c:	9103      	str	r1, [sp, #12]
 8009e7e:	2b00      	cmp	r3, #0
 8009e80:	bfbb      	ittet	lt
 8009e82:	425b      	neglt	r3, r3
 8009e84:	f042 0202 	orrlt.w	r2, r2, #2
 8009e88:	9307      	strge	r3, [sp, #28]
 8009e8a:	9307      	strlt	r3, [sp, #28]
 8009e8c:	bfb8      	it	lt
 8009e8e:	9204      	strlt	r2, [sp, #16]
 8009e90:	7823      	ldrb	r3, [r4, #0]
 8009e92:	2b2e      	cmp	r3, #46	@ 0x2e
 8009e94:	d10a      	bne.n	8009eac <_svfiprintf_r+0x130>
 8009e96:	7863      	ldrb	r3, [r4, #1]
 8009e98:	2b2a      	cmp	r3, #42	@ 0x2a
 8009e9a:	d132      	bne.n	8009f02 <_svfiprintf_r+0x186>
 8009e9c:	9b03      	ldr	r3, [sp, #12]
 8009e9e:	1d1a      	adds	r2, r3, #4
 8009ea0:	681b      	ldr	r3, [r3, #0]
 8009ea2:	9203      	str	r2, [sp, #12]
 8009ea4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009ea8:	3402      	adds	r4, #2
 8009eaa:	9305      	str	r3, [sp, #20]
 8009eac:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8009f70 <_svfiprintf_r+0x1f4>
 8009eb0:	7821      	ldrb	r1, [r4, #0]
 8009eb2:	2203      	movs	r2, #3
 8009eb4:	4650      	mov	r0, sl
 8009eb6:	f7f6 f98b 	bl	80001d0 <memchr>
 8009eba:	b138      	cbz	r0, 8009ecc <_svfiprintf_r+0x150>
 8009ebc:	9b04      	ldr	r3, [sp, #16]
 8009ebe:	eba0 000a 	sub.w	r0, r0, sl
 8009ec2:	2240      	movs	r2, #64	@ 0x40
 8009ec4:	4082      	lsls	r2, r0
 8009ec6:	4313      	orrs	r3, r2
 8009ec8:	3401      	adds	r4, #1
 8009eca:	9304      	str	r3, [sp, #16]
 8009ecc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009ed0:	4824      	ldr	r0, [pc, #144]	@ (8009f64 <_svfiprintf_r+0x1e8>)
 8009ed2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009ed6:	2206      	movs	r2, #6
 8009ed8:	f7f6 f97a 	bl	80001d0 <memchr>
 8009edc:	2800      	cmp	r0, #0
 8009ede:	d036      	beq.n	8009f4e <_svfiprintf_r+0x1d2>
 8009ee0:	4b21      	ldr	r3, [pc, #132]	@ (8009f68 <_svfiprintf_r+0x1ec>)
 8009ee2:	bb1b      	cbnz	r3, 8009f2c <_svfiprintf_r+0x1b0>
 8009ee4:	9b03      	ldr	r3, [sp, #12]
 8009ee6:	3307      	adds	r3, #7
 8009ee8:	f023 0307 	bic.w	r3, r3, #7
 8009eec:	3308      	adds	r3, #8
 8009eee:	9303      	str	r3, [sp, #12]
 8009ef0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009ef2:	4433      	add	r3, r6
 8009ef4:	9309      	str	r3, [sp, #36]	@ 0x24
 8009ef6:	e76a      	b.n	8009dce <_svfiprintf_r+0x52>
 8009ef8:	fb0c 3202 	mla	r2, ip, r2, r3
 8009efc:	460c      	mov	r4, r1
 8009efe:	2001      	movs	r0, #1
 8009f00:	e7a8      	b.n	8009e54 <_svfiprintf_r+0xd8>
 8009f02:	2300      	movs	r3, #0
 8009f04:	3401      	adds	r4, #1
 8009f06:	9305      	str	r3, [sp, #20]
 8009f08:	4619      	mov	r1, r3
 8009f0a:	f04f 0c0a 	mov.w	ip, #10
 8009f0e:	4620      	mov	r0, r4
 8009f10:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009f14:	3a30      	subs	r2, #48	@ 0x30
 8009f16:	2a09      	cmp	r2, #9
 8009f18:	d903      	bls.n	8009f22 <_svfiprintf_r+0x1a6>
 8009f1a:	2b00      	cmp	r3, #0
 8009f1c:	d0c6      	beq.n	8009eac <_svfiprintf_r+0x130>
 8009f1e:	9105      	str	r1, [sp, #20]
 8009f20:	e7c4      	b.n	8009eac <_svfiprintf_r+0x130>
 8009f22:	fb0c 2101 	mla	r1, ip, r1, r2
 8009f26:	4604      	mov	r4, r0
 8009f28:	2301      	movs	r3, #1
 8009f2a:	e7f0      	b.n	8009f0e <_svfiprintf_r+0x192>
 8009f2c:	ab03      	add	r3, sp, #12
 8009f2e:	9300      	str	r3, [sp, #0]
 8009f30:	462a      	mov	r2, r5
 8009f32:	4b0e      	ldr	r3, [pc, #56]	@ (8009f6c <_svfiprintf_r+0x1f0>)
 8009f34:	a904      	add	r1, sp, #16
 8009f36:	4638      	mov	r0, r7
 8009f38:	f7fd fe4c 	bl	8007bd4 <_printf_float>
 8009f3c:	1c42      	adds	r2, r0, #1
 8009f3e:	4606      	mov	r6, r0
 8009f40:	d1d6      	bne.n	8009ef0 <_svfiprintf_r+0x174>
 8009f42:	89ab      	ldrh	r3, [r5, #12]
 8009f44:	065b      	lsls	r3, r3, #25
 8009f46:	f53f af2d 	bmi.w	8009da4 <_svfiprintf_r+0x28>
 8009f4a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009f4c:	e72c      	b.n	8009da8 <_svfiprintf_r+0x2c>
 8009f4e:	ab03      	add	r3, sp, #12
 8009f50:	9300      	str	r3, [sp, #0]
 8009f52:	462a      	mov	r2, r5
 8009f54:	4b05      	ldr	r3, [pc, #20]	@ (8009f6c <_svfiprintf_r+0x1f0>)
 8009f56:	a904      	add	r1, sp, #16
 8009f58:	4638      	mov	r0, r7
 8009f5a:	f7fe f8d3 	bl	8008104 <_printf_i>
 8009f5e:	e7ed      	b.n	8009f3c <_svfiprintf_r+0x1c0>
 8009f60:	0800aae0 	.word	0x0800aae0
 8009f64:	0800aaea 	.word	0x0800aaea
 8009f68:	08007bd5 	.word	0x08007bd5
 8009f6c:	08009cc5 	.word	0x08009cc5
 8009f70:	0800aae6 	.word	0x0800aae6

08009f74 <__sflush_r>:
 8009f74:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009f78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009f7c:	0716      	lsls	r6, r2, #28
 8009f7e:	4605      	mov	r5, r0
 8009f80:	460c      	mov	r4, r1
 8009f82:	d454      	bmi.n	800a02e <__sflush_r+0xba>
 8009f84:	684b      	ldr	r3, [r1, #4]
 8009f86:	2b00      	cmp	r3, #0
 8009f88:	dc02      	bgt.n	8009f90 <__sflush_r+0x1c>
 8009f8a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8009f8c:	2b00      	cmp	r3, #0
 8009f8e:	dd48      	ble.n	800a022 <__sflush_r+0xae>
 8009f90:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009f92:	2e00      	cmp	r6, #0
 8009f94:	d045      	beq.n	800a022 <__sflush_r+0xae>
 8009f96:	2300      	movs	r3, #0
 8009f98:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8009f9c:	682f      	ldr	r7, [r5, #0]
 8009f9e:	6a21      	ldr	r1, [r4, #32]
 8009fa0:	602b      	str	r3, [r5, #0]
 8009fa2:	d030      	beq.n	800a006 <__sflush_r+0x92>
 8009fa4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8009fa6:	89a3      	ldrh	r3, [r4, #12]
 8009fa8:	0759      	lsls	r1, r3, #29
 8009faa:	d505      	bpl.n	8009fb8 <__sflush_r+0x44>
 8009fac:	6863      	ldr	r3, [r4, #4]
 8009fae:	1ad2      	subs	r2, r2, r3
 8009fb0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8009fb2:	b10b      	cbz	r3, 8009fb8 <__sflush_r+0x44>
 8009fb4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8009fb6:	1ad2      	subs	r2, r2, r3
 8009fb8:	2300      	movs	r3, #0
 8009fba:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009fbc:	6a21      	ldr	r1, [r4, #32]
 8009fbe:	4628      	mov	r0, r5
 8009fc0:	47b0      	blx	r6
 8009fc2:	1c43      	adds	r3, r0, #1
 8009fc4:	89a3      	ldrh	r3, [r4, #12]
 8009fc6:	d106      	bne.n	8009fd6 <__sflush_r+0x62>
 8009fc8:	6829      	ldr	r1, [r5, #0]
 8009fca:	291d      	cmp	r1, #29
 8009fcc:	d82b      	bhi.n	800a026 <__sflush_r+0xb2>
 8009fce:	4a2a      	ldr	r2, [pc, #168]	@ (800a078 <__sflush_r+0x104>)
 8009fd0:	410a      	asrs	r2, r1
 8009fd2:	07d6      	lsls	r6, r2, #31
 8009fd4:	d427      	bmi.n	800a026 <__sflush_r+0xb2>
 8009fd6:	2200      	movs	r2, #0
 8009fd8:	6062      	str	r2, [r4, #4]
 8009fda:	04d9      	lsls	r1, r3, #19
 8009fdc:	6922      	ldr	r2, [r4, #16]
 8009fde:	6022      	str	r2, [r4, #0]
 8009fe0:	d504      	bpl.n	8009fec <__sflush_r+0x78>
 8009fe2:	1c42      	adds	r2, r0, #1
 8009fe4:	d101      	bne.n	8009fea <__sflush_r+0x76>
 8009fe6:	682b      	ldr	r3, [r5, #0]
 8009fe8:	b903      	cbnz	r3, 8009fec <__sflush_r+0x78>
 8009fea:	6560      	str	r0, [r4, #84]	@ 0x54
 8009fec:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009fee:	602f      	str	r7, [r5, #0]
 8009ff0:	b1b9      	cbz	r1, 800a022 <__sflush_r+0xae>
 8009ff2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009ff6:	4299      	cmp	r1, r3
 8009ff8:	d002      	beq.n	800a000 <__sflush_r+0x8c>
 8009ffa:	4628      	mov	r0, r5
 8009ffc:	f7ff f9e0 	bl	80093c0 <_free_r>
 800a000:	2300      	movs	r3, #0
 800a002:	6363      	str	r3, [r4, #52]	@ 0x34
 800a004:	e00d      	b.n	800a022 <__sflush_r+0xae>
 800a006:	2301      	movs	r3, #1
 800a008:	4628      	mov	r0, r5
 800a00a:	47b0      	blx	r6
 800a00c:	4602      	mov	r2, r0
 800a00e:	1c50      	adds	r0, r2, #1
 800a010:	d1c9      	bne.n	8009fa6 <__sflush_r+0x32>
 800a012:	682b      	ldr	r3, [r5, #0]
 800a014:	2b00      	cmp	r3, #0
 800a016:	d0c6      	beq.n	8009fa6 <__sflush_r+0x32>
 800a018:	2b1d      	cmp	r3, #29
 800a01a:	d001      	beq.n	800a020 <__sflush_r+0xac>
 800a01c:	2b16      	cmp	r3, #22
 800a01e:	d11e      	bne.n	800a05e <__sflush_r+0xea>
 800a020:	602f      	str	r7, [r5, #0]
 800a022:	2000      	movs	r0, #0
 800a024:	e022      	b.n	800a06c <__sflush_r+0xf8>
 800a026:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a02a:	b21b      	sxth	r3, r3
 800a02c:	e01b      	b.n	800a066 <__sflush_r+0xf2>
 800a02e:	690f      	ldr	r7, [r1, #16]
 800a030:	2f00      	cmp	r7, #0
 800a032:	d0f6      	beq.n	800a022 <__sflush_r+0xae>
 800a034:	0793      	lsls	r3, r2, #30
 800a036:	680e      	ldr	r6, [r1, #0]
 800a038:	bf08      	it	eq
 800a03a:	694b      	ldreq	r3, [r1, #20]
 800a03c:	600f      	str	r7, [r1, #0]
 800a03e:	bf18      	it	ne
 800a040:	2300      	movne	r3, #0
 800a042:	eba6 0807 	sub.w	r8, r6, r7
 800a046:	608b      	str	r3, [r1, #8]
 800a048:	f1b8 0f00 	cmp.w	r8, #0
 800a04c:	dde9      	ble.n	800a022 <__sflush_r+0xae>
 800a04e:	6a21      	ldr	r1, [r4, #32]
 800a050:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800a052:	4643      	mov	r3, r8
 800a054:	463a      	mov	r2, r7
 800a056:	4628      	mov	r0, r5
 800a058:	47b0      	blx	r6
 800a05a:	2800      	cmp	r0, #0
 800a05c:	dc08      	bgt.n	800a070 <__sflush_r+0xfc>
 800a05e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a062:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a066:	81a3      	strh	r3, [r4, #12]
 800a068:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a06c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a070:	4407      	add	r7, r0
 800a072:	eba8 0800 	sub.w	r8, r8, r0
 800a076:	e7e7      	b.n	800a048 <__sflush_r+0xd4>
 800a078:	dfbffffe 	.word	0xdfbffffe

0800a07c <_fflush_r>:
 800a07c:	b538      	push	{r3, r4, r5, lr}
 800a07e:	690b      	ldr	r3, [r1, #16]
 800a080:	4605      	mov	r5, r0
 800a082:	460c      	mov	r4, r1
 800a084:	b913      	cbnz	r3, 800a08c <_fflush_r+0x10>
 800a086:	2500      	movs	r5, #0
 800a088:	4628      	mov	r0, r5
 800a08a:	bd38      	pop	{r3, r4, r5, pc}
 800a08c:	b118      	cbz	r0, 800a096 <_fflush_r+0x1a>
 800a08e:	6a03      	ldr	r3, [r0, #32]
 800a090:	b90b      	cbnz	r3, 800a096 <_fflush_r+0x1a>
 800a092:	f7fe f9e3 	bl	800845c <__sinit>
 800a096:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a09a:	2b00      	cmp	r3, #0
 800a09c:	d0f3      	beq.n	800a086 <_fflush_r+0xa>
 800a09e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800a0a0:	07d0      	lsls	r0, r2, #31
 800a0a2:	d404      	bmi.n	800a0ae <_fflush_r+0x32>
 800a0a4:	0599      	lsls	r1, r3, #22
 800a0a6:	d402      	bmi.n	800a0ae <_fflush_r+0x32>
 800a0a8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a0aa:	f7fe fb38 	bl	800871e <__retarget_lock_acquire_recursive>
 800a0ae:	4628      	mov	r0, r5
 800a0b0:	4621      	mov	r1, r4
 800a0b2:	f7ff ff5f 	bl	8009f74 <__sflush_r>
 800a0b6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a0b8:	07da      	lsls	r2, r3, #31
 800a0ba:	4605      	mov	r5, r0
 800a0bc:	d4e4      	bmi.n	800a088 <_fflush_r+0xc>
 800a0be:	89a3      	ldrh	r3, [r4, #12]
 800a0c0:	059b      	lsls	r3, r3, #22
 800a0c2:	d4e1      	bmi.n	800a088 <_fflush_r+0xc>
 800a0c4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a0c6:	f7fe fb2b 	bl	8008720 <__retarget_lock_release_recursive>
 800a0ca:	e7dd      	b.n	800a088 <_fflush_r+0xc>

0800a0cc <memmove>:
 800a0cc:	4288      	cmp	r0, r1
 800a0ce:	b510      	push	{r4, lr}
 800a0d0:	eb01 0402 	add.w	r4, r1, r2
 800a0d4:	d902      	bls.n	800a0dc <memmove+0x10>
 800a0d6:	4284      	cmp	r4, r0
 800a0d8:	4623      	mov	r3, r4
 800a0da:	d807      	bhi.n	800a0ec <memmove+0x20>
 800a0dc:	1e43      	subs	r3, r0, #1
 800a0de:	42a1      	cmp	r1, r4
 800a0e0:	d008      	beq.n	800a0f4 <memmove+0x28>
 800a0e2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a0e6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a0ea:	e7f8      	b.n	800a0de <memmove+0x12>
 800a0ec:	4402      	add	r2, r0
 800a0ee:	4601      	mov	r1, r0
 800a0f0:	428a      	cmp	r2, r1
 800a0f2:	d100      	bne.n	800a0f6 <memmove+0x2a>
 800a0f4:	bd10      	pop	{r4, pc}
 800a0f6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a0fa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a0fe:	e7f7      	b.n	800a0f0 <memmove+0x24>

0800a100 <_sbrk_r>:
 800a100:	b538      	push	{r3, r4, r5, lr}
 800a102:	4d06      	ldr	r5, [pc, #24]	@ (800a11c <_sbrk_r+0x1c>)
 800a104:	2300      	movs	r3, #0
 800a106:	4604      	mov	r4, r0
 800a108:	4608      	mov	r0, r1
 800a10a:	602b      	str	r3, [r5, #0]
 800a10c:	f7f7 fdc0 	bl	8001c90 <_sbrk>
 800a110:	1c43      	adds	r3, r0, #1
 800a112:	d102      	bne.n	800a11a <_sbrk_r+0x1a>
 800a114:	682b      	ldr	r3, [r5, #0]
 800a116:	b103      	cbz	r3, 800a11a <_sbrk_r+0x1a>
 800a118:	6023      	str	r3, [r4, #0]
 800a11a:	bd38      	pop	{r3, r4, r5, pc}
 800a11c:	20000bd0 	.word	0x20000bd0

0800a120 <memcpy>:
 800a120:	440a      	add	r2, r1
 800a122:	4291      	cmp	r1, r2
 800a124:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800a128:	d100      	bne.n	800a12c <memcpy+0xc>
 800a12a:	4770      	bx	lr
 800a12c:	b510      	push	{r4, lr}
 800a12e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a132:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a136:	4291      	cmp	r1, r2
 800a138:	d1f9      	bne.n	800a12e <memcpy+0xe>
 800a13a:	bd10      	pop	{r4, pc}

0800a13c <__assert_func>:
 800a13c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a13e:	4614      	mov	r4, r2
 800a140:	461a      	mov	r2, r3
 800a142:	4b09      	ldr	r3, [pc, #36]	@ (800a168 <__assert_func+0x2c>)
 800a144:	681b      	ldr	r3, [r3, #0]
 800a146:	4605      	mov	r5, r0
 800a148:	68d8      	ldr	r0, [r3, #12]
 800a14a:	b954      	cbnz	r4, 800a162 <__assert_func+0x26>
 800a14c:	4b07      	ldr	r3, [pc, #28]	@ (800a16c <__assert_func+0x30>)
 800a14e:	461c      	mov	r4, r3
 800a150:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a154:	9100      	str	r1, [sp, #0]
 800a156:	462b      	mov	r3, r5
 800a158:	4905      	ldr	r1, [pc, #20]	@ (800a170 <__assert_func+0x34>)
 800a15a:	f000 f86f 	bl	800a23c <fiprintf>
 800a15e:	f000 f87f 	bl	800a260 <abort>
 800a162:	4b04      	ldr	r3, [pc, #16]	@ (800a174 <__assert_func+0x38>)
 800a164:	e7f4      	b.n	800a150 <__assert_func+0x14>
 800a166:	bf00      	nop
 800a168:	2000001c 	.word	0x2000001c
 800a16c:	0800ab36 	.word	0x0800ab36
 800a170:	0800ab08 	.word	0x0800ab08
 800a174:	0800aafb 	.word	0x0800aafb

0800a178 <_calloc_r>:
 800a178:	b570      	push	{r4, r5, r6, lr}
 800a17a:	fba1 5402 	umull	r5, r4, r1, r2
 800a17e:	b93c      	cbnz	r4, 800a190 <_calloc_r+0x18>
 800a180:	4629      	mov	r1, r5
 800a182:	f7ff f991 	bl	80094a8 <_malloc_r>
 800a186:	4606      	mov	r6, r0
 800a188:	b928      	cbnz	r0, 800a196 <_calloc_r+0x1e>
 800a18a:	2600      	movs	r6, #0
 800a18c:	4630      	mov	r0, r6
 800a18e:	bd70      	pop	{r4, r5, r6, pc}
 800a190:	220c      	movs	r2, #12
 800a192:	6002      	str	r2, [r0, #0]
 800a194:	e7f9      	b.n	800a18a <_calloc_r+0x12>
 800a196:	462a      	mov	r2, r5
 800a198:	4621      	mov	r1, r4
 800a19a:	f7fe fa2c 	bl	80085f6 <memset>
 800a19e:	e7f5      	b.n	800a18c <_calloc_r+0x14>

0800a1a0 <__ascii_mbtowc>:
 800a1a0:	b082      	sub	sp, #8
 800a1a2:	b901      	cbnz	r1, 800a1a6 <__ascii_mbtowc+0x6>
 800a1a4:	a901      	add	r1, sp, #4
 800a1a6:	b142      	cbz	r2, 800a1ba <__ascii_mbtowc+0x1a>
 800a1a8:	b14b      	cbz	r3, 800a1be <__ascii_mbtowc+0x1e>
 800a1aa:	7813      	ldrb	r3, [r2, #0]
 800a1ac:	600b      	str	r3, [r1, #0]
 800a1ae:	7812      	ldrb	r2, [r2, #0]
 800a1b0:	1e10      	subs	r0, r2, #0
 800a1b2:	bf18      	it	ne
 800a1b4:	2001      	movne	r0, #1
 800a1b6:	b002      	add	sp, #8
 800a1b8:	4770      	bx	lr
 800a1ba:	4610      	mov	r0, r2
 800a1bc:	e7fb      	b.n	800a1b6 <__ascii_mbtowc+0x16>
 800a1be:	f06f 0001 	mvn.w	r0, #1
 800a1c2:	e7f8      	b.n	800a1b6 <__ascii_mbtowc+0x16>

0800a1c4 <_realloc_r>:
 800a1c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a1c8:	4680      	mov	r8, r0
 800a1ca:	4615      	mov	r5, r2
 800a1cc:	460c      	mov	r4, r1
 800a1ce:	b921      	cbnz	r1, 800a1da <_realloc_r+0x16>
 800a1d0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a1d4:	4611      	mov	r1, r2
 800a1d6:	f7ff b967 	b.w	80094a8 <_malloc_r>
 800a1da:	b92a      	cbnz	r2, 800a1e8 <_realloc_r+0x24>
 800a1dc:	f7ff f8f0 	bl	80093c0 <_free_r>
 800a1e0:	2400      	movs	r4, #0
 800a1e2:	4620      	mov	r0, r4
 800a1e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a1e8:	f000 f841 	bl	800a26e <_malloc_usable_size_r>
 800a1ec:	4285      	cmp	r5, r0
 800a1ee:	4606      	mov	r6, r0
 800a1f0:	d802      	bhi.n	800a1f8 <_realloc_r+0x34>
 800a1f2:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800a1f6:	d8f4      	bhi.n	800a1e2 <_realloc_r+0x1e>
 800a1f8:	4629      	mov	r1, r5
 800a1fa:	4640      	mov	r0, r8
 800a1fc:	f7ff f954 	bl	80094a8 <_malloc_r>
 800a200:	4607      	mov	r7, r0
 800a202:	2800      	cmp	r0, #0
 800a204:	d0ec      	beq.n	800a1e0 <_realloc_r+0x1c>
 800a206:	42b5      	cmp	r5, r6
 800a208:	462a      	mov	r2, r5
 800a20a:	4621      	mov	r1, r4
 800a20c:	bf28      	it	cs
 800a20e:	4632      	movcs	r2, r6
 800a210:	f7ff ff86 	bl	800a120 <memcpy>
 800a214:	4621      	mov	r1, r4
 800a216:	4640      	mov	r0, r8
 800a218:	f7ff f8d2 	bl	80093c0 <_free_r>
 800a21c:	463c      	mov	r4, r7
 800a21e:	e7e0      	b.n	800a1e2 <_realloc_r+0x1e>

0800a220 <__ascii_wctomb>:
 800a220:	4603      	mov	r3, r0
 800a222:	4608      	mov	r0, r1
 800a224:	b141      	cbz	r1, 800a238 <__ascii_wctomb+0x18>
 800a226:	2aff      	cmp	r2, #255	@ 0xff
 800a228:	d904      	bls.n	800a234 <__ascii_wctomb+0x14>
 800a22a:	228a      	movs	r2, #138	@ 0x8a
 800a22c:	601a      	str	r2, [r3, #0]
 800a22e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a232:	4770      	bx	lr
 800a234:	700a      	strb	r2, [r1, #0]
 800a236:	2001      	movs	r0, #1
 800a238:	4770      	bx	lr
	...

0800a23c <fiprintf>:
 800a23c:	b40e      	push	{r1, r2, r3}
 800a23e:	b503      	push	{r0, r1, lr}
 800a240:	4601      	mov	r1, r0
 800a242:	ab03      	add	r3, sp, #12
 800a244:	4805      	ldr	r0, [pc, #20]	@ (800a25c <fiprintf+0x20>)
 800a246:	f853 2b04 	ldr.w	r2, [r3], #4
 800a24a:	6800      	ldr	r0, [r0, #0]
 800a24c:	9301      	str	r3, [sp, #4]
 800a24e:	f000 f83f 	bl	800a2d0 <_vfiprintf_r>
 800a252:	b002      	add	sp, #8
 800a254:	f85d eb04 	ldr.w	lr, [sp], #4
 800a258:	b003      	add	sp, #12
 800a25a:	4770      	bx	lr
 800a25c:	2000001c 	.word	0x2000001c

0800a260 <abort>:
 800a260:	b508      	push	{r3, lr}
 800a262:	2006      	movs	r0, #6
 800a264:	f000 fa08 	bl	800a678 <raise>
 800a268:	2001      	movs	r0, #1
 800a26a:	f7f7 fc99 	bl	8001ba0 <_exit>

0800a26e <_malloc_usable_size_r>:
 800a26e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a272:	1f18      	subs	r0, r3, #4
 800a274:	2b00      	cmp	r3, #0
 800a276:	bfbc      	itt	lt
 800a278:	580b      	ldrlt	r3, [r1, r0]
 800a27a:	18c0      	addlt	r0, r0, r3
 800a27c:	4770      	bx	lr

0800a27e <__sfputc_r>:
 800a27e:	6893      	ldr	r3, [r2, #8]
 800a280:	3b01      	subs	r3, #1
 800a282:	2b00      	cmp	r3, #0
 800a284:	b410      	push	{r4}
 800a286:	6093      	str	r3, [r2, #8]
 800a288:	da08      	bge.n	800a29c <__sfputc_r+0x1e>
 800a28a:	6994      	ldr	r4, [r2, #24]
 800a28c:	42a3      	cmp	r3, r4
 800a28e:	db01      	blt.n	800a294 <__sfputc_r+0x16>
 800a290:	290a      	cmp	r1, #10
 800a292:	d103      	bne.n	800a29c <__sfputc_r+0x1e>
 800a294:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a298:	f000 b932 	b.w	800a500 <__swbuf_r>
 800a29c:	6813      	ldr	r3, [r2, #0]
 800a29e:	1c58      	adds	r0, r3, #1
 800a2a0:	6010      	str	r0, [r2, #0]
 800a2a2:	7019      	strb	r1, [r3, #0]
 800a2a4:	4608      	mov	r0, r1
 800a2a6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a2aa:	4770      	bx	lr

0800a2ac <__sfputs_r>:
 800a2ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a2ae:	4606      	mov	r6, r0
 800a2b0:	460f      	mov	r7, r1
 800a2b2:	4614      	mov	r4, r2
 800a2b4:	18d5      	adds	r5, r2, r3
 800a2b6:	42ac      	cmp	r4, r5
 800a2b8:	d101      	bne.n	800a2be <__sfputs_r+0x12>
 800a2ba:	2000      	movs	r0, #0
 800a2bc:	e007      	b.n	800a2ce <__sfputs_r+0x22>
 800a2be:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a2c2:	463a      	mov	r2, r7
 800a2c4:	4630      	mov	r0, r6
 800a2c6:	f7ff ffda 	bl	800a27e <__sfputc_r>
 800a2ca:	1c43      	adds	r3, r0, #1
 800a2cc:	d1f3      	bne.n	800a2b6 <__sfputs_r+0xa>
 800a2ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a2d0 <_vfiprintf_r>:
 800a2d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a2d4:	460d      	mov	r5, r1
 800a2d6:	b09d      	sub	sp, #116	@ 0x74
 800a2d8:	4614      	mov	r4, r2
 800a2da:	4698      	mov	r8, r3
 800a2dc:	4606      	mov	r6, r0
 800a2de:	b118      	cbz	r0, 800a2e8 <_vfiprintf_r+0x18>
 800a2e0:	6a03      	ldr	r3, [r0, #32]
 800a2e2:	b90b      	cbnz	r3, 800a2e8 <_vfiprintf_r+0x18>
 800a2e4:	f7fe f8ba 	bl	800845c <__sinit>
 800a2e8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a2ea:	07d9      	lsls	r1, r3, #31
 800a2ec:	d405      	bmi.n	800a2fa <_vfiprintf_r+0x2a>
 800a2ee:	89ab      	ldrh	r3, [r5, #12]
 800a2f0:	059a      	lsls	r2, r3, #22
 800a2f2:	d402      	bmi.n	800a2fa <_vfiprintf_r+0x2a>
 800a2f4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a2f6:	f7fe fa12 	bl	800871e <__retarget_lock_acquire_recursive>
 800a2fa:	89ab      	ldrh	r3, [r5, #12]
 800a2fc:	071b      	lsls	r3, r3, #28
 800a2fe:	d501      	bpl.n	800a304 <_vfiprintf_r+0x34>
 800a300:	692b      	ldr	r3, [r5, #16]
 800a302:	b99b      	cbnz	r3, 800a32c <_vfiprintf_r+0x5c>
 800a304:	4629      	mov	r1, r5
 800a306:	4630      	mov	r0, r6
 800a308:	f000 f938 	bl	800a57c <__swsetup_r>
 800a30c:	b170      	cbz	r0, 800a32c <_vfiprintf_r+0x5c>
 800a30e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a310:	07dc      	lsls	r4, r3, #31
 800a312:	d504      	bpl.n	800a31e <_vfiprintf_r+0x4e>
 800a314:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a318:	b01d      	add	sp, #116	@ 0x74
 800a31a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a31e:	89ab      	ldrh	r3, [r5, #12]
 800a320:	0598      	lsls	r0, r3, #22
 800a322:	d4f7      	bmi.n	800a314 <_vfiprintf_r+0x44>
 800a324:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a326:	f7fe f9fb 	bl	8008720 <__retarget_lock_release_recursive>
 800a32a:	e7f3      	b.n	800a314 <_vfiprintf_r+0x44>
 800a32c:	2300      	movs	r3, #0
 800a32e:	9309      	str	r3, [sp, #36]	@ 0x24
 800a330:	2320      	movs	r3, #32
 800a332:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a336:	f8cd 800c 	str.w	r8, [sp, #12]
 800a33a:	2330      	movs	r3, #48	@ 0x30
 800a33c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800a4ec <_vfiprintf_r+0x21c>
 800a340:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a344:	f04f 0901 	mov.w	r9, #1
 800a348:	4623      	mov	r3, r4
 800a34a:	469a      	mov	sl, r3
 800a34c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a350:	b10a      	cbz	r2, 800a356 <_vfiprintf_r+0x86>
 800a352:	2a25      	cmp	r2, #37	@ 0x25
 800a354:	d1f9      	bne.n	800a34a <_vfiprintf_r+0x7a>
 800a356:	ebba 0b04 	subs.w	fp, sl, r4
 800a35a:	d00b      	beq.n	800a374 <_vfiprintf_r+0xa4>
 800a35c:	465b      	mov	r3, fp
 800a35e:	4622      	mov	r2, r4
 800a360:	4629      	mov	r1, r5
 800a362:	4630      	mov	r0, r6
 800a364:	f7ff ffa2 	bl	800a2ac <__sfputs_r>
 800a368:	3001      	adds	r0, #1
 800a36a:	f000 80a7 	beq.w	800a4bc <_vfiprintf_r+0x1ec>
 800a36e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a370:	445a      	add	r2, fp
 800a372:	9209      	str	r2, [sp, #36]	@ 0x24
 800a374:	f89a 3000 	ldrb.w	r3, [sl]
 800a378:	2b00      	cmp	r3, #0
 800a37a:	f000 809f 	beq.w	800a4bc <_vfiprintf_r+0x1ec>
 800a37e:	2300      	movs	r3, #0
 800a380:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800a384:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a388:	f10a 0a01 	add.w	sl, sl, #1
 800a38c:	9304      	str	r3, [sp, #16]
 800a38e:	9307      	str	r3, [sp, #28]
 800a390:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a394:	931a      	str	r3, [sp, #104]	@ 0x68
 800a396:	4654      	mov	r4, sl
 800a398:	2205      	movs	r2, #5
 800a39a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a39e:	4853      	ldr	r0, [pc, #332]	@ (800a4ec <_vfiprintf_r+0x21c>)
 800a3a0:	f7f5 ff16 	bl	80001d0 <memchr>
 800a3a4:	9a04      	ldr	r2, [sp, #16]
 800a3a6:	b9d8      	cbnz	r0, 800a3e0 <_vfiprintf_r+0x110>
 800a3a8:	06d1      	lsls	r1, r2, #27
 800a3aa:	bf44      	itt	mi
 800a3ac:	2320      	movmi	r3, #32
 800a3ae:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a3b2:	0713      	lsls	r3, r2, #28
 800a3b4:	bf44      	itt	mi
 800a3b6:	232b      	movmi	r3, #43	@ 0x2b
 800a3b8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a3bc:	f89a 3000 	ldrb.w	r3, [sl]
 800a3c0:	2b2a      	cmp	r3, #42	@ 0x2a
 800a3c2:	d015      	beq.n	800a3f0 <_vfiprintf_r+0x120>
 800a3c4:	9a07      	ldr	r2, [sp, #28]
 800a3c6:	4654      	mov	r4, sl
 800a3c8:	2000      	movs	r0, #0
 800a3ca:	f04f 0c0a 	mov.w	ip, #10
 800a3ce:	4621      	mov	r1, r4
 800a3d0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a3d4:	3b30      	subs	r3, #48	@ 0x30
 800a3d6:	2b09      	cmp	r3, #9
 800a3d8:	d94b      	bls.n	800a472 <_vfiprintf_r+0x1a2>
 800a3da:	b1b0      	cbz	r0, 800a40a <_vfiprintf_r+0x13a>
 800a3dc:	9207      	str	r2, [sp, #28]
 800a3de:	e014      	b.n	800a40a <_vfiprintf_r+0x13a>
 800a3e0:	eba0 0308 	sub.w	r3, r0, r8
 800a3e4:	fa09 f303 	lsl.w	r3, r9, r3
 800a3e8:	4313      	orrs	r3, r2
 800a3ea:	9304      	str	r3, [sp, #16]
 800a3ec:	46a2      	mov	sl, r4
 800a3ee:	e7d2      	b.n	800a396 <_vfiprintf_r+0xc6>
 800a3f0:	9b03      	ldr	r3, [sp, #12]
 800a3f2:	1d19      	adds	r1, r3, #4
 800a3f4:	681b      	ldr	r3, [r3, #0]
 800a3f6:	9103      	str	r1, [sp, #12]
 800a3f8:	2b00      	cmp	r3, #0
 800a3fa:	bfbb      	ittet	lt
 800a3fc:	425b      	neglt	r3, r3
 800a3fe:	f042 0202 	orrlt.w	r2, r2, #2
 800a402:	9307      	strge	r3, [sp, #28]
 800a404:	9307      	strlt	r3, [sp, #28]
 800a406:	bfb8      	it	lt
 800a408:	9204      	strlt	r2, [sp, #16]
 800a40a:	7823      	ldrb	r3, [r4, #0]
 800a40c:	2b2e      	cmp	r3, #46	@ 0x2e
 800a40e:	d10a      	bne.n	800a426 <_vfiprintf_r+0x156>
 800a410:	7863      	ldrb	r3, [r4, #1]
 800a412:	2b2a      	cmp	r3, #42	@ 0x2a
 800a414:	d132      	bne.n	800a47c <_vfiprintf_r+0x1ac>
 800a416:	9b03      	ldr	r3, [sp, #12]
 800a418:	1d1a      	adds	r2, r3, #4
 800a41a:	681b      	ldr	r3, [r3, #0]
 800a41c:	9203      	str	r2, [sp, #12]
 800a41e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a422:	3402      	adds	r4, #2
 800a424:	9305      	str	r3, [sp, #20]
 800a426:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800a4fc <_vfiprintf_r+0x22c>
 800a42a:	7821      	ldrb	r1, [r4, #0]
 800a42c:	2203      	movs	r2, #3
 800a42e:	4650      	mov	r0, sl
 800a430:	f7f5 fece 	bl	80001d0 <memchr>
 800a434:	b138      	cbz	r0, 800a446 <_vfiprintf_r+0x176>
 800a436:	9b04      	ldr	r3, [sp, #16]
 800a438:	eba0 000a 	sub.w	r0, r0, sl
 800a43c:	2240      	movs	r2, #64	@ 0x40
 800a43e:	4082      	lsls	r2, r0
 800a440:	4313      	orrs	r3, r2
 800a442:	3401      	adds	r4, #1
 800a444:	9304      	str	r3, [sp, #16]
 800a446:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a44a:	4829      	ldr	r0, [pc, #164]	@ (800a4f0 <_vfiprintf_r+0x220>)
 800a44c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a450:	2206      	movs	r2, #6
 800a452:	f7f5 febd 	bl	80001d0 <memchr>
 800a456:	2800      	cmp	r0, #0
 800a458:	d03f      	beq.n	800a4da <_vfiprintf_r+0x20a>
 800a45a:	4b26      	ldr	r3, [pc, #152]	@ (800a4f4 <_vfiprintf_r+0x224>)
 800a45c:	bb1b      	cbnz	r3, 800a4a6 <_vfiprintf_r+0x1d6>
 800a45e:	9b03      	ldr	r3, [sp, #12]
 800a460:	3307      	adds	r3, #7
 800a462:	f023 0307 	bic.w	r3, r3, #7
 800a466:	3308      	adds	r3, #8
 800a468:	9303      	str	r3, [sp, #12]
 800a46a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a46c:	443b      	add	r3, r7
 800a46e:	9309      	str	r3, [sp, #36]	@ 0x24
 800a470:	e76a      	b.n	800a348 <_vfiprintf_r+0x78>
 800a472:	fb0c 3202 	mla	r2, ip, r2, r3
 800a476:	460c      	mov	r4, r1
 800a478:	2001      	movs	r0, #1
 800a47a:	e7a8      	b.n	800a3ce <_vfiprintf_r+0xfe>
 800a47c:	2300      	movs	r3, #0
 800a47e:	3401      	adds	r4, #1
 800a480:	9305      	str	r3, [sp, #20]
 800a482:	4619      	mov	r1, r3
 800a484:	f04f 0c0a 	mov.w	ip, #10
 800a488:	4620      	mov	r0, r4
 800a48a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a48e:	3a30      	subs	r2, #48	@ 0x30
 800a490:	2a09      	cmp	r2, #9
 800a492:	d903      	bls.n	800a49c <_vfiprintf_r+0x1cc>
 800a494:	2b00      	cmp	r3, #0
 800a496:	d0c6      	beq.n	800a426 <_vfiprintf_r+0x156>
 800a498:	9105      	str	r1, [sp, #20]
 800a49a:	e7c4      	b.n	800a426 <_vfiprintf_r+0x156>
 800a49c:	fb0c 2101 	mla	r1, ip, r1, r2
 800a4a0:	4604      	mov	r4, r0
 800a4a2:	2301      	movs	r3, #1
 800a4a4:	e7f0      	b.n	800a488 <_vfiprintf_r+0x1b8>
 800a4a6:	ab03      	add	r3, sp, #12
 800a4a8:	9300      	str	r3, [sp, #0]
 800a4aa:	462a      	mov	r2, r5
 800a4ac:	4b12      	ldr	r3, [pc, #72]	@ (800a4f8 <_vfiprintf_r+0x228>)
 800a4ae:	a904      	add	r1, sp, #16
 800a4b0:	4630      	mov	r0, r6
 800a4b2:	f7fd fb8f 	bl	8007bd4 <_printf_float>
 800a4b6:	4607      	mov	r7, r0
 800a4b8:	1c78      	adds	r0, r7, #1
 800a4ba:	d1d6      	bne.n	800a46a <_vfiprintf_r+0x19a>
 800a4bc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a4be:	07d9      	lsls	r1, r3, #31
 800a4c0:	d405      	bmi.n	800a4ce <_vfiprintf_r+0x1fe>
 800a4c2:	89ab      	ldrh	r3, [r5, #12]
 800a4c4:	059a      	lsls	r2, r3, #22
 800a4c6:	d402      	bmi.n	800a4ce <_vfiprintf_r+0x1fe>
 800a4c8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a4ca:	f7fe f929 	bl	8008720 <__retarget_lock_release_recursive>
 800a4ce:	89ab      	ldrh	r3, [r5, #12]
 800a4d0:	065b      	lsls	r3, r3, #25
 800a4d2:	f53f af1f 	bmi.w	800a314 <_vfiprintf_r+0x44>
 800a4d6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a4d8:	e71e      	b.n	800a318 <_vfiprintf_r+0x48>
 800a4da:	ab03      	add	r3, sp, #12
 800a4dc:	9300      	str	r3, [sp, #0]
 800a4de:	462a      	mov	r2, r5
 800a4e0:	4b05      	ldr	r3, [pc, #20]	@ (800a4f8 <_vfiprintf_r+0x228>)
 800a4e2:	a904      	add	r1, sp, #16
 800a4e4:	4630      	mov	r0, r6
 800a4e6:	f7fd fe0d 	bl	8008104 <_printf_i>
 800a4ea:	e7e4      	b.n	800a4b6 <_vfiprintf_r+0x1e6>
 800a4ec:	0800aae0 	.word	0x0800aae0
 800a4f0:	0800aaea 	.word	0x0800aaea
 800a4f4:	08007bd5 	.word	0x08007bd5
 800a4f8:	0800a2ad 	.word	0x0800a2ad
 800a4fc:	0800aae6 	.word	0x0800aae6

0800a500 <__swbuf_r>:
 800a500:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a502:	460e      	mov	r6, r1
 800a504:	4614      	mov	r4, r2
 800a506:	4605      	mov	r5, r0
 800a508:	b118      	cbz	r0, 800a512 <__swbuf_r+0x12>
 800a50a:	6a03      	ldr	r3, [r0, #32]
 800a50c:	b90b      	cbnz	r3, 800a512 <__swbuf_r+0x12>
 800a50e:	f7fd ffa5 	bl	800845c <__sinit>
 800a512:	69a3      	ldr	r3, [r4, #24]
 800a514:	60a3      	str	r3, [r4, #8]
 800a516:	89a3      	ldrh	r3, [r4, #12]
 800a518:	071a      	lsls	r2, r3, #28
 800a51a:	d501      	bpl.n	800a520 <__swbuf_r+0x20>
 800a51c:	6923      	ldr	r3, [r4, #16]
 800a51e:	b943      	cbnz	r3, 800a532 <__swbuf_r+0x32>
 800a520:	4621      	mov	r1, r4
 800a522:	4628      	mov	r0, r5
 800a524:	f000 f82a 	bl	800a57c <__swsetup_r>
 800a528:	b118      	cbz	r0, 800a532 <__swbuf_r+0x32>
 800a52a:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800a52e:	4638      	mov	r0, r7
 800a530:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a532:	6823      	ldr	r3, [r4, #0]
 800a534:	6922      	ldr	r2, [r4, #16]
 800a536:	1a98      	subs	r0, r3, r2
 800a538:	6963      	ldr	r3, [r4, #20]
 800a53a:	b2f6      	uxtb	r6, r6
 800a53c:	4283      	cmp	r3, r0
 800a53e:	4637      	mov	r7, r6
 800a540:	dc05      	bgt.n	800a54e <__swbuf_r+0x4e>
 800a542:	4621      	mov	r1, r4
 800a544:	4628      	mov	r0, r5
 800a546:	f7ff fd99 	bl	800a07c <_fflush_r>
 800a54a:	2800      	cmp	r0, #0
 800a54c:	d1ed      	bne.n	800a52a <__swbuf_r+0x2a>
 800a54e:	68a3      	ldr	r3, [r4, #8]
 800a550:	3b01      	subs	r3, #1
 800a552:	60a3      	str	r3, [r4, #8]
 800a554:	6823      	ldr	r3, [r4, #0]
 800a556:	1c5a      	adds	r2, r3, #1
 800a558:	6022      	str	r2, [r4, #0]
 800a55a:	701e      	strb	r6, [r3, #0]
 800a55c:	6962      	ldr	r2, [r4, #20]
 800a55e:	1c43      	adds	r3, r0, #1
 800a560:	429a      	cmp	r2, r3
 800a562:	d004      	beq.n	800a56e <__swbuf_r+0x6e>
 800a564:	89a3      	ldrh	r3, [r4, #12]
 800a566:	07db      	lsls	r3, r3, #31
 800a568:	d5e1      	bpl.n	800a52e <__swbuf_r+0x2e>
 800a56a:	2e0a      	cmp	r6, #10
 800a56c:	d1df      	bne.n	800a52e <__swbuf_r+0x2e>
 800a56e:	4621      	mov	r1, r4
 800a570:	4628      	mov	r0, r5
 800a572:	f7ff fd83 	bl	800a07c <_fflush_r>
 800a576:	2800      	cmp	r0, #0
 800a578:	d0d9      	beq.n	800a52e <__swbuf_r+0x2e>
 800a57a:	e7d6      	b.n	800a52a <__swbuf_r+0x2a>

0800a57c <__swsetup_r>:
 800a57c:	b538      	push	{r3, r4, r5, lr}
 800a57e:	4b29      	ldr	r3, [pc, #164]	@ (800a624 <__swsetup_r+0xa8>)
 800a580:	4605      	mov	r5, r0
 800a582:	6818      	ldr	r0, [r3, #0]
 800a584:	460c      	mov	r4, r1
 800a586:	b118      	cbz	r0, 800a590 <__swsetup_r+0x14>
 800a588:	6a03      	ldr	r3, [r0, #32]
 800a58a:	b90b      	cbnz	r3, 800a590 <__swsetup_r+0x14>
 800a58c:	f7fd ff66 	bl	800845c <__sinit>
 800a590:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a594:	0719      	lsls	r1, r3, #28
 800a596:	d422      	bmi.n	800a5de <__swsetup_r+0x62>
 800a598:	06da      	lsls	r2, r3, #27
 800a59a:	d407      	bmi.n	800a5ac <__swsetup_r+0x30>
 800a59c:	2209      	movs	r2, #9
 800a59e:	602a      	str	r2, [r5, #0]
 800a5a0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a5a4:	81a3      	strh	r3, [r4, #12]
 800a5a6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a5aa:	e033      	b.n	800a614 <__swsetup_r+0x98>
 800a5ac:	0758      	lsls	r0, r3, #29
 800a5ae:	d512      	bpl.n	800a5d6 <__swsetup_r+0x5a>
 800a5b0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a5b2:	b141      	cbz	r1, 800a5c6 <__swsetup_r+0x4a>
 800a5b4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a5b8:	4299      	cmp	r1, r3
 800a5ba:	d002      	beq.n	800a5c2 <__swsetup_r+0x46>
 800a5bc:	4628      	mov	r0, r5
 800a5be:	f7fe feff 	bl	80093c0 <_free_r>
 800a5c2:	2300      	movs	r3, #0
 800a5c4:	6363      	str	r3, [r4, #52]	@ 0x34
 800a5c6:	89a3      	ldrh	r3, [r4, #12]
 800a5c8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800a5cc:	81a3      	strh	r3, [r4, #12]
 800a5ce:	2300      	movs	r3, #0
 800a5d0:	6063      	str	r3, [r4, #4]
 800a5d2:	6923      	ldr	r3, [r4, #16]
 800a5d4:	6023      	str	r3, [r4, #0]
 800a5d6:	89a3      	ldrh	r3, [r4, #12]
 800a5d8:	f043 0308 	orr.w	r3, r3, #8
 800a5dc:	81a3      	strh	r3, [r4, #12]
 800a5de:	6923      	ldr	r3, [r4, #16]
 800a5e0:	b94b      	cbnz	r3, 800a5f6 <__swsetup_r+0x7a>
 800a5e2:	89a3      	ldrh	r3, [r4, #12]
 800a5e4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800a5e8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a5ec:	d003      	beq.n	800a5f6 <__swsetup_r+0x7a>
 800a5ee:	4621      	mov	r1, r4
 800a5f0:	4628      	mov	r0, r5
 800a5f2:	f000 f883 	bl	800a6fc <__smakebuf_r>
 800a5f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a5fa:	f013 0201 	ands.w	r2, r3, #1
 800a5fe:	d00a      	beq.n	800a616 <__swsetup_r+0x9a>
 800a600:	2200      	movs	r2, #0
 800a602:	60a2      	str	r2, [r4, #8]
 800a604:	6962      	ldr	r2, [r4, #20]
 800a606:	4252      	negs	r2, r2
 800a608:	61a2      	str	r2, [r4, #24]
 800a60a:	6922      	ldr	r2, [r4, #16]
 800a60c:	b942      	cbnz	r2, 800a620 <__swsetup_r+0xa4>
 800a60e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800a612:	d1c5      	bne.n	800a5a0 <__swsetup_r+0x24>
 800a614:	bd38      	pop	{r3, r4, r5, pc}
 800a616:	0799      	lsls	r1, r3, #30
 800a618:	bf58      	it	pl
 800a61a:	6962      	ldrpl	r2, [r4, #20]
 800a61c:	60a2      	str	r2, [r4, #8]
 800a61e:	e7f4      	b.n	800a60a <__swsetup_r+0x8e>
 800a620:	2000      	movs	r0, #0
 800a622:	e7f7      	b.n	800a614 <__swsetup_r+0x98>
 800a624:	2000001c 	.word	0x2000001c

0800a628 <_raise_r>:
 800a628:	291f      	cmp	r1, #31
 800a62a:	b538      	push	{r3, r4, r5, lr}
 800a62c:	4605      	mov	r5, r0
 800a62e:	460c      	mov	r4, r1
 800a630:	d904      	bls.n	800a63c <_raise_r+0x14>
 800a632:	2316      	movs	r3, #22
 800a634:	6003      	str	r3, [r0, #0]
 800a636:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a63a:	bd38      	pop	{r3, r4, r5, pc}
 800a63c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800a63e:	b112      	cbz	r2, 800a646 <_raise_r+0x1e>
 800a640:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a644:	b94b      	cbnz	r3, 800a65a <_raise_r+0x32>
 800a646:	4628      	mov	r0, r5
 800a648:	f000 f830 	bl	800a6ac <_getpid_r>
 800a64c:	4622      	mov	r2, r4
 800a64e:	4601      	mov	r1, r0
 800a650:	4628      	mov	r0, r5
 800a652:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a656:	f000 b817 	b.w	800a688 <_kill_r>
 800a65a:	2b01      	cmp	r3, #1
 800a65c:	d00a      	beq.n	800a674 <_raise_r+0x4c>
 800a65e:	1c59      	adds	r1, r3, #1
 800a660:	d103      	bne.n	800a66a <_raise_r+0x42>
 800a662:	2316      	movs	r3, #22
 800a664:	6003      	str	r3, [r0, #0]
 800a666:	2001      	movs	r0, #1
 800a668:	e7e7      	b.n	800a63a <_raise_r+0x12>
 800a66a:	2100      	movs	r1, #0
 800a66c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800a670:	4620      	mov	r0, r4
 800a672:	4798      	blx	r3
 800a674:	2000      	movs	r0, #0
 800a676:	e7e0      	b.n	800a63a <_raise_r+0x12>

0800a678 <raise>:
 800a678:	4b02      	ldr	r3, [pc, #8]	@ (800a684 <raise+0xc>)
 800a67a:	4601      	mov	r1, r0
 800a67c:	6818      	ldr	r0, [r3, #0]
 800a67e:	f7ff bfd3 	b.w	800a628 <_raise_r>
 800a682:	bf00      	nop
 800a684:	2000001c 	.word	0x2000001c

0800a688 <_kill_r>:
 800a688:	b538      	push	{r3, r4, r5, lr}
 800a68a:	4d07      	ldr	r5, [pc, #28]	@ (800a6a8 <_kill_r+0x20>)
 800a68c:	2300      	movs	r3, #0
 800a68e:	4604      	mov	r4, r0
 800a690:	4608      	mov	r0, r1
 800a692:	4611      	mov	r1, r2
 800a694:	602b      	str	r3, [r5, #0]
 800a696:	f7f7 fa73 	bl	8001b80 <_kill>
 800a69a:	1c43      	adds	r3, r0, #1
 800a69c:	d102      	bne.n	800a6a4 <_kill_r+0x1c>
 800a69e:	682b      	ldr	r3, [r5, #0]
 800a6a0:	b103      	cbz	r3, 800a6a4 <_kill_r+0x1c>
 800a6a2:	6023      	str	r3, [r4, #0]
 800a6a4:	bd38      	pop	{r3, r4, r5, pc}
 800a6a6:	bf00      	nop
 800a6a8:	20000bd0 	.word	0x20000bd0

0800a6ac <_getpid_r>:
 800a6ac:	f7f7 ba60 	b.w	8001b70 <_getpid>

0800a6b0 <__swhatbuf_r>:
 800a6b0:	b570      	push	{r4, r5, r6, lr}
 800a6b2:	460c      	mov	r4, r1
 800a6b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a6b8:	2900      	cmp	r1, #0
 800a6ba:	b096      	sub	sp, #88	@ 0x58
 800a6bc:	4615      	mov	r5, r2
 800a6be:	461e      	mov	r6, r3
 800a6c0:	da0d      	bge.n	800a6de <__swhatbuf_r+0x2e>
 800a6c2:	89a3      	ldrh	r3, [r4, #12]
 800a6c4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800a6c8:	f04f 0100 	mov.w	r1, #0
 800a6cc:	bf14      	ite	ne
 800a6ce:	2340      	movne	r3, #64	@ 0x40
 800a6d0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800a6d4:	2000      	movs	r0, #0
 800a6d6:	6031      	str	r1, [r6, #0]
 800a6d8:	602b      	str	r3, [r5, #0]
 800a6da:	b016      	add	sp, #88	@ 0x58
 800a6dc:	bd70      	pop	{r4, r5, r6, pc}
 800a6de:	466a      	mov	r2, sp
 800a6e0:	f000 f848 	bl	800a774 <_fstat_r>
 800a6e4:	2800      	cmp	r0, #0
 800a6e6:	dbec      	blt.n	800a6c2 <__swhatbuf_r+0x12>
 800a6e8:	9901      	ldr	r1, [sp, #4]
 800a6ea:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800a6ee:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800a6f2:	4259      	negs	r1, r3
 800a6f4:	4159      	adcs	r1, r3
 800a6f6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a6fa:	e7eb      	b.n	800a6d4 <__swhatbuf_r+0x24>

0800a6fc <__smakebuf_r>:
 800a6fc:	898b      	ldrh	r3, [r1, #12]
 800a6fe:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a700:	079d      	lsls	r5, r3, #30
 800a702:	4606      	mov	r6, r0
 800a704:	460c      	mov	r4, r1
 800a706:	d507      	bpl.n	800a718 <__smakebuf_r+0x1c>
 800a708:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800a70c:	6023      	str	r3, [r4, #0]
 800a70e:	6123      	str	r3, [r4, #16]
 800a710:	2301      	movs	r3, #1
 800a712:	6163      	str	r3, [r4, #20]
 800a714:	b003      	add	sp, #12
 800a716:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a718:	ab01      	add	r3, sp, #4
 800a71a:	466a      	mov	r2, sp
 800a71c:	f7ff ffc8 	bl	800a6b0 <__swhatbuf_r>
 800a720:	9f00      	ldr	r7, [sp, #0]
 800a722:	4605      	mov	r5, r0
 800a724:	4639      	mov	r1, r7
 800a726:	4630      	mov	r0, r6
 800a728:	f7fe febe 	bl	80094a8 <_malloc_r>
 800a72c:	b948      	cbnz	r0, 800a742 <__smakebuf_r+0x46>
 800a72e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a732:	059a      	lsls	r2, r3, #22
 800a734:	d4ee      	bmi.n	800a714 <__smakebuf_r+0x18>
 800a736:	f023 0303 	bic.w	r3, r3, #3
 800a73a:	f043 0302 	orr.w	r3, r3, #2
 800a73e:	81a3      	strh	r3, [r4, #12]
 800a740:	e7e2      	b.n	800a708 <__smakebuf_r+0xc>
 800a742:	89a3      	ldrh	r3, [r4, #12]
 800a744:	6020      	str	r0, [r4, #0]
 800a746:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a74a:	81a3      	strh	r3, [r4, #12]
 800a74c:	9b01      	ldr	r3, [sp, #4]
 800a74e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800a752:	b15b      	cbz	r3, 800a76c <__smakebuf_r+0x70>
 800a754:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a758:	4630      	mov	r0, r6
 800a75a:	f000 f81d 	bl	800a798 <_isatty_r>
 800a75e:	b128      	cbz	r0, 800a76c <__smakebuf_r+0x70>
 800a760:	89a3      	ldrh	r3, [r4, #12]
 800a762:	f023 0303 	bic.w	r3, r3, #3
 800a766:	f043 0301 	orr.w	r3, r3, #1
 800a76a:	81a3      	strh	r3, [r4, #12]
 800a76c:	89a3      	ldrh	r3, [r4, #12]
 800a76e:	431d      	orrs	r5, r3
 800a770:	81a5      	strh	r5, [r4, #12]
 800a772:	e7cf      	b.n	800a714 <__smakebuf_r+0x18>

0800a774 <_fstat_r>:
 800a774:	b538      	push	{r3, r4, r5, lr}
 800a776:	4d07      	ldr	r5, [pc, #28]	@ (800a794 <_fstat_r+0x20>)
 800a778:	2300      	movs	r3, #0
 800a77a:	4604      	mov	r4, r0
 800a77c:	4608      	mov	r0, r1
 800a77e:	4611      	mov	r1, r2
 800a780:	602b      	str	r3, [r5, #0]
 800a782:	f7f7 fa5d 	bl	8001c40 <_fstat>
 800a786:	1c43      	adds	r3, r0, #1
 800a788:	d102      	bne.n	800a790 <_fstat_r+0x1c>
 800a78a:	682b      	ldr	r3, [r5, #0]
 800a78c:	b103      	cbz	r3, 800a790 <_fstat_r+0x1c>
 800a78e:	6023      	str	r3, [r4, #0]
 800a790:	bd38      	pop	{r3, r4, r5, pc}
 800a792:	bf00      	nop
 800a794:	20000bd0 	.word	0x20000bd0

0800a798 <_isatty_r>:
 800a798:	b538      	push	{r3, r4, r5, lr}
 800a79a:	4d06      	ldr	r5, [pc, #24]	@ (800a7b4 <_isatty_r+0x1c>)
 800a79c:	2300      	movs	r3, #0
 800a79e:	4604      	mov	r4, r0
 800a7a0:	4608      	mov	r0, r1
 800a7a2:	602b      	str	r3, [r5, #0]
 800a7a4:	f7f7 fa5c 	bl	8001c60 <_isatty>
 800a7a8:	1c43      	adds	r3, r0, #1
 800a7aa:	d102      	bne.n	800a7b2 <_isatty_r+0x1a>
 800a7ac:	682b      	ldr	r3, [r5, #0]
 800a7ae:	b103      	cbz	r3, 800a7b2 <_isatty_r+0x1a>
 800a7b0:	6023      	str	r3, [r4, #0]
 800a7b2:	bd38      	pop	{r3, r4, r5, pc}
 800a7b4:	20000bd0 	.word	0x20000bd0

0800a7b8 <_init>:
 800a7b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a7ba:	bf00      	nop
 800a7bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a7be:	bc08      	pop	{r3}
 800a7c0:	469e      	mov	lr, r3
 800a7c2:	4770      	bx	lr

0800a7c4 <_fini>:
 800a7c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a7c6:	bf00      	nop
 800a7c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a7ca:	bc08      	pop	{r3}
 800a7cc:	469e      	mov	lr, r3
 800a7ce:	4770      	bx	lr
