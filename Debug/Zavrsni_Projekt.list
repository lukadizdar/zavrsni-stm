
Zavrsni_Projekt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000041c0  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  08004350  08004350  00005350  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080043c8  080043c8  0000605c  2**0
                  CONTENTS
  4 .ARM          00000008  080043c8  080043c8  000053c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080043d0  080043d0  0000605c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080043d0  080043d0  000053d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080043d4  080043d4  000053d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  080043d8  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000605c  2**0
                  CONTENTS
 10 .bss          0000033c  2000005c  2000005c  0000605c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000398  20000398  0000605c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000605c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00009000  00000000  00000000  0000608c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001b09  00000000  00000000  0000f08c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000770  00000000  00000000  00010b98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000059c  00000000  00000000  00011308  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000207c7  00000000  00000000  000118a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00009bb2  00000000  00000000  0003206b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c2d10  00000000  00000000  0003bc1d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000fe92d  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000021d0  00000000  00000000  000fe970  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000067  00000000  00000000  00100b40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000005c 	.word	0x2000005c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004338 	.word	0x08004338

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000060 	.word	0x20000060
 80001cc:	08004338 	.word	0x08004338

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000290:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000294:	f000 b96a 	b.w	800056c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	460c      	mov	r4, r1
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d14e      	bne.n	800035a <__udivmoddi4+0xaa>
 80002bc:	4694      	mov	ip, r2
 80002be:	458c      	cmp	ip, r1
 80002c0:	4686      	mov	lr, r0
 80002c2:	fab2 f282 	clz	r2, r2
 80002c6:	d962      	bls.n	800038e <__udivmoddi4+0xde>
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0320 	rsb	r3, r2, #32
 80002ce:	4091      	lsls	r1, r2
 80002d0:	fa20 f303 	lsr.w	r3, r0, r3
 80002d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002d8:	4319      	orrs	r1, r3
 80002da:	fa00 fe02 	lsl.w	lr, r0, r2
 80002de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002e2:	fa1f f68c 	uxth.w	r6, ip
 80002e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ee:	fb07 1114 	mls	r1, r7, r4, r1
 80002f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f6:	fb04 f106 	mul.w	r1, r4, r6
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000306:	f080 8112 	bcs.w	800052e <__udivmoddi4+0x27e>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 810f 	bls.w	800052e <__udivmoddi4+0x27e>
 8000310:	3c02      	subs	r4, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a59      	subs	r1, r3, r1
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb1 f0f7 	udiv	r0, r1, r7
 800031e:	fb07 1110 	mls	r1, r7, r0, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb00 f606 	mul.w	r6, r0, r6
 800032a:	429e      	cmp	r6, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x94>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000336:	f080 80fc 	bcs.w	8000532 <__udivmoddi4+0x282>
 800033a:	429e      	cmp	r6, r3
 800033c:	f240 80f9 	bls.w	8000532 <__udivmoddi4+0x282>
 8000340:	4463      	add	r3, ip
 8000342:	3802      	subs	r0, #2
 8000344:	1b9b      	subs	r3, r3, r6
 8000346:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800034a:	2100      	movs	r1, #0
 800034c:	b11d      	cbz	r5, 8000356 <__udivmoddi4+0xa6>
 800034e:	40d3      	lsrs	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	e9c5 3200 	strd	r3, r2, [r5]
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d905      	bls.n	800036a <__udivmoddi4+0xba>
 800035e:	b10d      	cbz	r5, 8000364 <__udivmoddi4+0xb4>
 8000360:	e9c5 0100 	strd	r0, r1, [r5]
 8000364:	2100      	movs	r1, #0
 8000366:	4608      	mov	r0, r1
 8000368:	e7f5      	b.n	8000356 <__udivmoddi4+0xa6>
 800036a:	fab3 f183 	clz	r1, r3
 800036e:	2900      	cmp	r1, #0
 8000370:	d146      	bne.n	8000400 <__udivmoddi4+0x150>
 8000372:	42a3      	cmp	r3, r4
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xcc>
 8000376:	4290      	cmp	r0, r2
 8000378:	f0c0 80f0 	bcc.w	800055c <__udivmoddi4+0x2ac>
 800037c:	1a86      	subs	r6, r0, r2
 800037e:	eb64 0303 	sbc.w	r3, r4, r3
 8000382:	2001      	movs	r0, #1
 8000384:	2d00      	cmp	r5, #0
 8000386:	d0e6      	beq.n	8000356 <__udivmoddi4+0xa6>
 8000388:	e9c5 6300 	strd	r6, r3, [r5]
 800038c:	e7e3      	b.n	8000356 <__udivmoddi4+0xa6>
 800038e:	2a00      	cmp	r2, #0
 8000390:	f040 8090 	bne.w	80004b4 <__udivmoddi4+0x204>
 8000394:	eba1 040c 	sub.w	r4, r1, ip
 8000398:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800039c:	fa1f f78c 	uxth.w	r7, ip
 80003a0:	2101      	movs	r1, #1
 80003a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003aa:	fb08 4416 	mls	r4, r8, r6, r4
 80003ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003b2:	fb07 f006 	mul.w	r0, r7, r6
 80003b6:	4298      	cmp	r0, r3
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x11c>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x11a>
 80003c4:	4298      	cmp	r0, r3
 80003c6:	f200 80cd 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 80003ca:	4626      	mov	r6, r4
 80003cc:	1a1c      	subs	r4, r3, r0
 80003ce:	fa1f f38e 	uxth.w	r3, lr
 80003d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003d6:	fb08 4410 	mls	r4, r8, r0, r4
 80003da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003de:	fb00 f707 	mul.w	r7, r0, r7
 80003e2:	429f      	cmp	r7, r3
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0x148>
 80003e6:	eb1c 0303 	adds.w	r3, ip, r3
 80003ea:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 80003ee:	d202      	bcs.n	80003f6 <__udivmoddi4+0x146>
 80003f0:	429f      	cmp	r7, r3
 80003f2:	f200 80b0 	bhi.w	8000556 <__udivmoddi4+0x2a6>
 80003f6:	4620      	mov	r0, r4
 80003f8:	1bdb      	subs	r3, r3, r7
 80003fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003fe:	e7a5      	b.n	800034c <__udivmoddi4+0x9c>
 8000400:	f1c1 0620 	rsb	r6, r1, #32
 8000404:	408b      	lsls	r3, r1
 8000406:	fa22 f706 	lsr.w	r7, r2, r6
 800040a:	431f      	orrs	r7, r3
 800040c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000410:	fa04 f301 	lsl.w	r3, r4, r1
 8000414:	ea43 030c 	orr.w	r3, r3, ip
 8000418:	40f4      	lsrs	r4, r6
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	0c38      	lsrs	r0, r7, #16
 8000420:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000424:	fbb4 fef0 	udiv	lr, r4, r0
 8000428:	fa1f fc87 	uxth.w	ip, r7
 800042c:	fb00 441e 	mls	r4, r0, lr, r4
 8000430:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000434:	fb0e f90c 	mul.w	r9, lr, ip
 8000438:	45a1      	cmp	r9, r4
 800043a:	fa02 f201 	lsl.w	r2, r2, r1
 800043e:	d90a      	bls.n	8000456 <__udivmoddi4+0x1a6>
 8000440:	193c      	adds	r4, r7, r4
 8000442:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000446:	f080 8084 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800044a:	45a1      	cmp	r9, r4
 800044c:	f240 8081 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000450:	f1ae 0e02 	sub.w	lr, lr, #2
 8000454:	443c      	add	r4, r7
 8000456:	eba4 0409 	sub.w	r4, r4, r9
 800045a:	fa1f f983 	uxth.w	r9, r3
 800045e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000462:	fb00 4413 	mls	r4, r0, r3, r4
 8000466:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800046a:	fb03 fc0c 	mul.w	ip, r3, ip
 800046e:	45a4      	cmp	ip, r4
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x1d2>
 8000472:	193c      	adds	r4, r7, r4
 8000474:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000478:	d267      	bcs.n	800054a <__udivmoddi4+0x29a>
 800047a:	45a4      	cmp	ip, r4
 800047c:	d965      	bls.n	800054a <__udivmoddi4+0x29a>
 800047e:	3b02      	subs	r3, #2
 8000480:	443c      	add	r4, r7
 8000482:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000486:	fba0 9302 	umull	r9, r3, r0, r2
 800048a:	eba4 040c 	sub.w	r4, r4, ip
 800048e:	429c      	cmp	r4, r3
 8000490:	46ce      	mov	lr, r9
 8000492:	469c      	mov	ip, r3
 8000494:	d351      	bcc.n	800053a <__udivmoddi4+0x28a>
 8000496:	d04e      	beq.n	8000536 <__udivmoddi4+0x286>
 8000498:	b155      	cbz	r5, 80004b0 <__udivmoddi4+0x200>
 800049a:	ebb8 030e 	subs.w	r3, r8, lr
 800049e:	eb64 040c 	sbc.w	r4, r4, ip
 80004a2:	fa04 f606 	lsl.w	r6, r4, r6
 80004a6:	40cb      	lsrs	r3, r1
 80004a8:	431e      	orrs	r6, r3
 80004aa:	40cc      	lsrs	r4, r1
 80004ac:	e9c5 6400 	strd	r6, r4, [r5]
 80004b0:	2100      	movs	r1, #0
 80004b2:	e750      	b.n	8000356 <__udivmoddi4+0xa6>
 80004b4:	f1c2 0320 	rsb	r3, r2, #32
 80004b8:	fa20 f103 	lsr.w	r1, r0, r3
 80004bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c0:	fa24 f303 	lsr.w	r3, r4, r3
 80004c4:	4094      	lsls	r4, r2
 80004c6:	430c      	orrs	r4, r1
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004d0:	fa1f f78c 	uxth.w	r7, ip
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3110 	mls	r1, r8, r0, r3
 80004dc:	0c23      	lsrs	r3, r4, #16
 80004de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004e2:	fb00 f107 	mul.w	r1, r0, r7
 80004e6:	4299      	cmp	r1, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x24c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 80004f2:	d22c      	bcs.n	800054e <__udivmoddi4+0x29e>
 80004f4:	4299      	cmp	r1, r3
 80004f6:	d92a      	bls.n	800054e <__udivmoddi4+0x29e>
 80004f8:	3802      	subs	r0, #2
 80004fa:	4463      	add	r3, ip
 80004fc:	1a5b      	subs	r3, r3, r1
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb3 f1f8 	udiv	r1, r3, r8
 8000504:	fb08 3311 	mls	r3, r8, r1, r3
 8000508:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800050c:	fb01 f307 	mul.w	r3, r1, r7
 8000510:	42a3      	cmp	r3, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x276>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800051c:	d213      	bcs.n	8000546 <__udivmoddi4+0x296>
 800051e:	42a3      	cmp	r3, r4
 8000520:	d911      	bls.n	8000546 <__udivmoddi4+0x296>
 8000522:	3902      	subs	r1, #2
 8000524:	4464      	add	r4, ip
 8000526:	1ae4      	subs	r4, r4, r3
 8000528:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800052c:	e739      	b.n	80003a2 <__udivmoddi4+0xf2>
 800052e:	4604      	mov	r4, r0
 8000530:	e6f0      	b.n	8000314 <__udivmoddi4+0x64>
 8000532:	4608      	mov	r0, r1
 8000534:	e706      	b.n	8000344 <__udivmoddi4+0x94>
 8000536:	45c8      	cmp	r8, r9
 8000538:	d2ae      	bcs.n	8000498 <__udivmoddi4+0x1e8>
 800053a:	ebb9 0e02 	subs.w	lr, r9, r2
 800053e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000542:	3801      	subs	r0, #1
 8000544:	e7a8      	b.n	8000498 <__udivmoddi4+0x1e8>
 8000546:	4631      	mov	r1, r6
 8000548:	e7ed      	b.n	8000526 <__udivmoddi4+0x276>
 800054a:	4603      	mov	r3, r0
 800054c:	e799      	b.n	8000482 <__udivmoddi4+0x1d2>
 800054e:	4630      	mov	r0, r6
 8000550:	e7d4      	b.n	80004fc <__udivmoddi4+0x24c>
 8000552:	46d6      	mov	lr, sl
 8000554:	e77f      	b.n	8000456 <__udivmoddi4+0x1a6>
 8000556:	4463      	add	r3, ip
 8000558:	3802      	subs	r0, #2
 800055a:	e74d      	b.n	80003f8 <__udivmoddi4+0x148>
 800055c:	4606      	mov	r6, r0
 800055e:	4623      	mov	r3, r4
 8000560:	4608      	mov	r0, r1
 8000562:	e70f      	b.n	8000384 <__udivmoddi4+0xd4>
 8000564:	3e02      	subs	r6, #2
 8000566:	4463      	add	r3, ip
 8000568:	e730      	b.n	80003cc <__udivmoddi4+0x11c>
 800056a:	bf00      	nop

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b082      	sub	sp, #8
 8000574:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000576:	2300      	movs	r3, #0
 8000578:	607b      	str	r3, [r7, #4]
 800057a:	4b10      	ldr	r3, [pc, #64]	@ (80005bc <MX_DMA_Init+0x4c>)
 800057c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800057e:	4a0f      	ldr	r2, [pc, #60]	@ (80005bc <MX_DMA_Init+0x4c>)
 8000580:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000584:	6313      	str	r3, [r2, #48]	@ 0x30
 8000586:	4b0d      	ldr	r3, [pc, #52]	@ (80005bc <MX_DMA_Init+0x4c>)
 8000588:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800058a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800058e:	607b      	str	r3, [r7, #4]
 8000590:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8000592:	2200      	movs	r2, #0
 8000594:	2100      	movs	r1, #0
 8000596:	203a      	movs	r0, #58	@ 0x3a
 8000598:	f000 fd7b 	bl	8001092 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 800059c:	203a      	movs	r0, #58	@ 0x3a
 800059e:	f000 fd94 	bl	80010ca <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 80005a2:	2200      	movs	r2, #0
 80005a4:	2100      	movs	r1, #0
 80005a6:	2046      	movs	r0, #70	@ 0x46
 80005a8:	f000 fd73 	bl	8001092 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 80005ac:	2046      	movs	r0, #70	@ 0x46
 80005ae:	f000 fd8c 	bl	80010ca <HAL_NVIC_EnableIRQ>

}
 80005b2:	bf00      	nop
 80005b4:	3708      	adds	r7, #8
 80005b6:	46bd      	mov	sp, r7
 80005b8:	bd80      	pop	{r7, pc}
 80005ba:	bf00      	nop
 80005bc:	40023800 	.word	0x40023800

080005c0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b08a      	sub	sp, #40	@ 0x28
 80005c4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005c6:	f107 0314 	add.w	r3, r7, #20
 80005ca:	2200      	movs	r2, #0
 80005cc:	601a      	str	r2, [r3, #0]
 80005ce:	605a      	str	r2, [r3, #4]
 80005d0:	609a      	str	r2, [r3, #8]
 80005d2:	60da      	str	r2, [r3, #12]
 80005d4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005d6:	2300      	movs	r3, #0
 80005d8:	613b      	str	r3, [r7, #16]
 80005da:	4b2e      	ldr	r3, [pc, #184]	@ (8000694 <MX_GPIO_Init+0xd4>)
 80005dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005de:	4a2d      	ldr	r2, [pc, #180]	@ (8000694 <MX_GPIO_Init+0xd4>)
 80005e0:	f043 0304 	orr.w	r3, r3, #4
 80005e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80005e6:	4b2b      	ldr	r3, [pc, #172]	@ (8000694 <MX_GPIO_Init+0xd4>)
 80005e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005ea:	f003 0304 	and.w	r3, r3, #4
 80005ee:	613b      	str	r3, [r7, #16]
 80005f0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005f2:	2300      	movs	r3, #0
 80005f4:	60fb      	str	r3, [r7, #12]
 80005f6:	4b27      	ldr	r3, [pc, #156]	@ (8000694 <MX_GPIO_Init+0xd4>)
 80005f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005fa:	4a26      	ldr	r2, [pc, #152]	@ (8000694 <MX_GPIO_Init+0xd4>)
 80005fc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000600:	6313      	str	r3, [r2, #48]	@ 0x30
 8000602:	4b24      	ldr	r3, [pc, #144]	@ (8000694 <MX_GPIO_Init+0xd4>)
 8000604:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000606:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800060a:	60fb      	str	r3, [r7, #12]
 800060c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800060e:	2300      	movs	r3, #0
 8000610:	60bb      	str	r3, [r7, #8]
 8000612:	4b20      	ldr	r3, [pc, #128]	@ (8000694 <MX_GPIO_Init+0xd4>)
 8000614:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000616:	4a1f      	ldr	r2, [pc, #124]	@ (8000694 <MX_GPIO_Init+0xd4>)
 8000618:	f043 0308 	orr.w	r3, r3, #8
 800061c:	6313      	str	r3, [r2, #48]	@ 0x30
 800061e:	4b1d      	ldr	r3, [pc, #116]	@ (8000694 <MX_GPIO_Init+0xd4>)
 8000620:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000622:	f003 0308 	and.w	r3, r3, #8
 8000626:	60bb      	str	r3, [r7, #8]
 8000628:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800062a:	2300      	movs	r3, #0
 800062c:	607b      	str	r3, [r7, #4]
 800062e:	4b19      	ldr	r3, [pc, #100]	@ (8000694 <MX_GPIO_Init+0xd4>)
 8000630:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000632:	4a18      	ldr	r2, [pc, #96]	@ (8000694 <MX_GPIO_Init+0xd4>)
 8000634:	f043 0301 	orr.w	r3, r3, #1
 8000638:	6313      	str	r3, [r2, #48]	@ 0x30
 800063a:	4b16      	ldr	r3, [pc, #88]	@ (8000694 <MX_GPIO_Init+0xd4>)
 800063c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800063e:	f003 0301 	and.w	r3, r3, #1
 8000642:	607b      	str	r3, [r7, #4]
 8000644:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000646:	2300      	movs	r3, #0
 8000648:	603b      	str	r3, [r7, #0]
 800064a:	4b12      	ldr	r3, [pc, #72]	@ (8000694 <MX_GPIO_Init+0xd4>)
 800064c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800064e:	4a11      	ldr	r2, [pc, #68]	@ (8000694 <MX_GPIO_Init+0xd4>)
 8000650:	f043 0302 	orr.w	r3, r3, #2
 8000654:	6313      	str	r3, [r2, #48]	@ 0x30
 8000656:	4b0f      	ldr	r3, [pc, #60]	@ (8000694 <MX_GPIO_Init+0xd4>)
 8000658:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800065a:	f003 0302 	and.w	r3, r3, #2
 800065e:	603b      	str	r3, [r7, #0]
 8000660:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8000662:	2200      	movs	r2, #0
 8000664:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 8000668:	480b      	ldr	r0, [pc, #44]	@ (8000698 <MX_GPIO_Init+0xd8>)
 800066a:	f001 fae7 	bl	8001c3c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800066e:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 8000672:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000674:	2301      	movs	r3, #1
 8000676:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000678:	2300      	movs	r3, #0
 800067a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800067c:	2300      	movs	r3, #0
 800067e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000680:	f107 0314 	add.w	r3, r7, #20
 8000684:	4619      	mov	r1, r3
 8000686:	4804      	ldr	r0, [pc, #16]	@ (8000698 <MX_GPIO_Init+0xd8>)
 8000688:	f001 f93c 	bl	8001904 <HAL_GPIO_Init>

}
 800068c:	bf00      	nop
 800068e:	3728      	adds	r7, #40	@ 0x28
 8000690:	46bd      	mov	sp, r7
 8000692:	bd80      	pop	{r7, pc}
 8000694:	40023800 	.word	0x40023800
 8000698:	40020c00 	.word	0x40020c00

0800069c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	b090      	sub	sp, #64	@ 0x40
 80006a0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006a2:	f000 fba9 	bl	8000df8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006a6:	f000 f851 	bl	800074c <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006aa:	f7ff ff89 	bl	80005c0 <MX_GPIO_Init>
  MX_DMA_Init();
 80006ae:	f7ff ff5f 	bl	8000570 <MX_DMA_Init>
  MX_USART1_UART_Init();
 80006b2:	f000 fa95 	bl	8000be0 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UARTEx_ReceiveToIdle_DMA(&huart1, (uint8_t*)rx_buffer, RX_BUFFER_SIZE);
 80006b6:	2240      	movs	r2, #64	@ 0x40
 80006b8:	491e      	ldr	r1, [pc, #120]	@ (8000734 <main+0x98>)
 80006ba:	481f      	ldr	r0, [pc, #124]	@ (8000738 <main+0x9c>)
 80006bc:	f002 f830 	bl	8002720 <HAL_UARTEx_ReceiveToIdle_DMA>
  __HAL_DMA_DISABLE_IT(huart1.hdmarx, DMA_IT_HT);
 80006c0:	4b1d      	ldr	r3, [pc, #116]	@ (8000738 <main+0x9c>)
 80006c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80006c4:	681b      	ldr	r3, [r3, #0]
 80006c6:	681a      	ldr	r2, [r3, #0]
 80006c8:	4b1b      	ldr	r3, [pc, #108]	@ (8000738 <main+0x9c>)
 80006ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80006cc:	681b      	ldr	r3, [r3, #0]
 80006ce:	f022 0208 	bic.w	r2, r2, #8
 80006d2:	601a      	str	r2, [r3, #0]
  __HAL_DMA_DISABLE_IT(huart1.hdmarx, DMA_IT_TC);
 80006d4:	4b18      	ldr	r3, [pc, #96]	@ (8000738 <main+0x9c>)
 80006d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80006d8:	681b      	ldr	r3, [r3, #0]
 80006da:	681a      	ldr	r2, [r3, #0]
 80006dc:	4b16      	ldr	r3, [pc, #88]	@ (8000738 <main+0x9c>)
 80006de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80006e0:	681b      	ldr	r3, [r3, #0]
 80006e2:	f022 0210 	bic.w	r2, r2, #16
 80006e6:	601a      	str	r2, [r3, #0]
  HAL_Send_AT_Message("AT+CIFSR\r\n");
 80006e8:	4814      	ldr	r0, [pc, #80]	@ (800073c <main+0xa0>)
 80006ea:	f000 f99b 	bl	8000a24 <HAL_Send_AT_Message>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (rx_event == 1) {
 80006ee:	4b14      	ldr	r3, [pc, #80]	@ (8000740 <main+0xa4>)
 80006f0:	781b      	ldrb	r3, [r3, #0]
 80006f2:	b2db      	uxtb	r3, r3
 80006f4:	2b01      	cmp	r3, #1
 80006f6:	d119      	bne.n	800072c <main+0x90>
		  rx_event = 0;
 80006f8:	4b11      	ldr	r3, [pc, #68]	@ (8000740 <main+0xa4>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	701a      	strb	r2, [r3, #0]
		  UART_String_Handling();
 80006fe:	f000 f8ab 	bl	8000858 <UART_String_Handling>
		  char result[RX_BUFFER_SIZE];

		  strcpy(result, "Luka says: ");
 8000702:	463b      	mov	r3, r7
 8000704:	4a0f      	ldr	r2, [pc, #60]	@ (8000744 <main+0xa8>)
 8000706:	ca07      	ldmia	r2, {r0, r1, r2}
 8000708:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		  strcat(result, string_buffer);
 800070c:	463b      	mov	r3, r7
 800070e:	490e      	ldr	r1, [pc, #56]	@ (8000748 <main+0xac>)
 8000710:	4618      	mov	r0, r3
 8000712:	f003 f973 	bl	80039fc <strcat>
		  HAL_UART_Transmit_DMA(&huart1, (uint8_t*)result, strlen(result));
 8000716:	463b      	mov	r3, r7
 8000718:	4618      	mov	r0, r3
 800071a:	f7ff fd59 	bl	80001d0 <strlen>
 800071e:	4603      	mov	r3, r0
 8000720:	b29a      	uxth	r2, r3
 8000722:	463b      	mov	r3, r7
 8000724:	4619      	mov	r1, r3
 8000726:	4804      	ldr	r0, [pc, #16]	@ (8000738 <main+0x9c>)
 8000728:	f001 ff8a 	bl	8002640 <HAL_UART_Transmit_DMA>

	  }
	  LED_Checking();
 800072c:	f000 f93a 	bl	80009a4 <LED_Checking>
	  if (rx_event == 1) {
 8000730:	e7dd      	b.n	80006ee <main+0x52>
 8000732:	bf00      	nop
 8000734:	200000b8 	.word	0x200000b8
 8000738:	20000144 	.word	0x20000144
 800073c:	08004350 	.word	0x08004350
 8000740:	2000013e 	.word	0x2000013e
 8000744:	0800435c 	.word	0x0800435c
 8000748:	200000f8 	.word	0x200000f8

0800074c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b094      	sub	sp, #80	@ 0x50
 8000750:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000752:	f107 0320 	add.w	r3, r7, #32
 8000756:	2230      	movs	r2, #48	@ 0x30
 8000758:	2100      	movs	r1, #0
 800075a:	4618      	mov	r0, r3
 800075c:	f003 f946 	bl	80039ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000760:	f107 030c 	add.w	r3, r7, #12
 8000764:	2200      	movs	r2, #0
 8000766:	601a      	str	r2, [r3, #0]
 8000768:	605a      	str	r2, [r3, #4]
 800076a:	609a      	str	r2, [r3, #8]
 800076c:	60da      	str	r2, [r3, #12]
 800076e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000770:	2300      	movs	r3, #0
 8000772:	60bb      	str	r3, [r7, #8]
 8000774:	4b28      	ldr	r3, [pc, #160]	@ (8000818 <SystemClock_Config+0xcc>)
 8000776:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000778:	4a27      	ldr	r2, [pc, #156]	@ (8000818 <SystemClock_Config+0xcc>)
 800077a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800077e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000780:	4b25      	ldr	r3, [pc, #148]	@ (8000818 <SystemClock_Config+0xcc>)
 8000782:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000784:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000788:	60bb      	str	r3, [r7, #8]
 800078a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800078c:	2300      	movs	r3, #0
 800078e:	607b      	str	r3, [r7, #4]
 8000790:	4b22      	ldr	r3, [pc, #136]	@ (800081c <SystemClock_Config+0xd0>)
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	4a21      	ldr	r2, [pc, #132]	@ (800081c <SystemClock_Config+0xd0>)
 8000796:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800079a:	6013      	str	r3, [r2, #0]
 800079c:	4b1f      	ldr	r3, [pc, #124]	@ (800081c <SystemClock_Config+0xd0>)
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80007a4:	607b      	str	r3, [r7, #4]
 80007a6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80007a8:	2301      	movs	r3, #1
 80007aa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80007ac:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80007b0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007b2:	2302      	movs	r3, #2
 80007b4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007b6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80007ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80007bc:	2304      	movs	r3, #4
 80007be:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80007c0:	23a8      	movs	r3, #168	@ 0xa8
 80007c2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007c4:	2302      	movs	r3, #2
 80007c6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80007c8:	2304      	movs	r3, #4
 80007ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007cc:	f107 0320 	add.w	r3, r7, #32
 80007d0:	4618      	mov	r0, r3
 80007d2:	f001 fa4d 	bl	8001c70 <HAL_RCC_OscConfig>
 80007d6:	4603      	mov	r3, r0
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d001      	beq.n	80007e0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80007dc:	f000 f93c 	bl	8000a58 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007e0:	230f      	movs	r3, #15
 80007e2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007e4:	2302      	movs	r3, #2
 80007e6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007e8:	2300      	movs	r3, #0
 80007ea:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80007ec:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80007f0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80007f2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80007f6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80007f8:	f107 030c 	add.w	r3, r7, #12
 80007fc:	2105      	movs	r1, #5
 80007fe:	4618      	mov	r0, r3
 8000800:	f001 fcae 	bl	8002160 <HAL_RCC_ClockConfig>
 8000804:	4603      	mov	r3, r0
 8000806:	2b00      	cmp	r3, #0
 8000808:	d001      	beq.n	800080e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800080a:	f000 f925 	bl	8000a58 <Error_Handler>
  }
}
 800080e:	bf00      	nop
 8000810:	3750      	adds	r7, #80	@ 0x50
 8000812:	46bd      	mov	sp, r7
 8000814:	bd80      	pop	{r7, pc}
 8000816:	bf00      	nop
 8000818:	40023800 	.word	0x40023800
 800081c:	40007000 	.word	0x40007000

08000820 <HAL_UART_TxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 8000820:	b580      	push	{r7, lr}
 8000822:	b082      	sub	sp, #8
 8000824:	af00      	add	r7, sp, #0
 8000826:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART1) {
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	4a07      	ldr	r2, [pc, #28]	@ (800084c <HAL_UART_TxCpltCallback+0x2c>)
 800082e:	4293      	cmp	r3, r2
 8000830:	d108      	bne.n	8000844 <HAL_UART_TxCpltCallback+0x24>
		uart_tx_done = 1;
 8000832:	4b07      	ldr	r3, [pc, #28]	@ (8000850 <HAL_UART_TxCpltCallback+0x30>)
 8000834:	2201      	movs	r2, #1
 8000836:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, 1);
 8000838:	2201      	movs	r2, #1
 800083a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800083e:	4805      	ldr	r0, [pc, #20]	@ (8000854 <HAL_UART_TxCpltCallback+0x34>)
 8000840:	f001 f9fc 	bl	8001c3c <HAL_GPIO_WritePin>
	}
}
 8000844:	bf00      	nop
 8000846:	3708      	adds	r7, #8
 8000848:	46bd      	mov	sp, r7
 800084a:	bd80      	pop	{r7, pc}
 800084c:	40011000 	.word	0x40011000
 8000850:	2000013d 	.word	0x2000013d
 8000854:	40020c00 	.word	0x40020c00

08000858 <UART_String_Handling>:

void UART_String_Handling() {
 8000858:	b580      	push	{r7, lr}
 800085a:	b082      	sub	sp, #8
 800085c:	af00      	add	r7, sp, #0
	if (cnt != last_size) {
 800085e:	4b40      	ldr	r3, [pc, #256]	@ (8000960 <UART_String_Handling+0x108>)
 8000860:	781b      	ldrb	r3, [r3, #0]
 8000862:	b2da      	uxtb	r2, r3
 8000864:	4b3f      	ldr	r3, [pc, #252]	@ (8000964 <UART_String_Handling+0x10c>)
 8000866:	781b      	ldrb	r3, [r3, #0]
 8000868:	b2db      	uxtb	r3, r3
 800086a:	429a      	cmp	r2, r3
 800086c:	d06e      	beq.n	800094c <UART_String_Handling+0xf4>
			if (cnt > last_size) {
 800086e:	4b3c      	ldr	r3, [pc, #240]	@ (8000960 <UART_String_Handling+0x108>)
 8000870:	781b      	ldrb	r3, [r3, #0]
 8000872:	b2da      	uxtb	r2, r3
 8000874:	4b3b      	ldr	r3, [pc, #236]	@ (8000964 <UART_String_Handling+0x10c>)
 8000876:	781b      	ldrb	r3, [r3, #0]
 8000878:	b2db      	uxtb	r3, r3
 800087a:	429a      	cmp	r2, r3
 800087c:	d925      	bls.n	80008ca <UART_String_Handling+0x72>
				NewReceivedChars = cnt - last_size;
 800087e:	4b38      	ldr	r3, [pc, #224]	@ (8000960 <UART_String_Handling+0x108>)
 8000880:	781b      	ldrb	r3, [r3, #0]
 8000882:	b2db      	uxtb	r3, r3
 8000884:	461a      	mov	r2, r3
 8000886:	4b37      	ldr	r3, [pc, #220]	@ (8000964 <UART_String_Handling+0x10c>)
 8000888:	781b      	ldrb	r3, [r3, #0]
 800088a:	b2db      	uxtb	r3, r3
 800088c:	1ad3      	subs	r3, r2, r3
 800088e:	461a      	mov	r2, r3
 8000890:	4b35      	ldr	r3, [pc, #212]	@ (8000968 <UART_String_Handling+0x110>)
 8000892:	601a      	str	r2, [r3, #0]
				memset(string_buffer,0,RX_BUFFER_SIZE);
 8000894:	2240      	movs	r2, #64	@ 0x40
 8000896:	2100      	movs	r1, #0
 8000898:	4834      	ldr	r0, [pc, #208]	@ (800096c <UART_String_Handling+0x114>)
 800089a:	f003 f8a7 	bl	80039ec <memset>
					for (uint8_t i=0; i < NewReceivedChars; i++) {
 800089e:	2300      	movs	r3, #0
 80008a0:	71fb      	strb	r3, [r7, #7]
 80008a2:	e00c      	b.n	80008be <UART_String_Handling+0x66>
						string_buffer[i] = rx_buffer[i+last_size];
 80008a4:	79fb      	ldrb	r3, [r7, #7]
 80008a6:	4a2f      	ldr	r2, [pc, #188]	@ (8000964 <UART_String_Handling+0x10c>)
 80008a8:	7812      	ldrb	r2, [r2, #0]
 80008aa:	b2d2      	uxtb	r2, r2
 80008ac:	441a      	add	r2, r3
 80008ae:	79fb      	ldrb	r3, [r7, #7]
 80008b0:	492f      	ldr	r1, [pc, #188]	@ (8000970 <UART_String_Handling+0x118>)
 80008b2:	5c89      	ldrb	r1, [r1, r2]
 80008b4:	4a2d      	ldr	r2, [pc, #180]	@ (800096c <UART_String_Handling+0x114>)
 80008b6:	54d1      	strb	r1, [r2, r3]
					for (uint8_t i=0; i < NewReceivedChars; i++) {
 80008b8:	79fb      	ldrb	r3, [r7, #7]
 80008ba:	3301      	adds	r3, #1
 80008bc:	71fb      	strb	r3, [r7, #7]
 80008be:	79fa      	ldrb	r2, [r7, #7]
 80008c0:	4b29      	ldr	r3, [pc, #164]	@ (8000968 <UART_String_Handling+0x110>)
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	429a      	cmp	r2, r3
 80008c6:	d3ed      	bcc.n	80008a4 <UART_String_Handling+0x4c>
 80008c8:	e040      	b.n	800094c <UART_String_Handling+0xf4>
					}

			}
			else {
				NewReceivedChars = RX_BUFFER_SIZE - last_size;
 80008ca:	4b26      	ldr	r3, [pc, #152]	@ (8000964 <UART_String_Handling+0x10c>)
 80008cc:	781b      	ldrb	r3, [r3, #0]
 80008ce:	b2db      	uxtb	r3, r3
 80008d0:	f1c3 0340 	rsb	r3, r3, #64	@ 0x40
 80008d4:	461a      	mov	r2, r3
 80008d6:	4b24      	ldr	r3, [pc, #144]	@ (8000968 <UART_String_Handling+0x110>)
 80008d8:	601a      	str	r2, [r3, #0]
			      for (uint8_t i = 0; i < NewReceivedChars; i++)
 80008da:	2300      	movs	r3, #0
 80008dc:	71bb      	strb	r3, [r7, #6]
 80008de:	e00d      	b.n	80008fc <UART_String_Handling+0xa4>
			      {
			        string_buffer[i] = rx_buffer[last_size + i];
 80008e0:	4b20      	ldr	r3, [pc, #128]	@ (8000964 <UART_String_Handling+0x10c>)
 80008e2:	781b      	ldrb	r3, [r3, #0]
 80008e4:	b2db      	uxtb	r3, r3
 80008e6:	461a      	mov	r2, r3
 80008e8:	79bb      	ldrb	r3, [r7, #6]
 80008ea:	441a      	add	r2, r3
 80008ec:	79bb      	ldrb	r3, [r7, #6]
 80008ee:	4920      	ldr	r1, [pc, #128]	@ (8000970 <UART_String_Handling+0x118>)
 80008f0:	5c89      	ldrb	r1, [r1, r2]
 80008f2:	4a1e      	ldr	r2, [pc, #120]	@ (800096c <UART_String_Handling+0x114>)
 80008f4:	54d1      	strb	r1, [r2, r3]
			      for (uint8_t i = 0; i < NewReceivedChars; i++)
 80008f6:	79bb      	ldrb	r3, [r7, #6]
 80008f8:	3301      	adds	r3, #1
 80008fa:	71bb      	strb	r3, [r7, #6]
 80008fc:	79ba      	ldrb	r2, [r7, #6]
 80008fe:	4b1a      	ldr	r3, [pc, #104]	@ (8000968 <UART_String_Handling+0x110>)
 8000900:	681b      	ldr	r3, [r3, #0]
 8000902:	429a      	cmp	r2, r3
 8000904:	d3ec      	bcc.n	80008e0 <UART_String_Handling+0x88>
			      }
			      if (cnt > 0) {
 8000906:	4b16      	ldr	r3, [pc, #88]	@ (8000960 <UART_String_Handling+0x108>)
 8000908:	781b      	ldrb	r3, [r3, #0]
 800090a:	b2db      	uxtb	r3, r3
 800090c:	2b00      	cmp	r3, #0
 800090e:	d01d      	beq.n	800094c <UART_String_Handling+0xf4>
			    	  for (uint8_t i = 0; i < cnt; i++)
 8000910:	2300      	movs	r3, #0
 8000912:	717b      	strb	r3, [r7, #5]
 8000914:	e00b      	b.n	800092e <UART_String_Handling+0xd6>
			    	  {
			    	    string_buffer[NewReceivedChars + i] = rx_buffer[i];
 8000916:	797a      	ldrb	r2, [r7, #5]
 8000918:	7979      	ldrb	r1, [r7, #5]
 800091a:	4b13      	ldr	r3, [pc, #76]	@ (8000968 <UART_String_Handling+0x110>)
 800091c:	681b      	ldr	r3, [r3, #0]
 800091e:	440b      	add	r3, r1
 8000920:	4913      	ldr	r1, [pc, #76]	@ (8000970 <UART_String_Handling+0x118>)
 8000922:	5c89      	ldrb	r1, [r1, r2]
 8000924:	4a11      	ldr	r2, [pc, #68]	@ (800096c <UART_String_Handling+0x114>)
 8000926:	54d1      	strb	r1, [r2, r3]
			    	  for (uint8_t i = 0; i < cnt; i++)
 8000928:	797b      	ldrb	r3, [r7, #5]
 800092a:	3301      	adds	r3, #1
 800092c:	717b      	strb	r3, [r7, #5]
 800092e:	4b0c      	ldr	r3, [pc, #48]	@ (8000960 <UART_String_Handling+0x108>)
 8000930:	781b      	ldrb	r3, [r3, #0]
 8000932:	b2db      	uxtb	r3, r3
 8000934:	797a      	ldrb	r2, [r7, #5]
 8000936:	429a      	cmp	r2, r3
 8000938:	d3ed      	bcc.n	8000916 <UART_String_Handling+0xbe>
			    	  }
			    	  NewReceivedChars += cnt;
 800093a:	4b09      	ldr	r3, [pc, #36]	@ (8000960 <UART_String_Handling+0x108>)
 800093c:	781b      	ldrb	r3, [r3, #0]
 800093e:	b2db      	uxtb	r3, r3
 8000940:	461a      	mov	r2, r3
 8000942:	4b09      	ldr	r3, [pc, #36]	@ (8000968 <UART_String_Handling+0x110>)
 8000944:	681b      	ldr	r3, [r3, #0]
 8000946:	4413      	add	r3, r2
 8000948:	4a07      	ldr	r2, [pc, #28]	@ (8000968 <UART_String_Handling+0x110>)
 800094a:	6013      	str	r3, [r2, #0]
			      }
			}

		}
		//strip_crlf(string_buffer);
		last_size = cnt;
 800094c:	4b04      	ldr	r3, [pc, #16]	@ (8000960 <UART_String_Handling+0x108>)
 800094e:	781b      	ldrb	r3, [r3, #0]
 8000950:	b2da      	uxtb	r2, r3
 8000952:	4b04      	ldr	r3, [pc, #16]	@ (8000964 <UART_String_Handling+0x10c>)
 8000954:	701a      	strb	r2, [r3, #0]
}
 8000956:	bf00      	nop
 8000958:	3708      	adds	r7, #8
 800095a:	46bd      	mov	sp, r7
 800095c:	bd80      	pop	{r7, pc}
 800095e:	bf00      	nop
 8000960:	2000013c 	.word	0x2000013c
 8000964:	2000013f 	.word	0x2000013f
 8000968:	20000138 	.word	0x20000138
 800096c:	200000f8 	.word	0x200000f8
 8000970:	200000b8 	.word	0x200000b8

08000974 <HAL_UARTEx_RxEventCallback>:



void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size) {
 8000974:	b480      	push	{r7}
 8000976:	b083      	sub	sp, #12
 8000978:	af00      	add	r7, sp, #0
 800097a:	6078      	str	r0, [r7, #4]
 800097c:	460b      	mov	r3, r1
 800097e:	807b      	strh	r3, [r7, #2]
	rx_event = 1;
 8000980:	4b06      	ldr	r3, [pc, #24]	@ (800099c <HAL_UARTEx_RxEventCallback+0x28>)
 8000982:	2201      	movs	r2, #1
 8000984:	701a      	strb	r2, [r3, #0]
	cnt = Size;
 8000986:	887b      	ldrh	r3, [r7, #2]
 8000988:	b2da      	uxtb	r2, r3
 800098a:	4b05      	ldr	r3, [pc, #20]	@ (80009a0 <HAL_UARTEx_RxEventCallback+0x2c>)
 800098c:	701a      	strb	r2, [r3, #0]
}
 800098e:	bf00      	nop
 8000990:	370c      	adds	r7, #12
 8000992:	46bd      	mov	sp, r7
 8000994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000998:	4770      	bx	lr
 800099a:	bf00      	nop
 800099c:	2000013e 	.word	0x2000013e
 80009a0:	2000013c 	.word	0x2000013c

080009a4 <LED_Checking>:

void LED_Checking() {
 80009a4:	b580      	push	{r7, lr}
 80009a6:	af00      	add	r7, sp, #0
	  if (strstr(string_buffer, "OK") != NULL) {
 80009a8:	491a      	ldr	r1, [pc, #104]	@ (8000a14 <LED_Checking+0x70>)
 80009aa:	481b      	ldr	r0, [pc, #108]	@ (8000a18 <LED_Checking+0x74>)
 80009ac:	f003 f835 	bl	8003a1a <strstr>
 80009b0:	4603      	mov	r3, r0
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d00c      	beq.n	80009d0 <LED_Checking+0x2c>
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 80009b6:	2200      	movs	r2, #0
 80009b8:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80009bc:	4817      	ldr	r0, [pc, #92]	@ (8000a1c <LED_Checking+0x78>)
 80009be:	f001 f93d 	bl	8001c3c <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
 80009c2:	2201      	movs	r2, #1
 80009c4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80009c8:	4814      	ldr	r0, [pc, #80]	@ (8000a1c <LED_Checking+0x78>)
 80009ca:	f001 f937 	bl	8001c3c <HAL_GPIO_WritePin>
	  }
	  else {
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
	  }
}
 80009ce:	e01f      	b.n	8000a10 <LED_Checking+0x6c>
	  else if (strstr(string_buffer, "ERROR") != NULL) {
 80009d0:	4913      	ldr	r1, [pc, #76]	@ (8000a20 <LED_Checking+0x7c>)
 80009d2:	4811      	ldr	r0, [pc, #68]	@ (8000a18 <LED_Checking+0x74>)
 80009d4:	f003 f821 	bl	8003a1a <strstr>
 80009d8:	4603      	mov	r3, r0
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d00c      	beq.n	80009f8 <LED_Checking+0x54>
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 80009de:	2200      	movs	r2, #0
 80009e0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80009e4:	480d      	ldr	r0, [pc, #52]	@ (8000a1c <LED_Checking+0x78>)
 80009e6:	f001 f929 	bl	8001c3c <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 80009ea:	2201      	movs	r2, #1
 80009ec:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80009f0:	480a      	ldr	r0, [pc, #40]	@ (8000a1c <LED_Checking+0x78>)
 80009f2:	f001 f923 	bl	8001c3c <HAL_GPIO_WritePin>
}
 80009f6:	e00b      	b.n	8000a10 <LED_Checking+0x6c>
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 80009f8:	2200      	movs	r2, #0
 80009fa:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80009fe:	4807      	ldr	r0, [pc, #28]	@ (8000a1c <LED_Checking+0x78>)
 8000a00:	f001 f91c 	bl	8001c3c <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 8000a04:	2200      	movs	r2, #0
 8000a06:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000a0a:	4804      	ldr	r0, [pc, #16]	@ (8000a1c <LED_Checking+0x78>)
 8000a0c:	f001 f916 	bl	8001c3c <HAL_GPIO_WritePin>
}
 8000a10:	bf00      	nop
 8000a12:	bd80      	pop	{r7, pc}
 8000a14:	08004368 	.word	0x08004368
 8000a18:	200000f8 	.word	0x200000f8
 8000a1c:	40020c00 	.word	0x40020c00
 8000a20:	0800436c 	.word	0x0800436c

08000a24 <HAL_Send_AT_Message>:
    while (len > 0 && (str[len - 1] == '\r' || str[len - 1] == '\n')) {
        str[--len] = '\0';
    }
}

void HAL_Send_AT_Message(char* buffer) {
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b082      	sub	sp, #8
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	6078      	str	r0, [r7, #4]
	  sprintf(tx_buffer, buffer);
 8000a2c:	6879      	ldr	r1, [r7, #4]
 8000a2e:	4808      	ldr	r0, [pc, #32]	@ (8000a50 <HAL_Send_AT_Message+0x2c>)
 8000a30:	f002 ffbc 	bl	80039ac <siprintf>
	  HAL_UART_Transmit_DMA(&huart1, (uint8_t*)tx_buffer, strlen(tx_buffer));
 8000a34:	4806      	ldr	r0, [pc, #24]	@ (8000a50 <HAL_Send_AT_Message+0x2c>)
 8000a36:	f7ff fbcb 	bl	80001d0 <strlen>
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	b29b      	uxth	r3, r3
 8000a3e:	461a      	mov	r2, r3
 8000a40:	4903      	ldr	r1, [pc, #12]	@ (8000a50 <HAL_Send_AT_Message+0x2c>)
 8000a42:	4804      	ldr	r0, [pc, #16]	@ (8000a54 <HAL_Send_AT_Message+0x30>)
 8000a44:	f001 fdfc 	bl	8002640 <HAL_UART_Transmit_DMA>
}
 8000a48:	bf00      	nop
 8000a4a:	3708      	adds	r7, #8
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	bd80      	pop	{r7, pc}
 8000a50:	20000078 	.word	0x20000078
 8000a54:	20000144 	.word	0x20000144

08000a58 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a5c:	b672      	cpsid	i
}
 8000a5e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a60:	bf00      	nop
 8000a62:	e7fd      	b.n	8000a60 <Error_Handler+0x8>

08000a64 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a64:	b480      	push	{r7}
 8000a66:	b083      	sub	sp, #12
 8000a68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	607b      	str	r3, [r7, #4]
 8000a6e:	4b10      	ldr	r3, [pc, #64]	@ (8000ab0 <HAL_MspInit+0x4c>)
 8000a70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a72:	4a0f      	ldr	r2, [pc, #60]	@ (8000ab0 <HAL_MspInit+0x4c>)
 8000a74:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000a78:	6453      	str	r3, [r2, #68]	@ 0x44
 8000a7a:	4b0d      	ldr	r3, [pc, #52]	@ (8000ab0 <HAL_MspInit+0x4c>)
 8000a7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a7e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000a82:	607b      	str	r3, [r7, #4]
 8000a84:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a86:	2300      	movs	r3, #0
 8000a88:	603b      	str	r3, [r7, #0]
 8000a8a:	4b09      	ldr	r3, [pc, #36]	@ (8000ab0 <HAL_MspInit+0x4c>)
 8000a8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a8e:	4a08      	ldr	r2, [pc, #32]	@ (8000ab0 <HAL_MspInit+0x4c>)
 8000a90:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a94:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a96:	4b06      	ldr	r3, [pc, #24]	@ (8000ab0 <HAL_MspInit+0x4c>)
 8000a98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a9a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a9e:	603b      	str	r3, [r7, #0]
 8000aa0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000aa2:	bf00      	nop
 8000aa4:	370c      	adds	r7, #12
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aac:	4770      	bx	lr
 8000aae:	bf00      	nop
 8000ab0:	40023800 	.word	0x40023800

08000ab4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ab8:	bf00      	nop
 8000aba:	e7fd      	b.n	8000ab8 <NMI_Handler+0x4>

08000abc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000abc:	b480      	push	{r7}
 8000abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ac0:	bf00      	nop
 8000ac2:	e7fd      	b.n	8000ac0 <HardFault_Handler+0x4>

08000ac4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ac8:	bf00      	nop
 8000aca:	e7fd      	b.n	8000ac8 <MemManage_Handler+0x4>

08000acc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000acc:	b480      	push	{r7}
 8000ace:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ad0:	bf00      	nop
 8000ad2:	e7fd      	b.n	8000ad0 <BusFault_Handler+0x4>

08000ad4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ad8:	bf00      	nop
 8000ada:	e7fd      	b.n	8000ad8 <UsageFault_Handler+0x4>

08000adc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000adc:	b480      	push	{r7}
 8000ade:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ae0:	bf00      	nop
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae8:	4770      	bx	lr

08000aea <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000aea:	b480      	push	{r7}
 8000aec:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000aee:	bf00      	nop
 8000af0:	46bd      	mov	sp, r7
 8000af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af6:	4770      	bx	lr

08000af8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000af8:	b480      	push	{r7}
 8000afa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000afc:	bf00      	nop
 8000afe:	46bd      	mov	sp, r7
 8000b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b04:	4770      	bx	lr

08000b06 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b06:	b580      	push	{r7, lr}
 8000b08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b0a:	f000 f9c7 	bl	8000e9c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b0e:	bf00      	nop
 8000b10:	bd80      	pop	{r7, pc}
	...

08000b14 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000b18:	4802      	ldr	r0, [pc, #8]	@ (8000b24 <USART1_IRQHandler+0x10>)
 8000b1a:	f001 fe5f 	bl	80027dc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000b1e:	bf00      	nop
 8000b20:	bd80      	pop	{r7, pc}
 8000b22:	bf00      	nop
 8000b24:	20000144 	.word	0x20000144

08000b28 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8000b2c:	4802      	ldr	r0, [pc, #8]	@ (8000b38 <DMA2_Stream2_IRQHandler+0x10>)
 8000b2e:	f000 fc7f 	bl	8001430 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8000b32:	bf00      	nop
 8000b34:	bd80      	pop	{r7, pc}
 8000b36:	bf00      	nop
 8000b38:	2000018c 	.word	0x2000018c

08000b3c <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8000b40:	4802      	ldr	r0, [pc, #8]	@ (8000b4c <DMA2_Stream7_IRQHandler+0x10>)
 8000b42:	f000 fc75 	bl	8001430 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8000b46:	bf00      	nop
 8000b48:	bd80      	pop	{r7, pc}
 8000b4a:	bf00      	nop
 8000b4c:	200001ec 	.word	0x200001ec

08000b50 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b086      	sub	sp, #24
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b58:	4a14      	ldr	r2, [pc, #80]	@ (8000bac <_sbrk+0x5c>)
 8000b5a:	4b15      	ldr	r3, [pc, #84]	@ (8000bb0 <_sbrk+0x60>)
 8000b5c:	1ad3      	subs	r3, r2, r3
 8000b5e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b60:	697b      	ldr	r3, [r7, #20]
 8000b62:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b64:	4b13      	ldr	r3, [pc, #76]	@ (8000bb4 <_sbrk+0x64>)
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d102      	bne.n	8000b72 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b6c:	4b11      	ldr	r3, [pc, #68]	@ (8000bb4 <_sbrk+0x64>)
 8000b6e:	4a12      	ldr	r2, [pc, #72]	@ (8000bb8 <_sbrk+0x68>)
 8000b70:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b72:	4b10      	ldr	r3, [pc, #64]	@ (8000bb4 <_sbrk+0x64>)
 8000b74:	681a      	ldr	r2, [r3, #0]
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	4413      	add	r3, r2
 8000b7a:	693a      	ldr	r2, [r7, #16]
 8000b7c:	429a      	cmp	r2, r3
 8000b7e:	d207      	bcs.n	8000b90 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b80:	f002 ff62 	bl	8003a48 <__errno>
 8000b84:	4603      	mov	r3, r0
 8000b86:	220c      	movs	r2, #12
 8000b88:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b8a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000b8e:	e009      	b.n	8000ba4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b90:	4b08      	ldr	r3, [pc, #32]	@ (8000bb4 <_sbrk+0x64>)
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b96:	4b07      	ldr	r3, [pc, #28]	@ (8000bb4 <_sbrk+0x64>)
 8000b98:	681a      	ldr	r2, [r3, #0]
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	4413      	add	r3, r2
 8000b9e:	4a05      	ldr	r2, [pc, #20]	@ (8000bb4 <_sbrk+0x64>)
 8000ba0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ba2:	68fb      	ldr	r3, [r7, #12]
}
 8000ba4:	4618      	mov	r0, r3
 8000ba6:	3718      	adds	r7, #24
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	bd80      	pop	{r7, pc}
 8000bac:	20020000 	.word	0x20020000
 8000bb0:	00000400 	.word	0x00000400
 8000bb4:	20000140 	.word	0x20000140
 8000bb8:	20000398 	.word	0x20000398

08000bbc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000bc0:	4b06      	ldr	r3, [pc, #24]	@ (8000bdc <SystemInit+0x20>)
 8000bc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000bc6:	4a05      	ldr	r2, [pc, #20]	@ (8000bdc <SystemInit+0x20>)
 8000bc8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000bcc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000bd0:	bf00      	nop
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd8:	4770      	bx	lr
 8000bda:	bf00      	nop
 8000bdc:	e000ed00 	.word	0xe000ed00

08000be0 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000be4:	4b11      	ldr	r3, [pc, #68]	@ (8000c2c <MX_USART1_UART_Init+0x4c>)
 8000be6:	4a12      	ldr	r2, [pc, #72]	@ (8000c30 <MX_USART1_UART_Init+0x50>)
 8000be8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000bea:	4b10      	ldr	r3, [pc, #64]	@ (8000c2c <MX_USART1_UART_Init+0x4c>)
 8000bec:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000bf0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000bf2:	4b0e      	ldr	r3, [pc, #56]	@ (8000c2c <MX_USART1_UART_Init+0x4c>)
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000bf8:	4b0c      	ldr	r3, [pc, #48]	@ (8000c2c <MX_USART1_UART_Init+0x4c>)
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000bfe:	4b0b      	ldr	r3, [pc, #44]	@ (8000c2c <MX_USART1_UART_Init+0x4c>)
 8000c00:	2200      	movs	r2, #0
 8000c02:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000c04:	4b09      	ldr	r3, [pc, #36]	@ (8000c2c <MX_USART1_UART_Init+0x4c>)
 8000c06:	220c      	movs	r2, #12
 8000c08:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c0a:	4b08      	ldr	r3, [pc, #32]	@ (8000c2c <MX_USART1_UART_Init+0x4c>)
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c10:	4b06      	ldr	r3, [pc, #24]	@ (8000c2c <MX_USART1_UART_Init+0x4c>)
 8000c12:	2200      	movs	r2, #0
 8000c14:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000c16:	4805      	ldr	r0, [pc, #20]	@ (8000c2c <MX_USART1_UART_Init+0x4c>)
 8000c18:	f001 fcc2 	bl	80025a0 <HAL_UART_Init>
 8000c1c:	4603      	mov	r3, r0
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d001      	beq.n	8000c26 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000c22:	f7ff ff19 	bl	8000a58 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000c26:	bf00      	nop
 8000c28:	bd80      	pop	{r7, pc}
 8000c2a:	bf00      	nop
 8000c2c:	20000144 	.word	0x20000144
 8000c30:	40011000 	.word	0x40011000

08000c34 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b08a      	sub	sp, #40	@ 0x28
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c3c:	f107 0314 	add.w	r3, r7, #20
 8000c40:	2200      	movs	r2, #0
 8000c42:	601a      	str	r2, [r3, #0]
 8000c44:	605a      	str	r2, [r3, #4]
 8000c46:	609a      	str	r2, [r3, #8]
 8000c48:	60da      	str	r2, [r3, #12]
 8000c4a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	4a4d      	ldr	r2, [pc, #308]	@ (8000d88 <HAL_UART_MspInit+0x154>)
 8000c52:	4293      	cmp	r3, r2
 8000c54:	f040 8093 	bne.w	8000d7e <HAL_UART_MspInit+0x14a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000c58:	2300      	movs	r3, #0
 8000c5a:	613b      	str	r3, [r7, #16]
 8000c5c:	4b4b      	ldr	r3, [pc, #300]	@ (8000d8c <HAL_UART_MspInit+0x158>)
 8000c5e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c60:	4a4a      	ldr	r2, [pc, #296]	@ (8000d8c <HAL_UART_MspInit+0x158>)
 8000c62:	f043 0310 	orr.w	r3, r3, #16
 8000c66:	6453      	str	r3, [r2, #68]	@ 0x44
 8000c68:	4b48      	ldr	r3, [pc, #288]	@ (8000d8c <HAL_UART_MspInit+0x158>)
 8000c6a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c6c:	f003 0310 	and.w	r3, r3, #16
 8000c70:	613b      	str	r3, [r7, #16]
 8000c72:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c74:	2300      	movs	r3, #0
 8000c76:	60fb      	str	r3, [r7, #12]
 8000c78:	4b44      	ldr	r3, [pc, #272]	@ (8000d8c <HAL_UART_MspInit+0x158>)
 8000c7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c7c:	4a43      	ldr	r2, [pc, #268]	@ (8000d8c <HAL_UART_MspInit+0x158>)
 8000c7e:	f043 0302 	orr.w	r3, r3, #2
 8000c82:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c84:	4b41      	ldr	r3, [pc, #260]	@ (8000d8c <HAL_UART_MspInit+0x158>)
 8000c86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c88:	f003 0302 	and.w	r3, r3, #2
 8000c8c:	60fb      	str	r3, [r7, #12]
 8000c8e:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000c90:	23c0      	movs	r3, #192	@ 0xc0
 8000c92:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c94:	2302      	movs	r3, #2
 8000c96:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c9c:	2303      	movs	r3, #3
 8000c9e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000ca0:	2307      	movs	r3, #7
 8000ca2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ca4:	f107 0314 	add.w	r3, r7, #20
 8000ca8:	4619      	mov	r1, r3
 8000caa:	4839      	ldr	r0, [pc, #228]	@ (8000d90 <HAL_UART_MspInit+0x15c>)
 8000cac:	f000 fe2a 	bl	8001904 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8000cb0:	4b38      	ldr	r3, [pc, #224]	@ (8000d94 <HAL_UART_MspInit+0x160>)
 8000cb2:	4a39      	ldr	r2, [pc, #228]	@ (8000d98 <HAL_UART_MspInit+0x164>)
 8000cb4:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8000cb6:	4b37      	ldr	r3, [pc, #220]	@ (8000d94 <HAL_UART_MspInit+0x160>)
 8000cb8:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8000cbc:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000cbe:	4b35      	ldr	r3, [pc, #212]	@ (8000d94 <HAL_UART_MspInit+0x160>)
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000cc4:	4b33      	ldr	r3, [pc, #204]	@ (8000d94 <HAL_UART_MspInit+0x160>)
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000cca:	4b32      	ldr	r3, [pc, #200]	@ (8000d94 <HAL_UART_MspInit+0x160>)
 8000ccc:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000cd0:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000cd2:	4b30      	ldr	r3, [pc, #192]	@ (8000d94 <HAL_UART_MspInit+0x160>)
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000cd8:	4b2e      	ldr	r3, [pc, #184]	@ (8000d94 <HAL_UART_MspInit+0x160>)
 8000cda:	2200      	movs	r2, #0
 8000cdc:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8000cde:	4b2d      	ldr	r3, [pc, #180]	@ (8000d94 <HAL_UART_MspInit+0x160>)
 8000ce0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000ce4:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8000ce6:	4b2b      	ldr	r3, [pc, #172]	@ (8000d94 <HAL_UART_MspInit+0x160>)
 8000ce8:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000cec:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000cee:	4b29      	ldr	r3, [pc, #164]	@ (8000d94 <HAL_UART_MspInit+0x160>)
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8000cf4:	4827      	ldr	r0, [pc, #156]	@ (8000d94 <HAL_UART_MspInit+0x160>)
 8000cf6:	f000 fa03 	bl	8001100 <HAL_DMA_Init>
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d001      	beq.n	8000d04 <HAL_UART_MspInit+0xd0>
    {
      Error_Handler();
 8000d00:	f7ff feaa 	bl	8000a58 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	4a23      	ldr	r2, [pc, #140]	@ (8000d94 <HAL_UART_MspInit+0x160>)
 8000d08:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000d0a:	4a22      	ldr	r2, [pc, #136]	@ (8000d94 <HAL_UART_MspInit+0x160>)
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 8000d10:	4b22      	ldr	r3, [pc, #136]	@ (8000d9c <HAL_UART_MspInit+0x168>)
 8000d12:	4a23      	ldr	r2, [pc, #140]	@ (8000da0 <HAL_UART_MspInit+0x16c>)
 8000d14:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 8000d16:	4b21      	ldr	r3, [pc, #132]	@ (8000d9c <HAL_UART_MspInit+0x168>)
 8000d18:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8000d1c:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000d1e:	4b1f      	ldr	r3, [pc, #124]	@ (8000d9c <HAL_UART_MspInit+0x168>)
 8000d20:	2240      	movs	r2, #64	@ 0x40
 8000d22:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d24:	4b1d      	ldr	r3, [pc, #116]	@ (8000d9c <HAL_UART_MspInit+0x168>)
 8000d26:	2200      	movs	r2, #0
 8000d28:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000d2a:	4b1c      	ldr	r3, [pc, #112]	@ (8000d9c <HAL_UART_MspInit+0x168>)
 8000d2c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000d30:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000d32:	4b1a      	ldr	r3, [pc, #104]	@ (8000d9c <HAL_UART_MspInit+0x168>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000d38:	4b18      	ldr	r3, [pc, #96]	@ (8000d9c <HAL_UART_MspInit+0x168>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8000d3e:	4b17      	ldr	r3, [pc, #92]	@ (8000d9c <HAL_UART_MspInit+0x168>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8000d44:	4b15      	ldr	r3, [pc, #84]	@ (8000d9c <HAL_UART_MspInit+0x168>)
 8000d46:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000d4a:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000d4c:	4b13      	ldr	r3, [pc, #76]	@ (8000d9c <HAL_UART_MspInit+0x168>)
 8000d4e:	2200      	movs	r2, #0
 8000d50:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8000d52:	4812      	ldr	r0, [pc, #72]	@ (8000d9c <HAL_UART_MspInit+0x168>)
 8000d54:	f000 f9d4 	bl	8001100 <HAL_DMA_Init>
 8000d58:	4603      	mov	r3, r0
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d001      	beq.n	8000d62 <HAL_UART_MspInit+0x12e>
    {
      Error_Handler();
 8000d5e:	f7ff fe7b 	bl	8000a58 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	4a0d      	ldr	r2, [pc, #52]	@ (8000d9c <HAL_UART_MspInit+0x168>)
 8000d66:	639a      	str	r2, [r3, #56]	@ 0x38
 8000d68:	4a0c      	ldr	r2, [pc, #48]	@ (8000d9c <HAL_UART_MspInit+0x168>)
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000d6e:	2200      	movs	r2, #0
 8000d70:	2100      	movs	r1, #0
 8000d72:	2025      	movs	r0, #37	@ 0x25
 8000d74:	f000 f98d 	bl	8001092 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000d78:	2025      	movs	r0, #37	@ 0x25
 8000d7a:	f000 f9a6 	bl	80010ca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8000d7e:	bf00      	nop
 8000d80:	3728      	adds	r7, #40	@ 0x28
 8000d82:	46bd      	mov	sp, r7
 8000d84:	bd80      	pop	{r7, pc}
 8000d86:	bf00      	nop
 8000d88:	40011000 	.word	0x40011000
 8000d8c:	40023800 	.word	0x40023800
 8000d90:	40020400 	.word	0x40020400
 8000d94:	2000018c 	.word	0x2000018c
 8000d98:	40026440 	.word	0x40026440
 8000d9c:	200001ec 	.word	0x200001ec
 8000da0:	400264b8 	.word	0x400264b8

08000da4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000da4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000ddc <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000da8:	f7ff ff08 	bl	8000bbc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000dac:	480c      	ldr	r0, [pc, #48]	@ (8000de0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000dae:	490d      	ldr	r1, [pc, #52]	@ (8000de4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000db0:	4a0d      	ldr	r2, [pc, #52]	@ (8000de8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000db2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000db4:	e002      	b.n	8000dbc <LoopCopyDataInit>

08000db6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000db6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000db8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000dba:	3304      	adds	r3, #4

08000dbc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000dbc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dbe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000dc0:	d3f9      	bcc.n	8000db6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000dc2:	4a0a      	ldr	r2, [pc, #40]	@ (8000dec <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000dc4:	4c0a      	ldr	r4, [pc, #40]	@ (8000df0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000dc6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000dc8:	e001      	b.n	8000dce <LoopFillZerobss>

08000dca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000dca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000dcc:	3204      	adds	r2, #4

08000dce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000dce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000dd0:	d3fb      	bcc.n	8000dca <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000dd2:	f002 fe3f 	bl	8003a54 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000dd6:	f7ff fc61 	bl	800069c <main>
  bx  lr    
 8000dda:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000ddc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000de0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000de4:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000de8:	080043d8 	.word	0x080043d8
  ldr r2, =_sbss
 8000dec:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000df0:	20000398 	.word	0x20000398

08000df4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000df4:	e7fe      	b.n	8000df4 <ADC_IRQHandler>
	...

08000df8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000dfc:	4b0e      	ldr	r3, [pc, #56]	@ (8000e38 <HAL_Init+0x40>)
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	4a0d      	ldr	r2, [pc, #52]	@ (8000e38 <HAL_Init+0x40>)
 8000e02:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000e06:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e08:	4b0b      	ldr	r3, [pc, #44]	@ (8000e38 <HAL_Init+0x40>)
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	4a0a      	ldr	r2, [pc, #40]	@ (8000e38 <HAL_Init+0x40>)
 8000e0e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000e12:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e14:	4b08      	ldr	r3, [pc, #32]	@ (8000e38 <HAL_Init+0x40>)
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	4a07      	ldr	r2, [pc, #28]	@ (8000e38 <HAL_Init+0x40>)
 8000e1a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000e1e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e20:	2003      	movs	r0, #3
 8000e22:	f000 f92b 	bl	800107c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e26:	200f      	movs	r0, #15
 8000e28:	f000 f808 	bl	8000e3c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e2c:	f7ff fe1a 	bl	8000a64 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e30:	2300      	movs	r3, #0
}
 8000e32:	4618      	mov	r0, r3
 8000e34:	bd80      	pop	{r7, pc}
 8000e36:	bf00      	nop
 8000e38:	40023c00 	.word	0x40023c00

08000e3c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b082      	sub	sp, #8
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e44:	4b12      	ldr	r3, [pc, #72]	@ (8000e90 <HAL_InitTick+0x54>)
 8000e46:	681a      	ldr	r2, [r3, #0]
 8000e48:	4b12      	ldr	r3, [pc, #72]	@ (8000e94 <HAL_InitTick+0x58>)
 8000e4a:	781b      	ldrb	r3, [r3, #0]
 8000e4c:	4619      	mov	r1, r3
 8000e4e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000e52:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e56:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	f000 f943 	bl	80010e6 <HAL_SYSTICK_Config>
 8000e60:	4603      	mov	r3, r0
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d001      	beq.n	8000e6a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e66:	2301      	movs	r3, #1
 8000e68:	e00e      	b.n	8000e88 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	2b0f      	cmp	r3, #15
 8000e6e:	d80a      	bhi.n	8000e86 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e70:	2200      	movs	r2, #0
 8000e72:	6879      	ldr	r1, [r7, #4]
 8000e74:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000e78:	f000 f90b 	bl	8001092 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e7c:	4a06      	ldr	r2, [pc, #24]	@ (8000e98 <HAL_InitTick+0x5c>)
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e82:	2300      	movs	r3, #0
 8000e84:	e000      	b.n	8000e88 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e86:	2301      	movs	r3, #1
}
 8000e88:	4618      	mov	r0, r3
 8000e8a:	3708      	adds	r7, #8
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	bd80      	pop	{r7, pc}
 8000e90:	20000000 	.word	0x20000000
 8000e94:	20000008 	.word	0x20000008
 8000e98:	20000004 	.word	0x20000004

08000e9c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ea0:	4b06      	ldr	r3, [pc, #24]	@ (8000ebc <HAL_IncTick+0x20>)
 8000ea2:	781b      	ldrb	r3, [r3, #0]
 8000ea4:	461a      	mov	r2, r3
 8000ea6:	4b06      	ldr	r3, [pc, #24]	@ (8000ec0 <HAL_IncTick+0x24>)
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	4413      	add	r3, r2
 8000eac:	4a04      	ldr	r2, [pc, #16]	@ (8000ec0 <HAL_IncTick+0x24>)
 8000eae:	6013      	str	r3, [r2, #0]
}
 8000eb0:	bf00      	nop
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb8:	4770      	bx	lr
 8000eba:	bf00      	nop
 8000ebc:	20000008 	.word	0x20000008
 8000ec0:	2000024c 	.word	0x2000024c

08000ec4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	af00      	add	r7, sp, #0
  return uwTick;
 8000ec8:	4b03      	ldr	r3, [pc, #12]	@ (8000ed8 <HAL_GetTick+0x14>)
 8000eca:	681b      	ldr	r3, [r3, #0]
}
 8000ecc:	4618      	mov	r0, r3
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed4:	4770      	bx	lr
 8000ed6:	bf00      	nop
 8000ed8:	2000024c 	.word	0x2000024c

08000edc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000edc:	b480      	push	{r7}
 8000ede:	b085      	sub	sp, #20
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	f003 0307 	and.w	r3, r3, #7
 8000eea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000eec:	4b0c      	ldr	r3, [pc, #48]	@ (8000f20 <__NVIC_SetPriorityGrouping+0x44>)
 8000eee:	68db      	ldr	r3, [r3, #12]
 8000ef0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ef2:	68ba      	ldr	r2, [r7, #8]
 8000ef4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000ef8:	4013      	ands	r3, r2
 8000efa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000efc:	68fb      	ldr	r3, [r7, #12]
 8000efe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f00:	68bb      	ldr	r3, [r7, #8]
 8000f02:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f04:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000f08:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000f0c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f0e:	4a04      	ldr	r2, [pc, #16]	@ (8000f20 <__NVIC_SetPriorityGrouping+0x44>)
 8000f10:	68bb      	ldr	r3, [r7, #8]
 8000f12:	60d3      	str	r3, [r2, #12]
}
 8000f14:	bf00      	nop
 8000f16:	3714      	adds	r7, #20
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1e:	4770      	bx	lr
 8000f20:	e000ed00 	.word	0xe000ed00

08000f24 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f24:	b480      	push	{r7}
 8000f26:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f28:	4b04      	ldr	r3, [pc, #16]	@ (8000f3c <__NVIC_GetPriorityGrouping+0x18>)
 8000f2a:	68db      	ldr	r3, [r3, #12]
 8000f2c:	0a1b      	lsrs	r3, r3, #8
 8000f2e:	f003 0307 	and.w	r3, r3, #7
}
 8000f32:	4618      	mov	r0, r3
 8000f34:	46bd      	mov	sp, r7
 8000f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3a:	4770      	bx	lr
 8000f3c:	e000ed00 	.word	0xe000ed00

08000f40 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f40:	b480      	push	{r7}
 8000f42:	b083      	sub	sp, #12
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	4603      	mov	r3, r0
 8000f48:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	db0b      	blt.n	8000f6a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f52:	79fb      	ldrb	r3, [r7, #7]
 8000f54:	f003 021f 	and.w	r2, r3, #31
 8000f58:	4907      	ldr	r1, [pc, #28]	@ (8000f78 <__NVIC_EnableIRQ+0x38>)
 8000f5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f5e:	095b      	lsrs	r3, r3, #5
 8000f60:	2001      	movs	r0, #1
 8000f62:	fa00 f202 	lsl.w	r2, r0, r2
 8000f66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000f6a:	bf00      	nop
 8000f6c:	370c      	adds	r7, #12
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f74:	4770      	bx	lr
 8000f76:	bf00      	nop
 8000f78:	e000e100 	.word	0xe000e100

08000f7c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	b083      	sub	sp, #12
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	4603      	mov	r3, r0
 8000f84:	6039      	str	r1, [r7, #0]
 8000f86:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	db0a      	blt.n	8000fa6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f90:	683b      	ldr	r3, [r7, #0]
 8000f92:	b2da      	uxtb	r2, r3
 8000f94:	490c      	ldr	r1, [pc, #48]	@ (8000fc8 <__NVIC_SetPriority+0x4c>)
 8000f96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f9a:	0112      	lsls	r2, r2, #4
 8000f9c:	b2d2      	uxtb	r2, r2
 8000f9e:	440b      	add	r3, r1
 8000fa0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fa4:	e00a      	b.n	8000fbc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fa6:	683b      	ldr	r3, [r7, #0]
 8000fa8:	b2da      	uxtb	r2, r3
 8000faa:	4908      	ldr	r1, [pc, #32]	@ (8000fcc <__NVIC_SetPriority+0x50>)
 8000fac:	79fb      	ldrb	r3, [r7, #7]
 8000fae:	f003 030f 	and.w	r3, r3, #15
 8000fb2:	3b04      	subs	r3, #4
 8000fb4:	0112      	lsls	r2, r2, #4
 8000fb6:	b2d2      	uxtb	r2, r2
 8000fb8:	440b      	add	r3, r1
 8000fba:	761a      	strb	r2, [r3, #24]
}
 8000fbc:	bf00      	nop
 8000fbe:	370c      	adds	r7, #12
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc6:	4770      	bx	lr
 8000fc8:	e000e100 	.word	0xe000e100
 8000fcc:	e000ed00 	.word	0xe000ed00

08000fd0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	b089      	sub	sp, #36	@ 0x24
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	60f8      	str	r0, [r7, #12]
 8000fd8:	60b9      	str	r1, [r7, #8]
 8000fda:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fdc:	68fb      	ldr	r3, [r7, #12]
 8000fde:	f003 0307 	and.w	r3, r3, #7
 8000fe2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fe4:	69fb      	ldr	r3, [r7, #28]
 8000fe6:	f1c3 0307 	rsb	r3, r3, #7
 8000fea:	2b04      	cmp	r3, #4
 8000fec:	bf28      	it	cs
 8000fee:	2304      	movcs	r3, #4
 8000ff0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ff2:	69fb      	ldr	r3, [r7, #28]
 8000ff4:	3304      	adds	r3, #4
 8000ff6:	2b06      	cmp	r3, #6
 8000ff8:	d902      	bls.n	8001000 <NVIC_EncodePriority+0x30>
 8000ffa:	69fb      	ldr	r3, [r7, #28]
 8000ffc:	3b03      	subs	r3, #3
 8000ffe:	e000      	b.n	8001002 <NVIC_EncodePriority+0x32>
 8001000:	2300      	movs	r3, #0
 8001002:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001004:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001008:	69bb      	ldr	r3, [r7, #24]
 800100a:	fa02 f303 	lsl.w	r3, r2, r3
 800100e:	43da      	mvns	r2, r3
 8001010:	68bb      	ldr	r3, [r7, #8]
 8001012:	401a      	ands	r2, r3
 8001014:	697b      	ldr	r3, [r7, #20]
 8001016:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001018:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800101c:	697b      	ldr	r3, [r7, #20]
 800101e:	fa01 f303 	lsl.w	r3, r1, r3
 8001022:	43d9      	mvns	r1, r3
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001028:	4313      	orrs	r3, r2
         );
}
 800102a:	4618      	mov	r0, r3
 800102c:	3724      	adds	r7, #36	@ 0x24
 800102e:	46bd      	mov	sp, r7
 8001030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001034:	4770      	bx	lr
	...

08001038 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b082      	sub	sp, #8
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	3b01      	subs	r3, #1
 8001044:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001048:	d301      	bcc.n	800104e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800104a:	2301      	movs	r3, #1
 800104c:	e00f      	b.n	800106e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800104e:	4a0a      	ldr	r2, [pc, #40]	@ (8001078 <SysTick_Config+0x40>)
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	3b01      	subs	r3, #1
 8001054:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001056:	210f      	movs	r1, #15
 8001058:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800105c:	f7ff ff8e 	bl	8000f7c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001060:	4b05      	ldr	r3, [pc, #20]	@ (8001078 <SysTick_Config+0x40>)
 8001062:	2200      	movs	r2, #0
 8001064:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001066:	4b04      	ldr	r3, [pc, #16]	@ (8001078 <SysTick_Config+0x40>)
 8001068:	2207      	movs	r2, #7
 800106a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800106c:	2300      	movs	r3, #0
}
 800106e:	4618      	mov	r0, r3
 8001070:	3708      	adds	r7, #8
 8001072:	46bd      	mov	sp, r7
 8001074:	bd80      	pop	{r7, pc}
 8001076:	bf00      	nop
 8001078:	e000e010 	.word	0xe000e010

0800107c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b082      	sub	sp, #8
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001084:	6878      	ldr	r0, [r7, #4]
 8001086:	f7ff ff29 	bl	8000edc <__NVIC_SetPriorityGrouping>
}
 800108a:	bf00      	nop
 800108c:	3708      	adds	r7, #8
 800108e:	46bd      	mov	sp, r7
 8001090:	bd80      	pop	{r7, pc}

08001092 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001092:	b580      	push	{r7, lr}
 8001094:	b086      	sub	sp, #24
 8001096:	af00      	add	r7, sp, #0
 8001098:	4603      	mov	r3, r0
 800109a:	60b9      	str	r1, [r7, #8]
 800109c:	607a      	str	r2, [r7, #4]
 800109e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80010a0:	2300      	movs	r3, #0
 80010a2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80010a4:	f7ff ff3e 	bl	8000f24 <__NVIC_GetPriorityGrouping>
 80010a8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010aa:	687a      	ldr	r2, [r7, #4]
 80010ac:	68b9      	ldr	r1, [r7, #8]
 80010ae:	6978      	ldr	r0, [r7, #20]
 80010b0:	f7ff ff8e 	bl	8000fd0 <NVIC_EncodePriority>
 80010b4:	4602      	mov	r2, r0
 80010b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010ba:	4611      	mov	r1, r2
 80010bc:	4618      	mov	r0, r3
 80010be:	f7ff ff5d 	bl	8000f7c <__NVIC_SetPriority>
}
 80010c2:	bf00      	nop
 80010c4:	3718      	adds	r7, #24
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bd80      	pop	{r7, pc}

080010ca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010ca:	b580      	push	{r7, lr}
 80010cc:	b082      	sub	sp, #8
 80010ce:	af00      	add	r7, sp, #0
 80010d0:	4603      	mov	r3, r0
 80010d2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80010d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010d8:	4618      	mov	r0, r3
 80010da:	f7ff ff31 	bl	8000f40 <__NVIC_EnableIRQ>
}
 80010de:	bf00      	nop
 80010e0:	3708      	adds	r7, #8
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bd80      	pop	{r7, pc}

080010e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010e6:	b580      	push	{r7, lr}
 80010e8:	b082      	sub	sp, #8
 80010ea:	af00      	add	r7, sp, #0
 80010ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80010ee:	6878      	ldr	r0, [r7, #4]
 80010f0:	f7ff ffa2 	bl	8001038 <SysTick_Config>
 80010f4:	4603      	mov	r3, r0
}
 80010f6:	4618      	mov	r0, r3
 80010f8:	3708      	adds	r7, #8
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bd80      	pop	{r7, pc}
	...

08001100 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b086      	sub	sp, #24
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001108:	2300      	movs	r3, #0
 800110a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800110c:	f7ff feda 	bl	8000ec4 <HAL_GetTick>
 8001110:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	2b00      	cmp	r3, #0
 8001116:	d101      	bne.n	800111c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001118:	2301      	movs	r3, #1
 800111a:	e099      	b.n	8001250 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	2202      	movs	r2, #2
 8001120:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	2200      	movs	r2, #0
 8001128:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	681a      	ldr	r2, [r3, #0]
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	f022 0201 	bic.w	r2, r2, #1
 800113a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800113c:	e00f      	b.n	800115e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800113e:	f7ff fec1 	bl	8000ec4 <HAL_GetTick>
 8001142:	4602      	mov	r2, r0
 8001144:	693b      	ldr	r3, [r7, #16]
 8001146:	1ad3      	subs	r3, r2, r3
 8001148:	2b05      	cmp	r3, #5
 800114a:	d908      	bls.n	800115e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	2220      	movs	r2, #32
 8001150:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	2203      	movs	r2, #3
 8001156:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800115a:	2303      	movs	r3, #3
 800115c:	e078      	b.n	8001250 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	f003 0301 	and.w	r3, r3, #1
 8001168:	2b00      	cmp	r3, #0
 800116a:	d1e8      	bne.n	800113e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001174:	697a      	ldr	r2, [r7, #20]
 8001176:	4b38      	ldr	r3, [pc, #224]	@ (8001258 <HAL_DMA_Init+0x158>)
 8001178:	4013      	ands	r3, r2
 800117a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	685a      	ldr	r2, [r3, #4]
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	689b      	ldr	r3, [r3, #8]
 8001184:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800118a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	691b      	ldr	r3, [r3, #16]
 8001190:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001196:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	699b      	ldr	r3, [r3, #24]
 800119c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80011a2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	6a1b      	ldr	r3, [r3, #32]
 80011a8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80011aa:	697a      	ldr	r2, [r7, #20]
 80011ac:	4313      	orrs	r3, r2
 80011ae:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80011b4:	2b04      	cmp	r3, #4
 80011b6:	d107      	bne.n	80011c8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011c0:	4313      	orrs	r3, r2
 80011c2:	697a      	ldr	r2, [r7, #20]
 80011c4:	4313      	orrs	r3, r2
 80011c6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	697a      	ldr	r2, [r7, #20]
 80011ce:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	695b      	ldr	r3, [r3, #20]
 80011d6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80011d8:	697b      	ldr	r3, [r7, #20]
 80011da:	f023 0307 	bic.w	r3, r3, #7
 80011de:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80011e4:	697a      	ldr	r2, [r7, #20]
 80011e6:	4313      	orrs	r3, r2
 80011e8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80011ee:	2b04      	cmp	r3, #4
 80011f0:	d117      	bne.n	8001222 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80011f6:	697a      	ldr	r2, [r7, #20]
 80011f8:	4313      	orrs	r3, r2
 80011fa:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001200:	2b00      	cmp	r3, #0
 8001202:	d00e      	beq.n	8001222 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001204:	6878      	ldr	r0, [r7, #4]
 8001206:	f000 fb01 	bl	800180c <DMA_CheckFifoParam>
 800120a:	4603      	mov	r3, r0
 800120c:	2b00      	cmp	r3, #0
 800120e:	d008      	beq.n	8001222 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	2240      	movs	r2, #64	@ 0x40
 8001214:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	2201      	movs	r2, #1
 800121a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800121e:	2301      	movs	r3, #1
 8001220:	e016      	b.n	8001250 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	697a      	ldr	r2, [r7, #20]
 8001228:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800122a:	6878      	ldr	r0, [r7, #4]
 800122c:	f000 fab8 	bl	80017a0 <DMA_CalcBaseAndBitshift>
 8001230:	4603      	mov	r3, r0
 8001232:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001238:	223f      	movs	r2, #63	@ 0x3f
 800123a:	409a      	lsls	r2, r3
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	2200      	movs	r2, #0
 8001244:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	2201      	movs	r2, #1
 800124a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800124e:	2300      	movs	r3, #0
}
 8001250:	4618      	mov	r0, r3
 8001252:	3718      	adds	r7, #24
 8001254:	46bd      	mov	sp, r7
 8001256:	bd80      	pop	{r7, pc}
 8001258:	f010803f 	.word	0xf010803f

0800125c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b086      	sub	sp, #24
 8001260:	af00      	add	r7, sp, #0
 8001262:	60f8      	str	r0, [r7, #12]
 8001264:	60b9      	str	r1, [r7, #8]
 8001266:	607a      	str	r2, [r7, #4]
 8001268:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800126a:	2300      	movs	r3, #0
 800126c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001272:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800127a:	2b01      	cmp	r3, #1
 800127c:	d101      	bne.n	8001282 <HAL_DMA_Start_IT+0x26>
 800127e:	2302      	movs	r3, #2
 8001280:	e040      	b.n	8001304 <HAL_DMA_Start_IT+0xa8>
 8001282:	68fb      	ldr	r3, [r7, #12]
 8001284:	2201      	movs	r2, #1
 8001286:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800128a:	68fb      	ldr	r3, [r7, #12]
 800128c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001290:	b2db      	uxtb	r3, r3
 8001292:	2b01      	cmp	r3, #1
 8001294:	d12f      	bne.n	80012f6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	2202      	movs	r2, #2
 800129a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	2200      	movs	r2, #0
 80012a2:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80012a4:	683b      	ldr	r3, [r7, #0]
 80012a6:	687a      	ldr	r2, [r7, #4]
 80012a8:	68b9      	ldr	r1, [r7, #8]
 80012aa:	68f8      	ldr	r0, [r7, #12]
 80012ac:	f000 fa4a 	bl	8001744 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80012b4:	223f      	movs	r2, #63	@ 0x3f
 80012b6:	409a      	lsls	r2, r3
 80012b8:	693b      	ldr	r3, [r7, #16]
 80012ba:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	681a      	ldr	r2, [r3, #0]
 80012c2:	68fb      	ldr	r3, [r7, #12]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	f042 0216 	orr.w	r2, r2, #22
 80012ca:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d007      	beq.n	80012e4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	681a      	ldr	r2, [r3, #0]
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	f042 0208 	orr.w	r2, r2, #8
 80012e2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	681a      	ldr	r2, [r3, #0]
 80012ea:	68fb      	ldr	r3, [r7, #12]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	f042 0201 	orr.w	r2, r2, #1
 80012f2:	601a      	str	r2, [r3, #0]
 80012f4:	e005      	b.n	8001302 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80012f6:	68fb      	ldr	r3, [r7, #12]
 80012f8:	2200      	movs	r2, #0
 80012fa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80012fe:	2302      	movs	r3, #2
 8001300:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001302:	7dfb      	ldrb	r3, [r7, #23]
}
 8001304:	4618      	mov	r0, r3
 8001306:	3718      	adds	r7, #24
 8001308:	46bd      	mov	sp, r7
 800130a:	bd80      	pop	{r7, pc}

0800130c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b084      	sub	sp, #16
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001318:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800131a:	f7ff fdd3 	bl	8000ec4 <HAL_GetTick>
 800131e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001326:	b2db      	uxtb	r3, r3
 8001328:	2b02      	cmp	r3, #2
 800132a:	d008      	beq.n	800133e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	2280      	movs	r2, #128	@ 0x80
 8001330:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	2200      	movs	r2, #0
 8001336:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800133a:	2301      	movs	r3, #1
 800133c:	e052      	b.n	80013e4 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	681a      	ldr	r2, [r3, #0]
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	f022 0216 	bic.w	r2, r2, #22
 800134c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	695a      	ldr	r2, [r3, #20]
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800135c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001362:	2b00      	cmp	r3, #0
 8001364:	d103      	bne.n	800136e <HAL_DMA_Abort+0x62>
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800136a:	2b00      	cmp	r3, #0
 800136c:	d007      	beq.n	800137e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	681a      	ldr	r2, [r3, #0]
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	f022 0208 	bic.w	r2, r2, #8
 800137c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	681a      	ldr	r2, [r3, #0]
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	f022 0201 	bic.w	r2, r2, #1
 800138c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800138e:	e013      	b.n	80013b8 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001390:	f7ff fd98 	bl	8000ec4 <HAL_GetTick>
 8001394:	4602      	mov	r2, r0
 8001396:	68bb      	ldr	r3, [r7, #8]
 8001398:	1ad3      	subs	r3, r2, r3
 800139a:	2b05      	cmp	r3, #5
 800139c:	d90c      	bls.n	80013b8 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	2220      	movs	r2, #32
 80013a2:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	2203      	movs	r2, #3
 80013a8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	2200      	movs	r2, #0
 80013b0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80013b4:	2303      	movs	r3, #3
 80013b6:	e015      	b.n	80013e4 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	f003 0301 	and.w	r3, r3, #1
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d1e4      	bne.n	8001390 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80013ca:	223f      	movs	r2, #63	@ 0x3f
 80013cc:	409a      	lsls	r2, r3
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	2201      	movs	r2, #1
 80013d6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	2200      	movs	r2, #0
 80013de:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80013e2:	2300      	movs	r3, #0
}
 80013e4:	4618      	mov	r0, r3
 80013e6:	3710      	adds	r7, #16
 80013e8:	46bd      	mov	sp, r7
 80013ea:	bd80      	pop	{r7, pc}

080013ec <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80013ec:	b480      	push	{r7}
 80013ee:	b083      	sub	sp, #12
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80013fa:	b2db      	uxtb	r3, r3
 80013fc:	2b02      	cmp	r3, #2
 80013fe:	d004      	beq.n	800140a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	2280      	movs	r2, #128	@ 0x80
 8001404:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001406:	2301      	movs	r3, #1
 8001408:	e00c      	b.n	8001424 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	2205      	movs	r2, #5
 800140e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	681a      	ldr	r2, [r3, #0]
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	f022 0201 	bic.w	r2, r2, #1
 8001420:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001422:	2300      	movs	r3, #0
}
 8001424:	4618      	mov	r0, r3
 8001426:	370c      	adds	r7, #12
 8001428:	46bd      	mov	sp, r7
 800142a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142e:	4770      	bx	lr

08001430 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b086      	sub	sp, #24
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001438:	2300      	movs	r3, #0
 800143a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800143c:	4b8e      	ldr	r3, [pc, #568]	@ (8001678 <HAL_DMA_IRQHandler+0x248>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	4a8e      	ldr	r2, [pc, #568]	@ (800167c <HAL_DMA_IRQHandler+0x24c>)
 8001442:	fba2 2303 	umull	r2, r3, r2, r3
 8001446:	0a9b      	lsrs	r3, r3, #10
 8001448:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800144e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001450:	693b      	ldr	r3, [r7, #16]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800145a:	2208      	movs	r2, #8
 800145c:	409a      	lsls	r2, r3
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	4013      	ands	r3, r2
 8001462:	2b00      	cmp	r3, #0
 8001464:	d01a      	beq.n	800149c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	f003 0304 	and.w	r3, r3, #4
 8001470:	2b00      	cmp	r3, #0
 8001472:	d013      	beq.n	800149c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	681a      	ldr	r2, [r3, #0]
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	f022 0204 	bic.w	r2, r2, #4
 8001482:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001488:	2208      	movs	r2, #8
 800148a:	409a      	lsls	r2, r3
 800148c:	693b      	ldr	r3, [r7, #16]
 800148e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001494:	f043 0201 	orr.w	r2, r3, #1
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80014a0:	2201      	movs	r2, #1
 80014a2:	409a      	lsls	r2, r3
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	4013      	ands	r3, r2
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d012      	beq.n	80014d2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	695b      	ldr	r3, [r3, #20]
 80014b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d00b      	beq.n	80014d2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80014be:	2201      	movs	r2, #1
 80014c0:	409a      	lsls	r2, r3
 80014c2:	693b      	ldr	r3, [r7, #16]
 80014c4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80014ca:	f043 0202 	orr.w	r2, r3, #2
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80014d6:	2204      	movs	r2, #4
 80014d8:	409a      	lsls	r2, r3
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	4013      	ands	r3, r2
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d012      	beq.n	8001508 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	f003 0302 	and.w	r3, r3, #2
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d00b      	beq.n	8001508 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80014f4:	2204      	movs	r2, #4
 80014f6:	409a      	lsls	r2, r3
 80014f8:	693b      	ldr	r3, [r7, #16]
 80014fa:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001500:	f043 0204 	orr.w	r2, r3, #4
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800150c:	2210      	movs	r2, #16
 800150e:	409a      	lsls	r2, r3
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	4013      	ands	r3, r2
 8001514:	2b00      	cmp	r3, #0
 8001516:	d043      	beq.n	80015a0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	f003 0308 	and.w	r3, r3, #8
 8001522:	2b00      	cmp	r3, #0
 8001524:	d03c      	beq.n	80015a0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800152a:	2210      	movs	r2, #16
 800152c:	409a      	lsls	r2, r3
 800152e:	693b      	ldr	r3, [r7, #16]
 8001530:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800153c:	2b00      	cmp	r3, #0
 800153e:	d018      	beq.n	8001572 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800154a:	2b00      	cmp	r3, #0
 800154c:	d108      	bne.n	8001560 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001552:	2b00      	cmp	r3, #0
 8001554:	d024      	beq.n	80015a0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800155a:	6878      	ldr	r0, [r7, #4]
 800155c:	4798      	blx	r3
 800155e:	e01f      	b.n	80015a0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001564:	2b00      	cmp	r3, #0
 8001566:	d01b      	beq.n	80015a0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800156c:	6878      	ldr	r0, [r7, #4]
 800156e:	4798      	blx	r3
 8001570:	e016      	b.n	80015a0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800157c:	2b00      	cmp	r3, #0
 800157e:	d107      	bne.n	8001590 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	681a      	ldr	r2, [r3, #0]
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	f022 0208 	bic.w	r2, r2, #8
 800158e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001594:	2b00      	cmp	r3, #0
 8001596:	d003      	beq.n	80015a0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800159c:	6878      	ldr	r0, [r7, #4]
 800159e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80015a4:	2220      	movs	r2, #32
 80015a6:	409a      	lsls	r2, r3
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	4013      	ands	r3, r2
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	f000 808f 	beq.w	80016d0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	f003 0310 	and.w	r3, r3, #16
 80015bc:	2b00      	cmp	r3, #0
 80015be:	f000 8087 	beq.w	80016d0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80015c6:	2220      	movs	r2, #32
 80015c8:	409a      	lsls	r2, r3
 80015ca:	693b      	ldr	r3, [r7, #16]
 80015cc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80015d4:	b2db      	uxtb	r3, r3
 80015d6:	2b05      	cmp	r3, #5
 80015d8:	d136      	bne.n	8001648 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	681a      	ldr	r2, [r3, #0]
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	f022 0216 	bic.w	r2, r2, #22
 80015e8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	695a      	ldr	r2, [r3, #20]
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80015f8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d103      	bne.n	800160a <HAL_DMA_IRQHandler+0x1da>
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001606:	2b00      	cmp	r3, #0
 8001608:	d007      	beq.n	800161a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	681a      	ldr	r2, [r3, #0]
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	f022 0208 	bic.w	r2, r2, #8
 8001618:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800161e:	223f      	movs	r2, #63	@ 0x3f
 8001620:	409a      	lsls	r2, r3
 8001622:	693b      	ldr	r3, [r7, #16]
 8001624:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	2201      	movs	r2, #1
 800162a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	2200      	movs	r2, #0
 8001632:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800163a:	2b00      	cmp	r3, #0
 800163c:	d07e      	beq.n	800173c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001642:	6878      	ldr	r0, [r7, #4]
 8001644:	4798      	blx	r3
        }
        return;
 8001646:	e079      	b.n	800173c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001652:	2b00      	cmp	r3, #0
 8001654:	d01d      	beq.n	8001692 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001660:	2b00      	cmp	r3, #0
 8001662:	d10d      	bne.n	8001680 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001668:	2b00      	cmp	r3, #0
 800166a:	d031      	beq.n	80016d0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001670:	6878      	ldr	r0, [r7, #4]
 8001672:	4798      	blx	r3
 8001674:	e02c      	b.n	80016d0 <HAL_DMA_IRQHandler+0x2a0>
 8001676:	bf00      	nop
 8001678:	20000000 	.word	0x20000000
 800167c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001684:	2b00      	cmp	r3, #0
 8001686:	d023      	beq.n	80016d0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800168c:	6878      	ldr	r0, [r7, #4]
 800168e:	4798      	blx	r3
 8001690:	e01e      	b.n	80016d0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800169c:	2b00      	cmp	r3, #0
 800169e:	d10f      	bne.n	80016c0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	681a      	ldr	r2, [r3, #0]
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	f022 0210 	bic.w	r2, r2, #16
 80016ae:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	2201      	movs	r2, #1
 80016b4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	2200      	movs	r2, #0
 80016bc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d003      	beq.n	80016d0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80016cc:	6878      	ldr	r0, [r7, #4]
 80016ce:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d032      	beq.n	800173e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80016dc:	f003 0301 	and.w	r3, r3, #1
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d022      	beq.n	800172a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	2205      	movs	r2, #5
 80016e8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	681a      	ldr	r2, [r3, #0]
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	f022 0201 	bic.w	r2, r2, #1
 80016fa:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80016fc:	68bb      	ldr	r3, [r7, #8]
 80016fe:	3301      	adds	r3, #1
 8001700:	60bb      	str	r3, [r7, #8]
 8001702:	697a      	ldr	r2, [r7, #20]
 8001704:	429a      	cmp	r2, r3
 8001706:	d307      	bcc.n	8001718 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	f003 0301 	and.w	r3, r3, #1
 8001712:	2b00      	cmp	r3, #0
 8001714:	d1f2      	bne.n	80016fc <HAL_DMA_IRQHandler+0x2cc>
 8001716:	e000      	b.n	800171a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001718:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	2201      	movs	r2, #1
 800171e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	2200      	movs	r2, #0
 8001726:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800172e:	2b00      	cmp	r3, #0
 8001730:	d005      	beq.n	800173e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001736:	6878      	ldr	r0, [r7, #4]
 8001738:	4798      	blx	r3
 800173a:	e000      	b.n	800173e <HAL_DMA_IRQHandler+0x30e>
        return;
 800173c:	bf00      	nop
    }
  }
}
 800173e:	3718      	adds	r7, #24
 8001740:	46bd      	mov	sp, r7
 8001742:	bd80      	pop	{r7, pc}

08001744 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001744:	b480      	push	{r7}
 8001746:	b085      	sub	sp, #20
 8001748:	af00      	add	r7, sp, #0
 800174a:	60f8      	str	r0, [r7, #12]
 800174c:	60b9      	str	r1, [r7, #8]
 800174e:	607a      	str	r2, [r7, #4]
 8001750:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	681a      	ldr	r2, [r3, #0]
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8001760:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	683a      	ldr	r2, [r7, #0]
 8001768:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	689b      	ldr	r3, [r3, #8]
 800176e:	2b40      	cmp	r3, #64	@ 0x40
 8001770:	d108      	bne.n	8001784 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	687a      	ldr	r2, [r7, #4]
 8001778:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	68ba      	ldr	r2, [r7, #8]
 8001780:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001782:	e007      	b.n	8001794 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	68ba      	ldr	r2, [r7, #8]
 800178a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	687a      	ldr	r2, [r7, #4]
 8001792:	60da      	str	r2, [r3, #12]
}
 8001794:	bf00      	nop
 8001796:	3714      	adds	r7, #20
 8001798:	46bd      	mov	sp, r7
 800179a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179e:	4770      	bx	lr

080017a0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80017a0:	b480      	push	{r7}
 80017a2:	b085      	sub	sp, #20
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	b2db      	uxtb	r3, r3
 80017ae:	3b10      	subs	r3, #16
 80017b0:	4a14      	ldr	r2, [pc, #80]	@ (8001804 <DMA_CalcBaseAndBitshift+0x64>)
 80017b2:	fba2 2303 	umull	r2, r3, r2, r3
 80017b6:	091b      	lsrs	r3, r3, #4
 80017b8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80017ba:	4a13      	ldr	r2, [pc, #76]	@ (8001808 <DMA_CalcBaseAndBitshift+0x68>)
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	4413      	add	r3, r2
 80017c0:	781b      	ldrb	r3, [r3, #0]
 80017c2:	461a      	mov	r2, r3
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	2b03      	cmp	r3, #3
 80017cc:	d909      	bls.n	80017e2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80017d6:	f023 0303 	bic.w	r3, r3, #3
 80017da:	1d1a      	adds	r2, r3, #4
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	659a      	str	r2, [r3, #88]	@ 0x58
 80017e0:	e007      	b.n	80017f2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80017ea:	f023 0303 	bic.w	r3, r3, #3
 80017ee:	687a      	ldr	r2, [r7, #4]
 80017f0:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80017f6:	4618      	mov	r0, r3
 80017f8:	3714      	adds	r7, #20
 80017fa:	46bd      	mov	sp, r7
 80017fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001800:	4770      	bx	lr
 8001802:	bf00      	nop
 8001804:	aaaaaaab 	.word	0xaaaaaaab
 8001808:	0800438c 	.word	0x0800438c

0800180c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800180c:	b480      	push	{r7}
 800180e:	b085      	sub	sp, #20
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001814:	2300      	movs	r3, #0
 8001816:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800181c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	699b      	ldr	r3, [r3, #24]
 8001822:	2b00      	cmp	r3, #0
 8001824:	d11f      	bne.n	8001866 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001826:	68bb      	ldr	r3, [r7, #8]
 8001828:	2b03      	cmp	r3, #3
 800182a:	d856      	bhi.n	80018da <DMA_CheckFifoParam+0xce>
 800182c:	a201      	add	r2, pc, #4	@ (adr r2, 8001834 <DMA_CheckFifoParam+0x28>)
 800182e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001832:	bf00      	nop
 8001834:	08001845 	.word	0x08001845
 8001838:	08001857 	.word	0x08001857
 800183c:	08001845 	.word	0x08001845
 8001840:	080018db 	.word	0x080018db
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001848:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800184c:	2b00      	cmp	r3, #0
 800184e:	d046      	beq.n	80018de <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001850:	2301      	movs	r3, #1
 8001852:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001854:	e043      	b.n	80018de <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800185a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800185e:	d140      	bne.n	80018e2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001860:	2301      	movs	r3, #1
 8001862:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001864:	e03d      	b.n	80018e2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	699b      	ldr	r3, [r3, #24]
 800186a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800186e:	d121      	bne.n	80018b4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001870:	68bb      	ldr	r3, [r7, #8]
 8001872:	2b03      	cmp	r3, #3
 8001874:	d837      	bhi.n	80018e6 <DMA_CheckFifoParam+0xda>
 8001876:	a201      	add	r2, pc, #4	@ (adr r2, 800187c <DMA_CheckFifoParam+0x70>)
 8001878:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800187c:	0800188d 	.word	0x0800188d
 8001880:	08001893 	.word	0x08001893
 8001884:	0800188d 	.word	0x0800188d
 8001888:	080018a5 	.word	0x080018a5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800188c:	2301      	movs	r3, #1
 800188e:	73fb      	strb	r3, [r7, #15]
      break;
 8001890:	e030      	b.n	80018f4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001896:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800189a:	2b00      	cmp	r3, #0
 800189c:	d025      	beq.n	80018ea <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800189e:	2301      	movs	r3, #1
 80018a0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80018a2:	e022      	b.n	80018ea <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80018a8:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80018ac:	d11f      	bne.n	80018ee <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80018ae:	2301      	movs	r3, #1
 80018b0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80018b2:	e01c      	b.n	80018ee <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80018b4:	68bb      	ldr	r3, [r7, #8]
 80018b6:	2b02      	cmp	r3, #2
 80018b8:	d903      	bls.n	80018c2 <DMA_CheckFifoParam+0xb6>
 80018ba:	68bb      	ldr	r3, [r7, #8]
 80018bc:	2b03      	cmp	r3, #3
 80018be:	d003      	beq.n	80018c8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80018c0:	e018      	b.n	80018f4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80018c2:	2301      	movs	r3, #1
 80018c4:	73fb      	strb	r3, [r7, #15]
      break;
 80018c6:	e015      	b.n	80018f4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80018cc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d00e      	beq.n	80018f2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80018d4:	2301      	movs	r3, #1
 80018d6:	73fb      	strb	r3, [r7, #15]
      break;
 80018d8:	e00b      	b.n	80018f2 <DMA_CheckFifoParam+0xe6>
      break;
 80018da:	bf00      	nop
 80018dc:	e00a      	b.n	80018f4 <DMA_CheckFifoParam+0xe8>
      break;
 80018de:	bf00      	nop
 80018e0:	e008      	b.n	80018f4 <DMA_CheckFifoParam+0xe8>
      break;
 80018e2:	bf00      	nop
 80018e4:	e006      	b.n	80018f4 <DMA_CheckFifoParam+0xe8>
      break;
 80018e6:	bf00      	nop
 80018e8:	e004      	b.n	80018f4 <DMA_CheckFifoParam+0xe8>
      break;
 80018ea:	bf00      	nop
 80018ec:	e002      	b.n	80018f4 <DMA_CheckFifoParam+0xe8>
      break;   
 80018ee:	bf00      	nop
 80018f0:	e000      	b.n	80018f4 <DMA_CheckFifoParam+0xe8>
      break;
 80018f2:	bf00      	nop
    }
  } 
  
  return status; 
 80018f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80018f6:	4618      	mov	r0, r3
 80018f8:	3714      	adds	r7, #20
 80018fa:	46bd      	mov	sp, r7
 80018fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001900:	4770      	bx	lr
 8001902:	bf00      	nop

08001904 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001904:	b480      	push	{r7}
 8001906:	b089      	sub	sp, #36	@ 0x24
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
 800190c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800190e:	2300      	movs	r3, #0
 8001910:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001912:	2300      	movs	r3, #0
 8001914:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001916:	2300      	movs	r3, #0
 8001918:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800191a:	2300      	movs	r3, #0
 800191c:	61fb      	str	r3, [r7, #28]
 800191e:	e16b      	b.n	8001bf8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001920:	2201      	movs	r2, #1
 8001922:	69fb      	ldr	r3, [r7, #28]
 8001924:	fa02 f303 	lsl.w	r3, r2, r3
 8001928:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800192a:	683b      	ldr	r3, [r7, #0]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	697a      	ldr	r2, [r7, #20]
 8001930:	4013      	ands	r3, r2
 8001932:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001934:	693a      	ldr	r2, [r7, #16]
 8001936:	697b      	ldr	r3, [r7, #20]
 8001938:	429a      	cmp	r2, r3
 800193a:	f040 815a 	bne.w	8001bf2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800193e:	683b      	ldr	r3, [r7, #0]
 8001940:	685b      	ldr	r3, [r3, #4]
 8001942:	f003 0303 	and.w	r3, r3, #3
 8001946:	2b01      	cmp	r3, #1
 8001948:	d005      	beq.n	8001956 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800194a:	683b      	ldr	r3, [r7, #0]
 800194c:	685b      	ldr	r3, [r3, #4]
 800194e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001952:	2b02      	cmp	r3, #2
 8001954:	d130      	bne.n	80019b8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	689b      	ldr	r3, [r3, #8]
 800195a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800195c:	69fb      	ldr	r3, [r7, #28]
 800195e:	005b      	lsls	r3, r3, #1
 8001960:	2203      	movs	r2, #3
 8001962:	fa02 f303 	lsl.w	r3, r2, r3
 8001966:	43db      	mvns	r3, r3
 8001968:	69ba      	ldr	r2, [r7, #24]
 800196a:	4013      	ands	r3, r2
 800196c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800196e:	683b      	ldr	r3, [r7, #0]
 8001970:	68da      	ldr	r2, [r3, #12]
 8001972:	69fb      	ldr	r3, [r7, #28]
 8001974:	005b      	lsls	r3, r3, #1
 8001976:	fa02 f303 	lsl.w	r3, r2, r3
 800197a:	69ba      	ldr	r2, [r7, #24]
 800197c:	4313      	orrs	r3, r2
 800197e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	69ba      	ldr	r2, [r7, #24]
 8001984:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	685b      	ldr	r3, [r3, #4]
 800198a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800198c:	2201      	movs	r2, #1
 800198e:	69fb      	ldr	r3, [r7, #28]
 8001990:	fa02 f303 	lsl.w	r3, r2, r3
 8001994:	43db      	mvns	r3, r3
 8001996:	69ba      	ldr	r2, [r7, #24]
 8001998:	4013      	ands	r3, r2
 800199a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800199c:	683b      	ldr	r3, [r7, #0]
 800199e:	685b      	ldr	r3, [r3, #4]
 80019a0:	091b      	lsrs	r3, r3, #4
 80019a2:	f003 0201 	and.w	r2, r3, #1
 80019a6:	69fb      	ldr	r3, [r7, #28]
 80019a8:	fa02 f303 	lsl.w	r3, r2, r3
 80019ac:	69ba      	ldr	r2, [r7, #24]
 80019ae:	4313      	orrs	r3, r2
 80019b0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	69ba      	ldr	r2, [r7, #24]
 80019b6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80019b8:	683b      	ldr	r3, [r7, #0]
 80019ba:	685b      	ldr	r3, [r3, #4]
 80019bc:	f003 0303 	and.w	r3, r3, #3
 80019c0:	2b03      	cmp	r3, #3
 80019c2:	d017      	beq.n	80019f4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	68db      	ldr	r3, [r3, #12]
 80019c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80019ca:	69fb      	ldr	r3, [r7, #28]
 80019cc:	005b      	lsls	r3, r3, #1
 80019ce:	2203      	movs	r2, #3
 80019d0:	fa02 f303 	lsl.w	r3, r2, r3
 80019d4:	43db      	mvns	r3, r3
 80019d6:	69ba      	ldr	r2, [r7, #24]
 80019d8:	4013      	ands	r3, r2
 80019da:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	689a      	ldr	r2, [r3, #8]
 80019e0:	69fb      	ldr	r3, [r7, #28]
 80019e2:	005b      	lsls	r3, r3, #1
 80019e4:	fa02 f303 	lsl.w	r3, r2, r3
 80019e8:	69ba      	ldr	r2, [r7, #24]
 80019ea:	4313      	orrs	r3, r2
 80019ec:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	69ba      	ldr	r2, [r7, #24]
 80019f2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80019f4:	683b      	ldr	r3, [r7, #0]
 80019f6:	685b      	ldr	r3, [r3, #4]
 80019f8:	f003 0303 	and.w	r3, r3, #3
 80019fc:	2b02      	cmp	r3, #2
 80019fe:	d123      	bne.n	8001a48 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001a00:	69fb      	ldr	r3, [r7, #28]
 8001a02:	08da      	lsrs	r2, r3, #3
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	3208      	adds	r2, #8
 8001a08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a0c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001a0e:	69fb      	ldr	r3, [r7, #28]
 8001a10:	f003 0307 	and.w	r3, r3, #7
 8001a14:	009b      	lsls	r3, r3, #2
 8001a16:	220f      	movs	r2, #15
 8001a18:	fa02 f303 	lsl.w	r3, r2, r3
 8001a1c:	43db      	mvns	r3, r3
 8001a1e:	69ba      	ldr	r2, [r7, #24]
 8001a20:	4013      	ands	r3, r2
 8001a22:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001a24:	683b      	ldr	r3, [r7, #0]
 8001a26:	691a      	ldr	r2, [r3, #16]
 8001a28:	69fb      	ldr	r3, [r7, #28]
 8001a2a:	f003 0307 	and.w	r3, r3, #7
 8001a2e:	009b      	lsls	r3, r3, #2
 8001a30:	fa02 f303 	lsl.w	r3, r2, r3
 8001a34:	69ba      	ldr	r2, [r7, #24]
 8001a36:	4313      	orrs	r3, r2
 8001a38:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001a3a:	69fb      	ldr	r3, [r7, #28]
 8001a3c:	08da      	lsrs	r2, r3, #3
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	3208      	adds	r2, #8
 8001a42:	69b9      	ldr	r1, [r7, #24]
 8001a44:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001a4e:	69fb      	ldr	r3, [r7, #28]
 8001a50:	005b      	lsls	r3, r3, #1
 8001a52:	2203      	movs	r2, #3
 8001a54:	fa02 f303 	lsl.w	r3, r2, r3
 8001a58:	43db      	mvns	r3, r3
 8001a5a:	69ba      	ldr	r2, [r7, #24]
 8001a5c:	4013      	ands	r3, r2
 8001a5e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001a60:	683b      	ldr	r3, [r7, #0]
 8001a62:	685b      	ldr	r3, [r3, #4]
 8001a64:	f003 0203 	and.w	r2, r3, #3
 8001a68:	69fb      	ldr	r3, [r7, #28]
 8001a6a:	005b      	lsls	r3, r3, #1
 8001a6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a70:	69ba      	ldr	r2, [r7, #24]
 8001a72:	4313      	orrs	r3, r2
 8001a74:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	69ba      	ldr	r2, [r7, #24]
 8001a7a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001a7c:	683b      	ldr	r3, [r7, #0]
 8001a7e:	685b      	ldr	r3, [r3, #4]
 8001a80:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	f000 80b4 	beq.w	8001bf2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	60fb      	str	r3, [r7, #12]
 8001a8e:	4b60      	ldr	r3, [pc, #384]	@ (8001c10 <HAL_GPIO_Init+0x30c>)
 8001a90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a92:	4a5f      	ldr	r2, [pc, #380]	@ (8001c10 <HAL_GPIO_Init+0x30c>)
 8001a94:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001a98:	6453      	str	r3, [r2, #68]	@ 0x44
 8001a9a:	4b5d      	ldr	r3, [pc, #372]	@ (8001c10 <HAL_GPIO_Init+0x30c>)
 8001a9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a9e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001aa2:	60fb      	str	r3, [r7, #12]
 8001aa4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001aa6:	4a5b      	ldr	r2, [pc, #364]	@ (8001c14 <HAL_GPIO_Init+0x310>)
 8001aa8:	69fb      	ldr	r3, [r7, #28]
 8001aaa:	089b      	lsrs	r3, r3, #2
 8001aac:	3302      	adds	r3, #2
 8001aae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ab2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001ab4:	69fb      	ldr	r3, [r7, #28]
 8001ab6:	f003 0303 	and.w	r3, r3, #3
 8001aba:	009b      	lsls	r3, r3, #2
 8001abc:	220f      	movs	r2, #15
 8001abe:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac2:	43db      	mvns	r3, r3
 8001ac4:	69ba      	ldr	r2, [r7, #24]
 8001ac6:	4013      	ands	r3, r2
 8001ac8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	4a52      	ldr	r2, [pc, #328]	@ (8001c18 <HAL_GPIO_Init+0x314>)
 8001ace:	4293      	cmp	r3, r2
 8001ad0:	d02b      	beq.n	8001b2a <HAL_GPIO_Init+0x226>
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	4a51      	ldr	r2, [pc, #324]	@ (8001c1c <HAL_GPIO_Init+0x318>)
 8001ad6:	4293      	cmp	r3, r2
 8001ad8:	d025      	beq.n	8001b26 <HAL_GPIO_Init+0x222>
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	4a50      	ldr	r2, [pc, #320]	@ (8001c20 <HAL_GPIO_Init+0x31c>)
 8001ade:	4293      	cmp	r3, r2
 8001ae0:	d01f      	beq.n	8001b22 <HAL_GPIO_Init+0x21e>
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	4a4f      	ldr	r2, [pc, #316]	@ (8001c24 <HAL_GPIO_Init+0x320>)
 8001ae6:	4293      	cmp	r3, r2
 8001ae8:	d019      	beq.n	8001b1e <HAL_GPIO_Init+0x21a>
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	4a4e      	ldr	r2, [pc, #312]	@ (8001c28 <HAL_GPIO_Init+0x324>)
 8001aee:	4293      	cmp	r3, r2
 8001af0:	d013      	beq.n	8001b1a <HAL_GPIO_Init+0x216>
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	4a4d      	ldr	r2, [pc, #308]	@ (8001c2c <HAL_GPIO_Init+0x328>)
 8001af6:	4293      	cmp	r3, r2
 8001af8:	d00d      	beq.n	8001b16 <HAL_GPIO_Init+0x212>
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	4a4c      	ldr	r2, [pc, #304]	@ (8001c30 <HAL_GPIO_Init+0x32c>)
 8001afe:	4293      	cmp	r3, r2
 8001b00:	d007      	beq.n	8001b12 <HAL_GPIO_Init+0x20e>
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	4a4b      	ldr	r2, [pc, #300]	@ (8001c34 <HAL_GPIO_Init+0x330>)
 8001b06:	4293      	cmp	r3, r2
 8001b08:	d101      	bne.n	8001b0e <HAL_GPIO_Init+0x20a>
 8001b0a:	2307      	movs	r3, #7
 8001b0c:	e00e      	b.n	8001b2c <HAL_GPIO_Init+0x228>
 8001b0e:	2308      	movs	r3, #8
 8001b10:	e00c      	b.n	8001b2c <HAL_GPIO_Init+0x228>
 8001b12:	2306      	movs	r3, #6
 8001b14:	e00a      	b.n	8001b2c <HAL_GPIO_Init+0x228>
 8001b16:	2305      	movs	r3, #5
 8001b18:	e008      	b.n	8001b2c <HAL_GPIO_Init+0x228>
 8001b1a:	2304      	movs	r3, #4
 8001b1c:	e006      	b.n	8001b2c <HAL_GPIO_Init+0x228>
 8001b1e:	2303      	movs	r3, #3
 8001b20:	e004      	b.n	8001b2c <HAL_GPIO_Init+0x228>
 8001b22:	2302      	movs	r3, #2
 8001b24:	e002      	b.n	8001b2c <HAL_GPIO_Init+0x228>
 8001b26:	2301      	movs	r3, #1
 8001b28:	e000      	b.n	8001b2c <HAL_GPIO_Init+0x228>
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	69fa      	ldr	r2, [r7, #28]
 8001b2e:	f002 0203 	and.w	r2, r2, #3
 8001b32:	0092      	lsls	r2, r2, #2
 8001b34:	4093      	lsls	r3, r2
 8001b36:	69ba      	ldr	r2, [r7, #24]
 8001b38:	4313      	orrs	r3, r2
 8001b3a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001b3c:	4935      	ldr	r1, [pc, #212]	@ (8001c14 <HAL_GPIO_Init+0x310>)
 8001b3e:	69fb      	ldr	r3, [r7, #28]
 8001b40:	089b      	lsrs	r3, r3, #2
 8001b42:	3302      	adds	r3, #2
 8001b44:	69ba      	ldr	r2, [r7, #24]
 8001b46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001b4a:	4b3b      	ldr	r3, [pc, #236]	@ (8001c38 <HAL_GPIO_Init+0x334>)
 8001b4c:	689b      	ldr	r3, [r3, #8]
 8001b4e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b50:	693b      	ldr	r3, [r7, #16]
 8001b52:	43db      	mvns	r3, r3
 8001b54:	69ba      	ldr	r2, [r7, #24]
 8001b56:	4013      	ands	r3, r2
 8001b58:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001b5a:	683b      	ldr	r3, [r7, #0]
 8001b5c:	685b      	ldr	r3, [r3, #4]
 8001b5e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d003      	beq.n	8001b6e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001b66:	69ba      	ldr	r2, [r7, #24]
 8001b68:	693b      	ldr	r3, [r7, #16]
 8001b6a:	4313      	orrs	r3, r2
 8001b6c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001b6e:	4a32      	ldr	r2, [pc, #200]	@ (8001c38 <HAL_GPIO_Init+0x334>)
 8001b70:	69bb      	ldr	r3, [r7, #24]
 8001b72:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001b74:	4b30      	ldr	r3, [pc, #192]	@ (8001c38 <HAL_GPIO_Init+0x334>)
 8001b76:	68db      	ldr	r3, [r3, #12]
 8001b78:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b7a:	693b      	ldr	r3, [r7, #16]
 8001b7c:	43db      	mvns	r3, r3
 8001b7e:	69ba      	ldr	r2, [r7, #24]
 8001b80:	4013      	ands	r3, r2
 8001b82:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	685b      	ldr	r3, [r3, #4]
 8001b88:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d003      	beq.n	8001b98 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001b90:	69ba      	ldr	r2, [r7, #24]
 8001b92:	693b      	ldr	r3, [r7, #16]
 8001b94:	4313      	orrs	r3, r2
 8001b96:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001b98:	4a27      	ldr	r2, [pc, #156]	@ (8001c38 <HAL_GPIO_Init+0x334>)
 8001b9a:	69bb      	ldr	r3, [r7, #24]
 8001b9c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001b9e:	4b26      	ldr	r3, [pc, #152]	@ (8001c38 <HAL_GPIO_Init+0x334>)
 8001ba0:	685b      	ldr	r3, [r3, #4]
 8001ba2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ba4:	693b      	ldr	r3, [r7, #16]
 8001ba6:	43db      	mvns	r3, r3
 8001ba8:	69ba      	ldr	r2, [r7, #24]
 8001baa:	4013      	ands	r3, r2
 8001bac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001bae:	683b      	ldr	r3, [r7, #0]
 8001bb0:	685b      	ldr	r3, [r3, #4]
 8001bb2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d003      	beq.n	8001bc2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001bba:	69ba      	ldr	r2, [r7, #24]
 8001bbc:	693b      	ldr	r3, [r7, #16]
 8001bbe:	4313      	orrs	r3, r2
 8001bc0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001bc2:	4a1d      	ldr	r2, [pc, #116]	@ (8001c38 <HAL_GPIO_Init+0x334>)
 8001bc4:	69bb      	ldr	r3, [r7, #24]
 8001bc6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001bc8:	4b1b      	ldr	r3, [pc, #108]	@ (8001c38 <HAL_GPIO_Init+0x334>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bce:	693b      	ldr	r3, [r7, #16]
 8001bd0:	43db      	mvns	r3, r3
 8001bd2:	69ba      	ldr	r2, [r7, #24]
 8001bd4:	4013      	ands	r3, r2
 8001bd6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001bd8:	683b      	ldr	r3, [r7, #0]
 8001bda:	685b      	ldr	r3, [r3, #4]
 8001bdc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d003      	beq.n	8001bec <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001be4:	69ba      	ldr	r2, [r7, #24]
 8001be6:	693b      	ldr	r3, [r7, #16]
 8001be8:	4313      	orrs	r3, r2
 8001bea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001bec:	4a12      	ldr	r2, [pc, #72]	@ (8001c38 <HAL_GPIO_Init+0x334>)
 8001bee:	69bb      	ldr	r3, [r7, #24]
 8001bf0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001bf2:	69fb      	ldr	r3, [r7, #28]
 8001bf4:	3301      	adds	r3, #1
 8001bf6:	61fb      	str	r3, [r7, #28]
 8001bf8:	69fb      	ldr	r3, [r7, #28]
 8001bfa:	2b0f      	cmp	r3, #15
 8001bfc:	f67f ae90 	bls.w	8001920 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001c00:	bf00      	nop
 8001c02:	bf00      	nop
 8001c04:	3724      	adds	r7, #36	@ 0x24
 8001c06:	46bd      	mov	sp, r7
 8001c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0c:	4770      	bx	lr
 8001c0e:	bf00      	nop
 8001c10:	40023800 	.word	0x40023800
 8001c14:	40013800 	.word	0x40013800
 8001c18:	40020000 	.word	0x40020000
 8001c1c:	40020400 	.word	0x40020400
 8001c20:	40020800 	.word	0x40020800
 8001c24:	40020c00 	.word	0x40020c00
 8001c28:	40021000 	.word	0x40021000
 8001c2c:	40021400 	.word	0x40021400
 8001c30:	40021800 	.word	0x40021800
 8001c34:	40021c00 	.word	0x40021c00
 8001c38:	40013c00 	.word	0x40013c00

08001c3c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	b083      	sub	sp, #12
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
 8001c44:	460b      	mov	r3, r1
 8001c46:	807b      	strh	r3, [r7, #2]
 8001c48:	4613      	mov	r3, r2
 8001c4a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001c4c:	787b      	ldrb	r3, [r7, #1]
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d003      	beq.n	8001c5a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001c52:	887a      	ldrh	r2, [r7, #2]
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001c58:	e003      	b.n	8001c62 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001c5a:	887b      	ldrh	r3, [r7, #2]
 8001c5c:	041a      	lsls	r2, r3, #16
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	619a      	str	r2, [r3, #24]
}
 8001c62:	bf00      	nop
 8001c64:	370c      	adds	r7, #12
 8001c66:	46bd      	mov	sp, r7
 8001c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6c:	4770      	bx	lr
	...

08001c70 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b086      	sub	sp, #24
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d101      	bne.n	8001c82 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001c7e:	2301      	movs	r3, #1
 8001c80:	e267      	b.n	8002152 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f003 0301 	and.w	r3, r3, #1
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d075      	beq.n	8001d7a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001c8e:	4b88      	ldr	r3, [pc, #544]	@ (8001eb0 <HAL_RCC_OscConfig+0x240>)
 8001c90:	689b      	ldr	r3, [r3, #8]
 8001c92:	f003 030c 	and.w	r3, r3, #12
 8001c96:	2b04      	cmp	r3, #4
 8001c98:	d00c      	beq.n	8001cb4 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001c9a:	4b85      	ldr	r3, [pc, #532]	@ (8001eb0 <HAL_RCC_OscConfig+0x240>)
 8001c9c:	689b      	ldr	r3, [r3, #8]
 8001c9e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001ca2:	2b08      	cmp	r3, #8
 8001ca4:	d112      	bne.n	8001ccc <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001ca6:	4b82      	ldr	r3, [pc, #520]	@ (8001eb0 <HAL_RCC_OscConfig+0x240>)
 8001ca8:	685b      	ldr	r3, [r3, #4]
 8001caa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001cae:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001cb2:	d10b      	bne.n	8001ccc <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cb4:	4b7e      	ldr	r3, [pc, #504]	@ (8001eb0 <HAL_RCC_OscConfig+0x240>)
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d05b      	beq.n	8001d78 <HAL_RCC_OscConfig+0x108>
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	685b      	ldr	r3, [r3, #4]
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d157      	bne.n	8001d78 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001cc8:	2301      	movs	r3, #1
 8001cca:	e242      	b.n	8002152 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	685b      	ldr	r3, [r3, #4]
 8001cd0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001cd4:	d106      	bne.n	8001ce4 <HAL_RCC_OscConfig+0x74>
 8001cd6:	4b76      	ldr	r3, [pc, #472]	@ (8001eb0 <HAL_RCC_OscConfig+0x240>)
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	4a75      	ldr	r2, [pc, #468]	@ (8001eb0 <HAL_RCC_OscConfig+0x240>)
 8001cdc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001ce0:	6013      	str	r3, [r2, #0]
 8001ce2:	e01d      	b.n	8001d20 <HAL_RCC_OscConfig+0xb0>
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	685b      	ldr	r3, [r3, #4]
 8001ce8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001cec:	d10c      	bne.n	8001d08 <HAL_RCC_OscConfig+0x98>
 8001cee:	4b70      	ldr	r3, [pc, #448]	@ (8001eb0 <HAL_RCC_OscConfig+0x240>)
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	4a6f      	ldr	r2, [pc, #444]	@ (8001eb0 <HAL_RCC_OscConfig+0x240>)
 8001cf4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001cf8:	6013      	str	r3, [r2, #0]
 8001cfa:	4b6d      	ldr	r3, [pc, #436]	@ (8001eb0 <HAL_RCC_OscConfig+0x240>)
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	4a6c      	ldr	r2, [pc, #432]	@ (8001eb0 <HAL_RCC_OscConfig+0x240>)
 8001d00:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001d04:	6013      	str	r3, [r2, #0]
 8001d06:	e00b      	b.n	8001d20 <HAL_RCC_OscConfig+0xb0>
 8001d08:	4b69      	ldr	r3, [pc, #420]	@ (8001eb0 <HAL_RCC_OscConfig+0x240>)
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	4a68      	ldr	r2, [pc, #416]	@ (8001eb0 <HAL_RCC_OscConfig+0x240>)
 8001d0e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001d12:	6013      	str	r3, [r2, #0]
 8001d14:	4b66      	ldr	r3, [pc, #408]	@ (8001eb0 <HAL_RCC_OscConfig+0x240>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	4a65      	ldr	r2, [pc, #404]	@ (8001eb0 <HAL_RCC_OscConfig+0x240>)
 8001d1a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001d1e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	685b      	ldr	r3, [r3, #4]
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d013      	beq.n	8001d50 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d28:	f7ff f8cc 	bl	8000ec4 <HAL_GetTick>
 8001d2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d2e:	e008      	b.n	8001d42 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d30:	f7ff f8c8 	bl	8000ec4 <HAL_GetTick>
 8001d34:	4602      	mov	r2, r0
 8001d36:	693b      	ldr	r3, [r7, #16]
 8001d38:	1ad3      	subs	r3, r2, r3
 8001d3a:	2b64      	cmp	r3, #100	@ 0x64
 8001d3c:	d901      	bls.n	8001d42 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001d3e:	2303      	movs	r3, #3
 8001d40:	e207      	b.n	8002152 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d42:	4b5b      	ldr	r3, [pc, #364]	@ (8001eb0 <HAL_RCC_OscConfig+0x240>)
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d0f0      	beq.n	8001d30 <HAL_RCC_OscConfig+0xc0>
 8001d4e:	e014      	b.n	8001d7a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d50:	f7ff f8b8 	bl	8000ec4 <HAL_GetTick>
 8001d54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d56:	e008      	b.n	8001d6a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d58:	f7ff f8b4 	bl	8000ec4 <HAL_GetTick>
 8001d5c:	4602      	mov	r2, r0
 8001d5e:	693b      	ldr	r3, [r7, #16]
 8001d60:	1ad3      	subs	r3, r2, r3
 8001d62:	2b64      	cmp	r3, #100	@ 0x64
 8001d64:	d901      	bls.n	8001d6a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001d66:	2303      	movs	r3, #3
 8001d68:	e1f3      	b.n	8002152 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d6a:	4b51      	ldr	r3, [pc, #324]	@ (8001eb0 <HAL_RCC_OscConfig+0x240>)
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d1f0      	bne.n	8001d58 <HAL_RCC_OscConfig+0xe8>
 8001d76:	e000      	b.n	8001d7a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d78:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f003 0302 	and.w	r3, r3, #2
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d063      	beq.n	8001e4e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001d86:	4b4a      	ldr	r3, [pc, #296]	@ (8001eb0 <HAL_RCC_OscConfig+0x240>)
 8001d88:	689b      	ldr	r3, [r3, #8]
 8001d8a:	f003 030c 	and.w	r3, r3, #12
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d00b      	beq.n	8001daa <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001d92:	4b47      	ldr	r3, [pc, #284]	@ (8001eb0 <HAL_RCC_OscConfig+0x240>)
 8001d94:	689b      	ldr	r3, [r3, #8]
 8001d96:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001d9a:	2b08      	cmp	r3, #8
 8001d9c:	d11c      	bne.n	8001dd8 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001d9e:	4b44      	ldr	r3, [pc, #272]	@ (8001eb0 <HAL_RCC_OscConfig+0x240>)
 8001da0:	685b      	ldr	r3, [r3, #4]
 8001da2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d116      	bne.n	8001dd8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001daa:	4b41      	ldr	r3, [pc, #260]	@ (8001eb0 <HAL_RCC_OscConfig+0x240>)
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f003 0302 	and.w	r3, r3, #2
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d005      	beq.n	8001dc2 <HAL_RCC_OscConfig+0x152>
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	68db      	ldr	r3, [r3, #12]
 8001dba:	2b01      	cmp	r3, #1
 8001dbc:	d001      	beq.n	8001dc2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001dbe:	2301      	movs	r3, #1
 8001dc0:	e1c7      	b.n	8002152 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001dc2:	4b3b      	ldr	r3, [pc, #236]	@ (8001eb0 <HAL_RCC_OscConfig+0x240>)
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	691b      	ldr	r3, [r3, #16]
 8001dce:	00db      	lsls	r3, r3, #3
 8001dd0:	4937      	ldr	r1, [pc, #220]	@ (8001eb0 <HAL_RCC_OscConfig+0x240>)
 8001dd2:	4313      	orrs	r3, r2
 8001dd4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001dd6:	e03a      	b.n	8001e4e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	68db      	ldr	r3, [r3, #12]
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d020      	beq.n	8001e22 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001de0:	4b34      	ldr	r3, [pc, #208]	@ (8001eb4 <HAL_RCC_OscConfig+0x244>)
 8001de2:	2201      	movs	r2, #1
 8001de4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001de6:	f7ff f86d 	bl	8000ec4 <HAL_GetTick>
 8001dea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001dec:	e008      	b.n	8001e00 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001dee:	f7ff f869 	bl	8000ec4 <HAL_GetTick>
 8001df2:	4602      	mov	r2, r0
 8001df4:	693b      	ldr	r3, [r7, #16]
 8001df6:	1ad3      	subs	r3, r2, r3
 8001df8:	2b02      	cmp	r3, #2
 8001dfa:	d901      	bls.n	8001e00 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001dfc:	2303      	movs	r3, #3
 8001dfe:	e1a8      	b.n	8002152 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e00:	4b2b      	ldr	r3, [pc, #172]	@ (8001eb0 <HAL_RCC_OscConfig+0x240>)
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f003 0302 	and.w	r3, r3, #2
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d0f0      	beq.n	8001dee <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e0c:	4b28      	ldr	r3, [pc, #160]	@ (8001eb0 <HAL_RCC_OscConfig+0x240>)
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	691b      	ldr	r3, [r3, #16]
 8001e18:	00db      	lsls	r3, r3, #3
 8001e1a:	4925      	ldr	r1, [pc, #148]	@ (8001eb0 <HAL_RCC_OscConfig+0x240>)
 8001e1c:	4313      	orrs	r3, r2
 8001e1e:	600b      	str	r3, [r1, #0]
 8001e20:	e015      	b.n	8001e4e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e22:	4b24      	ldr	r3, [pc, #144]	@ (8001eb4 <HAL_RCC_OscConfig+0x244>)
 8001e24:	2200      	movs	r2, #0
 8001e26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e28:	f7ff f84c 	bl	8000ec4 <HAL_GetTick>
 8001e2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e2e:	e008      	b.n	8001e42 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e30:	f7ff f848 	bl	8000ec4 <HAL_GetTick>
 8001e34:	4602      	mov	r2, r0
 8001e36:	693b      	ldr	r3, [r7, #16]
 8001e38:	1ad3      	subs	r3, r2, r3
 8001e3a:	2b02      	cmp	r3, #2
 8001e3c:	d901      	bls.n	8001e42 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001e3e:	2303      	movs	r3, #3
 8001e40:	e187      	b.n	8002152 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e42:	4b1b      	ldr	r3, [pc, #108]	@ (8001eb0 <HAL_RCC_OscConfig+0x240>)
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f003 0302 	and.w	r3, r3, #2
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d1f0      	bne.n	8001e30 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f003 0308 	and.w	r3, r3, #8
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d036      	beq.n	8001ec8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	695b      	ldr	r3, [r3, #20]
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d016      	beq.n	8001e90 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e62:	4b15      	ldr	r3, [pc, #84]	@ (8001eb8 <HAL_RCC_OscConfig+0x248>)
 8001e64:	2201      	movs	r2, #1
 8001e66:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e68:	f7ff f82c 	bl	8000ec4 <HAL_GetTick>
 8001e6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e6e:	e008      	b.n	8001e82 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e70:	f7ff f828 	bl	8000ec4 <HAL_GetTick>
 8001e74:	4602      	mov	r2, r0
 8001e76:	693b      	ldr	r3, [r7, #16]
 8001e78:	1ad3      	subs	r3, r2, r3
 8001e7a:	2b02      	cmp	r3, #2
 8001e7c:	d901      	bls.n	8001e82 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001e7e:	2303      	movs	r3, #3
 8001e80:	e167      	b.n	8002152 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e82:	4b0b      	ldr	r3, [pc, #44]	@ (8001eb0 <HAL_RCC_OscConfig+0x240>)
 8001e84:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001e86:	f003 0302 	and.w	r3, r3, #2
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d0f0      	beq.n	8001e70 <HAL_RCC_OscConfig+0x200>
 8001e8e:	e01b      	b.n	8001ec8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e90:	4b09      	ldr	r3, [pc, #36]	@ (8001eb8 <HAL_RCC_OscConfig+0x248>)
 8001e92:	2200      	movs	r2, #0
 8001e94:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e96:	f7ff f815 	bl	8000ec4 <HAL_GetTick>
 8001e9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e9c:	e00e      	b.n	8001ebc <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e9e:	f7ff f811 	bl	8000ec4 <HAL_GetTick>
 8001ea2:	4602      	mov	r2, r0
 8001ea4:	693b      	ldr	r3, [r7, #16]
 8001ea6:	1ad3      	subs	r3, r2, r3
 8001ea8:	2b02      	cmp	r3, #2
 8001eaa:	d907      	bls.n	8001ebc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001eac:	2303      	movs	r3, #3
 8001eae:	e150      	b.n	8002152 <HAL_RCC_OscConfig+0x4e2>
 8001eb0:	40023800 	.word	0x40023800
 8001eb4:	42470000 	.word	0x42470000
 8001eb8:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ebc:	4b88      	ldr	r3, [pc, #544]	@ (80020e0 <HAL_RCC_OscConfig+0x470>)
 8001ebe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001ec0:	f003 0302 	and.w	r3, r3, #2
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d1ea      	bne.n	8001e9e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f003 0304 	and.w	r3, r3, #4
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	f000 8097 	beq.w	8002004 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001eda:	4b81      	ldr	r3, [pc, #516]	@ (80020e0 <HAL_RCC_OscConfig+0x470>)
 8001edc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ede:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d10f      	bne.n	8001f06 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	60bb      	str	r3, [r7, #8]
 8001eea:	4b7d      	ldr	r3, [pc, #500]	@ (80020e0 <HAL_RCC_OscConfig+0x470>)
 8001eec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001eee:	4a7c      	ldr	r2, [pc, #496]	@ (80020e0 <HAL_RCC_OscConfig+0x470>)
 8001ef0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001ef4:	6413      	str	r3, [r2, #64]	@ 0x40
 8001ef6:	4b7a      	ldr	r3, [pc, #488]	@ (80020e0 <HAL_RCC_OscConfig+0x470>)
 8001ef8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001efa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001efe:	60bb      	str	r3, [r7, #8]
 8001f00:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f02:	2301      	movs	r3, #1
 8001f04:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f06:	4b77      	ldr	r3, [pc, #476]	@ (80020e4 <HAL_RCC_OscConfig+0x474>)
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d118      	bne.n	8001f44 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f12:	4b74      	ldr	r3, [pc, #464]	@ (80020e4 <HAL_RCC_OscConfig+0x474>)
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	4a73      	ldr	r2, [pc, #460]	@ (80020e4 <HAL_RCC_OscConfig+0x474>)
 8001f18:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001f1c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f1e:	f7fe ffd1 	bl	8000ec4 <HAL_GetTick>
 8001f22:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f24:	e008      	b.n	8001f38 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f26:	f7fe ffcd 	bl	8000ec4 <HAL_GetTick>
 8001f2a:	4602      	mov	r2, r0
 8001f2c:	693b      	ldr	r3, [r7, #16]
 8001f2e:	1ad3      	subs	r3, r2, r3
 8001f30:	2b02      	cmp	r3, #2
 8001f32:	d901      	bls.n	8001f38 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001f34:	2303      	movs	r3, #3
 8001f36:	e10c      	b.n	8002152 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f38:	4b6a      	ldr	r3, [pc, #424]	@ (80020e4 <HAL_RCC_OscConfig+0x474>)
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d0f0      	beq.n	8001f26 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	689b      	ldr	r3, [r3, #8]
 8001f48:	2b01      	cmp	r3, #1
 8001f4a:	d106      	bne.n	8001f5a <HAL_RCC_OscConfig+0x2ea>
 8001f4c:	4b64      	ldr	r3, [pc, #400]	@ (80020e0 <HAL_RCC_OscConfig+0x470>)
 8001f4e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f50:	4a63      	ldr	r2, [pc, #396]	@ (80020e0 <HAL_RCC_OscConfig+0x470>)
 8001f52:	f043 0301 	orr.w	r3, r3, #1
 8001f56:	6713      	str	r3, [r2, #112]	@ 0x70
 8001f58:	e01c      	b.n	8001f94 <HAL_RCC_OscConfig+0x324>
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	689b      	ldr	r3, [r3, #8]
 8001f5e:	2b05      	cmp	r3, #5
 8001f60:	d10c      	bne.n	8001f7c <HAL_RCC_OscConfig+0x30c>
 8001f62:	4b5f      	ldr	r3, [pc, #380]	@ (80020e0 <HAL_RCC_OscConfig+0x470>)
 8001f64:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f66:	4a5e      	ldr	r2, [pc, #376]	@ (80020e0 <HAL_RCC_OscConfig+0x470>)
 8001f68:	f043 0304 	orr.w	r3, r3, #4
 8001f6c:	6713      	str	r3, [r2, #112]	@ 0x70
 8001f6e:	4b5c      	ldr	r3, [pc, #368]	@ (80020e0 <HAL_RCC_OscConfig+0x470>)
 8001f70:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f72:	4a5b      	ldr	r2, [pc, #364]	@ (80020e0 <HAL_RCC_OscConfig+0x470>)
 8001f74:	f043 0301 	orr.w	r3, r3, #1
 8001f78:	6713      	str	r3, [r2, #112]	@ 0x70
 8001f7a:	e00b      	b.n	8001f94 <HAL_RCC_OscConfig+0x324>
 8001f7c:	4b58      	ldr	r3, [pc, #352]	@ (80020e0 <HAL_RCC_OscConfig+0x470>)
 8001f7e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f80:	4a57      	ldr	r2, [pc, #348]	@ (80020e0 <HAL_RCC_OscConfig+0x470>)
 8001f82:	f023 0301 	bic.w	r3, r3, #1
 8001f86:	6713      	str	r3, [r2, #112]	@ 0x70
 8001f88:	4b55      	ldr	r3, [pc, #340]	@ (80020e0 <HAL_RCC_OscConfig+0x470>)
 8001f8a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f8c:	4a54      	ldr	r2, [pc, #336]	@ (80020e0 <HAL_RCC_OscConfig+0x470>)
 8001f8e:	f023 0304 	bic.w	r3, r3, #4
 8001f92:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	689b      	ldr	r3, [r3, #8]
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d015      	beq.n	8001fc8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f9c:	f7fe ff92 	bl	8000ec4 <HAL_GetTick>
 8001fa0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fa2:	e00a      	b.n	8001fba <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fa4:	f7fe ff8e 	bl	8000ec4 <HAL_GetTick>
 8001fa8:	4602      	mov	r2, r0
 8001faa:	693b      	ldr	r3, [r7, #16]
 8001fac:	1ad3      	subs	r3, r2, r3
 8001fae:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001fb2:	4293      	cmp	r3, r2
 8001fb4:	d901      	bls.n	8001fba <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001fb6:	2303      	movs	r3, #3
 8001fb8:	e0cb      	b.n	8002152 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fba:	4b49      	ldr	r3, [pc, #292]	@ (80020e0 <HAL_RCC_OscConfig+0x470>)
 8001fbc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001fbe:	f003 0302 	and.w	r3, r3, #2
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d0ee      	beq.n	8001fa4 <HAL_RCC_OscConfig+0x334>
 8001fc6:	e014      	b.n	8001ff2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fc8:	f7fe ff7c 	bl	8000ec4 <HAL_GetTick>
 8001fcc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001fce:	e00a      	b.n	8001fe6 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fd0:	f7fe ff78 	bl	8000ec4 <HAL_GetTick>
 8001fd4:	4602      	mov	r2, r0
 8001fd6:	693b      	ldr	r3, [r7, #16]
 8001fd8:	1ad3      	subs	r3, r2, r3
 8001fda:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001fde:	4293      	cmp	r3, r2
 8001fe0:	d901      	bls.n	8001fe6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001fe2:	2303      	movs	r3, #3
 8001fe4:	e0b5      	b.n	8002152 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001fe6:	4b3e      	ldr	r3, [pc, #248]	@ (80020e0 <HAL_RCC_OscConfig+0x470>)
 8001fe8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001fea:	f003 0302 	and.w	r3, r3, #2
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d1ee      	bne.n	8001fd0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001ff2:	7dfb      	ldrb	r3, [r7, #23]
 8001ff4:	2b01      	cmp	r3, #1
 8001ff6:	d105      	bne.n	8002004 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ff8:	4b39      	ldr	r3, [pc, #228]	@ (80020e0 <HAL_RCC_OscConfig+0x470>)
 8001ffa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ffc:	4a38      	ldr	r2, [pc, #224]	@ (80020e0 <HAL_RCC_OscConfig+0x470>)
 8001ffe:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002002:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	699b      	ldr	r3, [r3, #24]
 8002008:	2b00      	cmp	r3, #0
 800200a:	f000 80a1 	beq.w	8002150 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800200e:	4b34      	ldr	r3, [pc, #208]	@ (80020e0 <HAL_RCC_OscConfig+0x470>)
 8002010:	689b      	ldr	r3, [r3, #8]
 8002012:	f003 030c 	and.w	r3, r3, #12
 8002016:	2b08      	cmp	r3, #8
 8002018:	d05c      	beq.n	80020d4 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	699b      	ldr	r3, [r3, #24]
 800201e:	2b02      	cmp	r3, #2
 8002020:	d141      	bne.n	80020a6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002022:	4b31      	ldr	r3, [pc, #196]	@ (80020e8 <HAL_RCC_OscConfig+0x478>)
 8002024:	2200      	movs	r2, #0
 8002026:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002028:	f7fe ff4c 	bl	8000ec4 <HAL_GetTick>
 800202c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800202e:	e008      	b.n	8002042 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002030:	f7fe ff48 	bl	8000ec4 <HAL_GetTick>
 8002034:	4602      	mov	r2, r0
 8002036:	693b      	ldr	r3, [r7, #16]
 8002038:	1ad3      	subs	r3, r2, r3
 800203a:	2b02      	cmp	r3, #2
 800203c:	d901      	bls.n	8002042 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800203e:	2303      	movs	r3, #3
 8002040:	e087      	b.n	8002152 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002042:	4b27      	ldr	r3, [pc, #156]	@ (80020e0 <HAL_RCC_OscConfig+0x470>)
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800204a:	2b00      	cmp	r3, #0
 800204c:	d1f0      	bne.n	8002030 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	69da      	ldr	r2, [r3, #28]
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	6a1b      	ldr	r3, [r3, #32]
 8002056:	431a      	orrs	r2, r3
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800205c:	019b      	lsls	r3, r3, #6
 800205e:	431a      	orrs	r2, r3
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002064:	085b      	lsrs	r3, r3, #1
 8002066:	3b01      	subs	r3, #1
 8002068:	041b      	lsls	r3, r3, #16
 800206a:	431a      	orrs	r2, r3
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002070:	061b      	lsls	r3, r3, #24
 8002072:	491b      	ldr	r1, [pc, #108]	@ (80020e0 <HAL_RCC_OscConfig+0x470>)
 8002074:	4313      	orrs	r3, r2
 8002076:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002078:	4b1b      	ldr	r3, [pc, #108]	@ (80020e8 <HAL_RCC_OscConfig+0x478>)
 800207a:	2201      	movs	r2, #1
 800207c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800207e:	f7fe ff21 	bl	8000ec4 <HAL_GetTick>
 8002082:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002084:	e008      	b.n	8002098 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002086:	f7fe ff1d 	bl	8000ec4 <HAL_GetTick>
 800208a:	4602      	mov	r2, r0
 800208c:	693b      	ldr	r3, [r7, #16]
 800208e:	1ad3      	subs	r3, r2, r3
 8002090:	2b02      	cmp	r3, #2
 8002092:	d901      	bls.n	8002098 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002094:	2303      	movs	r3, #3
 8002096:	e05c      	b.n	8002152 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002098:	4b11      	ldr	r3, [pc, #68]	@ (80020e0 <HAL_RCC_OscConfig+0x470>)
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d0f0      	beq.n	8002086 <HAL_RCC_OscConfig+0x416>
 80020a4:	e054      	b.n	8002150 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020a6:	4b10      	ldr	r3, [pc, #64]	@ (80020e8 <HAL_RCC_OscConfig+0x478>)
 80020a8:	2200      	movs	r2, #0
 80020aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020ac:	f7fe ff0a 	bl	8000ec4 <HAL_GetTick>
 80020b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020b2:	e008      	b.n	80020c6 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020b4:	f7fe ff06 	bl	8000ec4 <HAL_GetTick>
 80020b8:	4602      	mov	r2, r0
 80020ba:	693b      	ldr	r3, [r7, #16]
 80020bc:	1ad3      	subs	r3, r2, r3
 80020be:	2b02      	cmp	r3, #2
 80020c0:	d901      	bls.n	80020c6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80020c2:	2303      	movs	r3, #3
 80020c4:	e045      	b.n	8002152 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020c6:	4b06      	ldr	r3, [pc, #24]	@ (80020e0 <HAL_RCC_OscConfig+0x470>)
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d1f0      	bne.n	80020b4 <HAL_RCC_OscConfig+0x444>
 80020d2:	e03d      	b.n	8002150 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	699b      	ldr	r3, [r3, #24]
 80020d8:	2b01      	cmp	r3, #1
 80020da:	d107      	bne.n	80020ec <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80020dc:	2301      	movs	r3, #1
 80020de:	e038      	b.n	8002152 <HAL_RCC_OscConfig+0x4e2>
 80020e0:	40023800 	.word	0x40023800
 80020e4:	40007000 	.word	0x40007000
 80020e8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80020ec:	4b1b      	ldr	r3, [pc, #108]	@ (800215c <HAL_RCC_OscConfig+0x4ec>)
 80020ee:	685b      	ldr	r3, [r3, #4]
 80020f0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	699b      	ldr	r3, [r3, #24]
 80020f6:	2b01      	cmp	r3, #1
 80020f8:	d028      	beq.n	800214c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002104:	429a      	cmp	r2, r3
 8002106:	d121      	bne.n	800214c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002112:	429a      	cmp	r2, r3
 8002114:	d11a      	bne.n	800214c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002116:	68fa      	ldr	r2, [r7, #12]
 8002118:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800211c:	4013      	ands	r3, r2
 800211e:	687a      	ldr	r2, [r7, #4]
 8002120:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002122:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002124:	4293      	cmp	r3, r2
 8002126:	d111      	bne.n	800214c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002132:	085b      	lsrs	r3, r3, #1
 8002134:	3b01      	subs	r3, #1
 8002136:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002138:	429a      	cmp	r2, r3
 800213a:	d107      	bne.n	800214c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002146:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002148:	429a      	cmp	r2, r3
 800214a:	d001      	beq.n	8002150 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800214c:	2301      	movs	r3, #1
 800214e:	e000      	b.n	8002152 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002150:	2300      	movs	r3, #0
}
 8002152:	4618      	mov	r0, r3
 8002154:	3718      	adds	r7, #24
 8002156:	46bd      	mov	sp, r7
 8002158:	bd80      	pop	{r7, pc}
 800215a:	bf00      	nop
 800215c:	40023800 	.word	0x40023800

08002160 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	b084      	sub	sp, #16
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
 8002168:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	2b00      	cmp	r3, #0
 800216e:	d101      	bne.n	8002174 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002170:	2301      	movs	r3, #1
 8002172:	e0cc      	b.n	800230e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002174:	4b68      	ldr	r3, [pc, #416]	@ (8002318 <HAL_RCC_ClockConfig+0x1b8>)
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f003 0307 	and.w	r3, r3, #7
 800217c:	683a      	ldr	r2, [r7, #0]
 800217e:	429a      	cmp	r2, r3
 8002180:	d90c      	bls.n	800219c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002182:	4b65      	ldr	r3, [pc, #404]	@ (8002318 <HAL_RCC_ClockConfig+0x1b8>)
 8002184:	683a      	ldr	r2, [r7, #0]
 8002186:	b2d2      	uxtb	r2, r2
 8002188:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800218a:	4b63      	ldr	r3, [pc, #396]	@ (8002318 <HAL_RCC_ClockConfig+0x1b8>)
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f003 0307 	and.w	r3, r3, #7
 8002192:	683a      	ldr	r2, [r7, #0]
 8002194:	429a      	cmp	r2, r3
 8002196:	d001      	beq.n	800219c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002198:	2301      	movs	r3, #1
 800219a:	e0b8      	b.n	800230e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f003 0302 	and.w	r3, r3, #2
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d020      	beq.n	80021ea <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f003 0304 	and.w	r3, r3, #4
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d005      	beq.n	80021c0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80021b4:	4b59      	ldr	r3, [pc, #356]	@ (800231c <HAL_RCC_ClockConfig+0x1bc>)
 80021b6:	689b      	ldr	r3, [r3, #8]
 80021b8:	4a58      	ldr	r2, [pc, #352]	@ (800231c <HAL_RCC_ClockConfig+0x1bc>)
 80021ba:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80021be:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f003 0308 	and.w	r3, r3, #8
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d005      	beq.n	80021d8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80021cc:	4b53      	ldr	r3, [pc, #332]	@ (800231c <HAL_RCC_ClockConfig+0x1bc>)
 80021ce:	689b      	ldr	r3, [r3, #8]
 80021d0:	4a52      	ldr	r2, [pc, #328]	@ (800231c <HAL_RCC_ClockConfig+0x1bc>)
 80021d2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80021d6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80021d8:	4b50      	ldr	r3, [pc, #320]	@ (800231c <HAL_RCC_ClockConfig+0x1bc>)
 80021da:	689b      	ldr	r3, [r3, #8]
 80021dc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	689b      	ldr	r3, [r3, #8]
 80021e4:	494d      	ldr	r1, [pc, #308]	@ (800231c <HAL_RCC_ClockConfig+0x1bc>)
 80021e6:	4313      	orrs	r3, r2
 80021e8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f003 0301 	and.w	r3, r3, #1
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d044      	beq.n	8002280 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	685b      	ldr	r3, [r3, #4]
 80021fa:	2b01      	cmp	r3, #1
 80021fc:	d107      	bne.n	800220e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021fe:	4b47      	ldr	r3, [pc, #284]	@ (800231c <HAL_RCC_ClockConfig+0x1bc>)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002206:	2b00      	cmp	r3, #0
 8002208:	d119      	bne.n	800223e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800220a:	2301      	movs	r3, #1
 800220c:	e07f      	b.n	800230e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	685b      	ldr	r3, [r3, #4]
 8002212:	2b02      	cmp	r3, #2
 8002214:	d003      	beq.n	800221e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800221a:	2b03      	cmp	r3, #3
 800221c:	d107      	bne.n	800222e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800221e:	4b3f      	ldr	r3, [pc, #252]	@ (800231c <HAL_RCC_ClockConfig+0x1bc>)
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002226:	2b00      	cmp	r3, #0
 8002228:	d109      	bne.n	800223e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800222a:	2301      	movs	r3, #1
 800222c:	e06f      	b.n	800230e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800222e:	4b3b      	ldr	r3, [pc, #236]	@ (800231c <HAL_RCC_ClockConfig+0x1bc>)
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f003 0302 	and.w	r3, r3, #2
 8002236:	2b00      	cmp	r3, #0
 8002238:	d101      	bne.n	800223e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800223a:	2301      	movs	r3, #1
 800223c:	e067      	b.n	800230e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800223e:	4b37      	ldr	r3, [pc, #220]	@ (800231c <HAL_RCC_ClockConfig+0x1bc>)
 8002240:	689b      	ldr	r3, [r3, #8]
 8002242:	f023 0203 	bic.w	r2, r3, #3
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	685b      	ldr	r3, [r3, #4]
 800224a:	4934      	ldr	r1, [pc, #208]	@ (800231c <HAL_RCC_ClockConfig+0x1bc>)
 800224c:	4313      	orrs	r3, r2
 800224e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002250:	f7fe fe38 	bl	8000ec4 <HAL_GetTick>
 8002254:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002256:	e00a      	b.n	800226e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002258:	f7fe fe34 	bl	8000ec4 <HAL_GetTick>
 800225c:	4602      	mov	r2, r0
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	1ad3      	subs	r3, r2, r3
 8002262:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002266:	4293      	cmp	r3, r2
 8002268:	d901      	bls.n	800226e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800226a:	2303      	movs	r3, #3
 800226c:	e04f      	b.n	800230e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800226e:	4b2b      	ldr	r3, [pc, #172]	@ (800231c <HAL_RCC_ClockConfig+0x1bc>)
 8002270:	689b      	ldr	r3, [r3, #8]
 8002272:	f003 020c 	and.w	r2, r3, #12
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	685b      	ldr	r3, [r3, #4]
 800227a:	009b      	lsls	r3, r3, #2
 800227c:	429a      	cmp	r2, r3
 800227e:	d1eb      	bne.n	8002258 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002280:	4b25      	ldr	r3, [pc, #148]	@ (8002318 <HAL_RCC_ClockConfig+0x1b8>)
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f003 0307 	and.w	r3, r3, #7
 8002288:	683a      	ldr	r2, [r7, #0]
 800228a:	429a      	cmp	r2, r3
 800228c:	d20c      	bcs.n	80022a8 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800228e:	4b22      	ldr	r3, [pc, #136]	@ (8002318 <HAL_RCC_ClockConfig+0x1b8>)
 8002290:	683a      	ldr	r2, [r7, #0]
 8002292:	b2d2      	uxtb	r2, r2
 8002294:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002296:	4b20      	ldr	r3, [pc, #128]	@ (8002318 <HAL_RCC_ClockConfig+0x1b8>)
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f003 0307 	and.w	r3, r3, #7
 800229e:	683a      	ldr	r2, [r7, #0]
 80022a0:	429a      	cmp	r2, r3
 80022a2:	d001      	beq.n	80022a8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80022a4:	2301      	movs	r3, #1
 80022a6:	e032      	b.n	800230e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f003 0304 	and.w	r3, r3, #4
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d008      	beq.n	80022c6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80022b4:	4b19      	ldr	r3, [pc, #100]	@ (800231c <HAL_RCC_ClockConfig+0x1bc>)
 80022b6:	689b      	ldr	r3, [r3, #8]
 80022b8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	68db      	ldr	r3, [r3, #12]
 80022c0:	4916      	ldr	r1, [pc, #88]	@ (800231c <HAL_RCC_ClockConfig+0x1bc>)
 80022c2:	4313      	orrs	r3, r2
 80022c4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f003 0308 	and.w	r3, r3, #8
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d009      	beq.n	80022e6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80022d2:	4b12      	ldr	r3, [pc, #72]	@ (800231c <HAL_RCC_ClockConfig+0x1bc>)
 80022d4:	689b      	ldr	r3, [r3, #8]
 80022d6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	691b      	ldr	r3, [r3, #16]
 80022de:	00db      	lsls	r3, r3, #3
 80022e0:	490e      	ldr	r1, [pc, #56]	@ (800231c <HAL_RCC_ClockConfig+0x1bc>)
 80022e2:	4313      	orrs	r3, r2
 80022e4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80022e6:	f000 f821 	bl	800232c <HAL_RCC_GetSysClockFreq>
 80022ea:	4602      	mov	r2, r0
 80022ec:	4b0b      	ldr	r3, [pc, #44]	@ (800231c <HAL_RCC_ClockConfig+0x1bc>)
 80022ee:	689b      	ldr	r3, [r3, #8]
 80022f0:	091b      	lsrs	r3, r3, #4
 80022f2:	f003 030f 	and.w	r3, r3, #15
 80022f6:	490a      	ldr	r1, [pc, #40]	@ (8002320 <HAL_RCC_ClockConfig+0x1c0>)
 80022f8:	5ccb      	ldrb	r3, [r1, r3]
 80022fa:	fa22 f303 	lsr.w	r3, r2, r3
 80022fe:	4a09      	ldr	r2, [pc, #36]	@ (8002324 <HAL_RCC_ClockConfig+0x1c4>)
 8002300:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002302:	4b09      	ldr	r3, [pc, #36]	@ (8002328 <HAL_RCC_ClockConfig+0x1c8>)
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	4618      	mov	r0, r3
 8002308:	f7fe fd98 	bl	8000e3c <HAL_InitTick>

  return HAL_OK;
 800230c:	2300      	movs	r3, #0
}
 800230e:	4618      	mov	r0, r3
 8002310:	3710      	adds	r7, #16
 8002312:	46bd      	mov	sp, r7
 8002314:	bd80      	pop	{r7, pc}
 8002316:	bf00      	nop
 8002318:	40023c00 	.word	0x40023c00
 800231c:	40023800 	.word	0x40023800
 8002320:	08004374 	.word	0x08004374
 8002324:	20000000 	.word	0x20000000
 8002328:	20000004 	.word	0x20000004

0800232c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800232c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002330:	b094      	sub	sp, #80	@ 0x50
 8002332:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002334:	2300      	movs	r3, #0
 8002336:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8002338:	2300      	movs	r3, #0
 800233a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 800233c:	2300      	movs	r3, #0
 800233e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8002340:	2300      	movs	r3, #0
 8002342:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002344:	4b79      	ldr	r3, [pc, #484]	@ (800252c <HAL_RCC_GetSysClockFreq+0x200>)
 8002346:	689b      	ldr	r3, [r3, #8]
 8002348:	f003 030c 	and.w	r3, r3, #12
 800234c:	2b08      	cmp	r3, #8
 800234e:	d00d      	beq.n	800236c <HAL_RCC_GetSysClockFreq+0x40>
 8002350:	2b08      	cmp	r3, #8
 8002352:	f200 80e1 	bhi.w	8002518 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002356:	2b00      	cmp	r3, #0
 8002358:	d002      	beq.n	8002360 <HAL_RCC_GetSysClockFreq+0x34>
 800235a:	2b04      	cmp	r3, #4
 800235c:	d003      	beq.n	8002366 <HAL_RCC_GetSysClockFreq+0x3a>
 800235e:	e0db      	b.n	8002518 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002360:	4b73      	ldr	r3, [pc, #460]	@ (8002530 <HAL_RCC_GetSysClockFreq+0x204>)
 8002362:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002364:	e0db      	b.n	800251e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002366:	4b73      	ldr	r3, [pc, #460]	@ (8002534 <HAL_RCC_GetSysClockFreq+0x208>)
 8002368:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800236a:	e0d8      	b.n	800251e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800236c:	4b6f      	ldr	r3, [pc, #444]	@ (800252c <HAL_RCC_GetSysClockFreq+0x200>)
 800236e:	685b      	ldr	r3, [r3, #4]
 8002370:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002374:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002376:	4b6d      	ldr	r3, [pc, #436]	@ (800252c <HAL_RCC_GetSysClockFreq+0x200>)
 8002378:	685b      	ldr	r3, [r3, #4]
 800237a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800237e:	2b00      	cmp	r3, #0
 8002380:	d063      	beq.n	800244a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002382:	4b6a      	ldr	r3, [pc, #424]	@ (800252c <HAL_RCC_GetSysClockFreq+0x200>)
 8002384:	685b      	ldr	r3, [r3, #4]
 8002386:	099b      	lsrs	r3, r3, #6
 8002388:	2200      	movs	r2, #0
 800238a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800238c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800238e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002390:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002394:	633b      	str	r3, [r7, #48]	@ 0x30
 8002396:	2300      	movs	r3, #0
 8002398:	637b      	str	r3, [r7, #52]	@ 0x34
 800239a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800239e:	4622      	mov	r2, r4
 80023a0:	462b      	mov	r3, r5
 80023a2:	f04f 0000 	mov.w	r0, #0
 80023a6:	f04f 0100 	mov.w	r1, #0
 80023aa:	0159      	lsls	r1, r3, #5
 80023ac:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80023b0:	0150      	lsls	r0, r2, #5
 80023b2:	4602      	mov	r2, r0
 80023b4:	460b      	mov	r3, r1
 80023b6:	4621      	mov	r1, r4
 80023b8:	1a51      	subs	r1, r2, r1
 80023ba:	6139      	str	r1, [r7, #16]
 80023bc:	4629      	mov	r1, r5
 80023be:	eb63 0301 	sbc.w	r3, r3, r1
 80023c2:	617b      	str	r3, [r7, #20]
 80023c4:	f04f 0200 	mov.w	r2, #0
 80023c8:	f04f 0300 	mov.w	r3, #0
 80023cc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80023d0:	4659      	mov	r1, fp
 80023d2:	018b      	lsls	r3, r1, #6
 80023d4:	4651      	mov	r1, sl
 80023d6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80023da:	4651      	mov	r1, sl
 80023dc:	018a      	lsls	r2, r1, #6
 80023de:	4651      	mov	r1, sl
 80023e0:	ebb2 0801 	subs.w	r8, r2, r1
 80023e4:	4659      	mov	r1, fp
 80023e6:	eb63 0901 	sbc.w	r9, r3, r1
 80023ea:	f04f 0200 	mov.w	r2, #0
 80023ee:	f04f 0300 	mov.w	r3, #0
 80023f2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80023f6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80023fa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80023fe:	4690      	mov	r8, r2
 8002400:	4699      	mov	r9, r3
 8002402:	4623      	mov	r3, r4
 8002404:	eb18 0303 	adds.w	r3, r8, r3
 8002408:	60bb      	str	r3, [r7, #8]
 800240a:	462b      	mov	r3, r5
 800240c:	eb49 0303 	adc.w	r3, r9, r3
 8002410:	60fb      	str	r3, [r7, #12]
 8002412:	f04f 0200 	mov.w	r2, #0
 8002416:	f04f 0300 	mov.w	r3, #0
 800241a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800241e:	4629      	mov	r1, r5
 8002420:	024b      	lsls	r3, r1, #9
 8002422:	4621      	mov	r1, r4
 8002424:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002428:	4621      	mov	r1, r4
 800242a:	024a      	lsls	r2, r1, #9
 800242c:	4610      	mov	r0, r2
 800242e:	4619      	mov	r1, r3
 8002430:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002432:	2200      	movs	r2, #0
 8002434:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002436:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002438:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800243c:	f7fd ff20 	bl	8000280 <__aeabi_uldivmod>
 8002440:	4602      	mov	r2, r0
 8002442:	460b      	mov	r3, r1
 8002444:	4613      	mov	r3, r2
 8002446:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002448:	e058      	b.n	80024fc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800244a:	4b38      	ldr	r3, [pc, #224]	@ (800252c <HAL_RCC_GetSysClockFreq+0x200>)
 800244c:	685b      	ldr	r3, [r3, #4]
 800244e:	099b      	lsrs	r3, r3, #6
 8002450:	2200      	movs	r2, #0
 8002452:	4618      	mov	r0, r3
 8002454:	4611      	mov	r1, r2
 8002456:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800245a:	623b      	str	r3, [r7, #32]
 800245c:	2300      	movs	r3, #0
 800245e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002460:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002464:	4642      	mov	r2, r8
 8002466:	464b      	mov	r3, r9
 8002468:	f04f 0000 	mov.w	r0, #0
 800246c:	f04f 0100 	mov.w	r1, #0
 8002470:	0159      	lsls	r1, r3, #5
 8002472:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002476:	0150      	lsls	r0, r2, #5
 8002478:	4602      	mov	r2, r0
 800247a:	460b      	mov	r3, r1
 800247c:	4641      	mov	r1, r8
 800247e:	ebb2 0a01 	subs.w	sl, r2, r1
 8002482:	4649      	mov	r1, r9
 8002484:	eb63 0b01 	sbc.w	fp, r3, r1
 8002488:	f04f 0200 	mov.w	r2, #0
 800248c:	f04f 0300 	mov.w	r3, #0
 8002490:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002494:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002498:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800249c:	ebb2 040a 	subs.w	r4, r2, sl
 80024a0:	eb63 050b 	sbc.w	r5, r3, fp
 80024a4:	f04f 0200 	mov.w	r2, #0
 80024a8:	f04f 0300 	mov.w	r3, #0
 80024ac:	00eb      	lsls	r3, r5, #3
 80024ae:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80024b2:	00e2      	lsls	r2, r4, #3
 80024b4:	4614      	mov	r4, r2
 80024b6:	461d      	mov	r5, r3
 80024b8:	4643      	mov	r3, r8
 80024ba:	18e3      	adds	r3, r4, r3
 80024bc:	603b      	str	r3, [r7, #0]
 80024be:	464b      	mov	r3, r9
 80024c0:	eb45 0303 	adc.w	r3, r5, r3
 80024c4:	607b      	str	r3, [r7, #4]
 80024c6:	f04f 0200 	mov.w	r2, #0
 80024ca:	f04f 0300 	mov.w	r3, #0
 80024ce:	e9d7 4500 	ldrd	r4, r5, [r7]
 80024d2:	4629      	mov	r1, r5
 80024d4:	028b      	lsls	r3, r1, #10
 80024d6:	4621      	mov	r1, r4
 80024d8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80024dc:	4621      	mov	r1, r4
 80024de:	028a      	lsls	r2, r1, #10
 80024e0:	4610      	mov	r0, r2
 80024e2:	4619      	mov	r1, r3
 80024e4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80024e6:	2200      	movs	r2, #0
 80024e8:	61bb      	str	r3, [r7, #24]
 80024ea:	61fa      	str	r2, [r7, #28]
 80024ec:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80024f0:	f7fd fec6 	bl	8000280 <__aeabi_uldivmod>
 80024f4:	4602      	mov	r2, r0
 80024f6:	460b      	mov	r3, r1
 80024f8:	4613      	mov	r3, r2
 80024fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80024fc:	4b0b      	ldr	r3, [pc, #44]	@ (800252c <HAL_RCC_GetSysClockFreq+0x200>)
 80024fe:	685b      	ldr	r3, [r3, #4]
 8002500:	0c1b      	lsrs	r3, r3, #16
 8002502:	f003 0303 	and.w	r3, r3, #3
 8002506:	3301      	adds	r3, #1
 8002508:	005b      	lsls	r3, r3, #1
 800250a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 800250c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800250e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002510:	fbb2 f3f3 	udiv	r3, r2, r3
 8002514:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002516:	e002      	b.n	800251e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002518:	4b05      	ldr	r3, [pc, #20]	@ (8002530 <HAL_RCC_GetSysClockFreq+0x204>)
 800251a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800251c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800251e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8002520:	4618      	mov	r0, r3
 8002522:	3750      	adds	r7, #80	@ 0x50
 8002524:	46bd      	mov	sp, r7
 8002526:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800252a:	bf00      	nop
 800252c:	40023800 	.word	0x40023800
 8002530:	00f42400 	.word	0x00f42400
 8002534:	007a1200 	.word	0x007a1200

08002538 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002538:	b480      	push	{r7}
 800253a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800253c:	4b03      	ldr	r3, [pc, #12]	@ (800254c <HAL_RCC_GetHCLKFreq+0x14>)
 800253e:	681b      	ldr	r3, [r3, #0]
}
 8002540:	4618      	mov	r0, r3
 8002542:	46bd      	mov	sp, r7
 8002544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002548:	4770      	bx	lr
 800254a:	bf00      	nop
 800254c:	20000000 	.word	0x20000000

08002550 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002554:	f7ff fff0 	bl	8002538 <HAL_RCC_GetHCLKFreq>
 8002558:	4602      	mov	r2, r0
 800255a:	4b05      	ldr	r3, [pc, #20]	@ (8002570 <HAL_RCC_GetPCLK1Freq+0x20>)
 800255c:	689b      	ldr	r3, [r3, #8]
 800255e:	0a9b      	lsrs	r3, r3, #10
 8002560:	f003 0307 	and.w	r3, r3, #7
 8002564:	4903      	ldr	r1, [pc, #12]	@ (8002574 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002566:	5ccb      	ldrb	r3, [r1, r3]
 8002568:	fa22 f303 	lsr.w	r3, r2, r3
}
 800256c:	4618      	mov	r0, r3
 800256e:	bd80      	pop	{r7, pc}
 8002570:	40023800 	.word	0x40023800
 8002574:	08004384 	.word	0x08004384

08002578 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800257c:	f7ff ffdc 	bl	8002538 <HAL_RCC_GetHCLKFreq>
 8002580:	4602      	mov	r2, r0
 8002582:	4b05      	ldr	r3, [pc, #20]	@ (8002598 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002584:	689b      	ldr	r3, [r3, #8]
 8002586:	0b5b      	lsrs	r3, r3, #13
 8002588:	f003 0307 	and.w	r3, r3, #7
 800258c:	4903      	ldr	r1, [pc, #12]	@ (800259c <HAL_RCC_GetPCLK2Freq+0x24>)
 800258e:	5ccb      	ldrb	r3, [r1, r3]
 8002590:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002594:	4618      	mov	r0, r3
 8002596:	bd80      	pop	{r7, pc}
 8002598:	40023800 	.word	0x40023800
 800259c:	08004384 	.word	0x08004384

080025a0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	b082      	sub	sp, #8
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d101      	bne.n	80025b2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80025ae:	2301      	movs	r3, #1
 80025b0:	e042      	b.n	8002638 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80025b8:	b2db      	uxtb	r3, r3
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d106      	bne.n	80025cc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	2200      	movs	r2, #0
 80025c2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80025c6:	6878      	ldr	r0, [r7, #4]
 80025c8:	f7fe fb34 	bl	8000c34 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	2224      	movs	r2, #36	@ 0x24
 80025d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	68da      	ldr	r2, [r3, #12]
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80025e2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80025e4:	6878      	ldr	r0, [r7, #4]
 80025e6:	f000 ff6d 	bl	80034c4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	691a      	ldr	r2, [r3, #16]
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80025f8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	695a      	ldr	r2, [r3, #20]
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002608:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	68da      	ldr	r2, [r3, #12]
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002618:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	2200      	movs	r2, #0
 800261e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	2220      	movs	r2, #32
 8002624:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	2220      	movs	r2, #32
 800262c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	2200      	movs	r2, #0
 8002634:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002636:	2300      	movs	r3, #0
}
 8002638:	4618      	mov	r0, r3
 800263a:	3708      	adds	r7, #8
 800263c:	46bd      	mov	sp, r7
 800263e:	bd80      	pop	{r7, pc}

08002640 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	b08c      	sub	sp, #48	@ 0x30
 8002644:	af00      	add	r7, sp, #0
 8002646:	60f8      	str	r0, [r7, #12]
 8002648:	60b9      	str	r1, [r7, #8]
 800264a:	4613      	mov	r3, r2
 800264c:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002654:	b2db      	uxtb	r3, r3
 8002656:	2b20      	cmp	r3, #32
 8002658:	d156      	bne.n	8002708 <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 800265a:	68bb      	ldr	r3, [r7, #8]
 800265c:	2b00      	cmp	r3, #0
 800265e:	d002      	beq.n	8002666 <HAL_UART_Transmit_DMA+0x26>
 8002660:	88fb      	ldrh	r3, [r7, #6]
 8002662:	2b00      	cmp	r3, #0
 8002664:	d101      	bne.n	800266a <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8002666:	2301      	movs	r3, #1
 8002668:	e04f      	b.n	800270a <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 800266a:	68ba      	ldr	r2, [r7, #8]
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	88fa      	ldrh	r2, [r7, #6]
 8002674:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	88fa      	ldrh	r2, [r7, #6]
 800267a:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	2200      	movs	r2, #0
 8002680:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	2221      	movs	r2, #33	@ 0x21
 8002686:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800268e:	4a21      	ldr	r2, [pc, #132]	@ (8002714 <HAL_UART_Transmit_DMA+0xd4>)
 8002690:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002696:	4a20      	ldr	r2, [pc, #128]	@ (8002718 <HAL_UART_Transmit_DMA+0xd8>)
 8002698:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800269e:	4a1f      	ldr	r2, [pc, #124]	@ (800271c <HAL_UART_Transmit_DMA+0xdc>)
 80026a0:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80026a6:	2200      	movs	r2, #0
 80026a8:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 80026aa:	f107 0308 	add.w	r3, r7, #8
 80026ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 80026b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80026b6:	6819      	ldr	r1, [r3, #0]
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	3304      	adds	r3, #4
 80026be:	461a      	mov	r2, r3
 80026c0:	88fb      	ldrh	r3, [r7, #6]
 80026c2:	f7fe fdcb 	bl	800125c <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80026ce:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	3314      	adds	r3, #20
 80026d6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80026d8:	69bb      	ldr	r3, [r7, #24]
 80026da:	e853 3f00 	ldrex	r3, [r3]
 80026de:	617b      	str	r3, [r7, #20]
   return(result);
 80026e0:	697b      	ldr	r3, [r7, #20]
 80026e2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80026e6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	3314      	adds	r3, #20
 80026ee:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80026f0:	627a      	str	r2, [r7, #36]	@ 0x24
 80026f2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80026f4:	6a39      	ldr	r1, [r7, #32]
 80026f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80026f8:	e841 2300 	strex	r3, r2, [r1]
 80026fc:	61fb      	str	r3, [r7, #28]
   return(result);
 80026fe:	69fb      	ldr	r3, [r7, #28]
 8002700:	2b00      	cmp	r3, #0
 8002702:	d1e5      	bne.n	80026d0 <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 8002704:	2300      	movs	r3, #0
 8002706:	e000      	b.n	800270a <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 8002708:	2302      	movs	r3, #2
  }
}
 800270a:	4618      	mov	r0, r3
 800270c:	3730      	adds	r7, #48	@ 0x30
 800270e:	46bd      	mov	sp, r7
 8002710:	bd80      	pop	{r7, pc}
 8002712:	bf00      	nop
 8002714:	08002d51 	.word	0x08002d51
 8002718:	08002deb 	.word	0x08002deb
 800271c:	08002f6f 	.word	0x08002f6f

08002720 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	b08c      	sub	sp, #48	@ 0x30
 8002724:	af00      	add	r7, sp, #0
 8002726:	60f8      	str	r0, [r7, #12]
 8002728:	60b9      	str	r1, [r7, #8]
 800272a:	4613      	mov	r3, r2
 800272c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002734:	b2db      	uxtb	r3, r3
 8002736:	2b20      	cmp	r3, #32
 8002738:	d14a      	bne.n	80027d0 <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
  {
    if ((pData == NULL) || (Size == 0U))
 800273a:	68bb      	ldr	r3, [r7, #8]
 800273c:	2b00      	cmp	r3, #0
 800273e:	d002      	beq.n	8002746 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 8002740:	88fb      	ldrh	r3, [r7, #6]
 8002742:	2b00      	cmp	r3, #0
 8002744:	d101      	bne.n	800274a <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 8002746:	2301      	movs	r3, #1
 8002748:	e043      	b.n	80027d2 <HAL_UARTEx_ReceiveToIdle_DMA+0xb2>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	2201      	movs	r2, #1
 800274e:	631a      	str	r2, [r3, #48]	@ 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	2200      	movs	r2, #0
 8002754:	635a      	str	r2, [r3, #52]	@ 0x34

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8002756:	88fb      	ldrh	r3, [r7, #6]
 8002758:	461a      	mov	r2, r3
 800275a:	68b9      	ldr	r1, [r7, #8]
 800275c:	68f8      	ldr	r0, [r7, #12]
 800275e:	f000 fc51 	bl	8003004 <UART_Start_Receive_DMA>
 8002762:	4603      	mov	r3, r0
 8002764:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8002768:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800276c:	2b00      	cmp	r3, #0
 800276e:	d12c      	bne.n	80027ca <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002774:	2b01      	cmp	r3, #1
 8002776:	d125      	bne.n	80027c4 <HAL_UARTEx_ReceiveToIdle_DMA+0xa4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002778:	2300      	movs	r3, #0
 800277a:	613b      	str	r3, [r7, #16]
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	613b      	str	r3, [r7, #16]
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	685b      	ldr	r3, [r3, #4]
 800278a:	613b      	str	r3, [r7, #16]
 800278c:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	330c      	adds	r3, #12
 8002794:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002796:	69bb      	ldr	r3, [r7, #24]
 8002798:	e853 3f00 	ldrex	r3, [r3]
 800279c:	617b      	str	r3, [r7, #20]
   return(result);
 800279e:	697b      	ldr	r3, [r7, #20]
 80027a0:	f043 0310 	orr.w	r3, r3, #16
 80027a4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	330c      	adds	r3, #12
 80027ac:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80027ae:	627a      	str	r2, [r7, #36]	@ 0x24
 80027b0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80027b2:	6a39      	ldr	r1, [r7, #32]
 80027b4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80027b6:	e841 2300 	strex	r3, r2, [r1]
 80027ba:	61fb      	str	r3, [r7, #28]
   return(result);
 80027bc:	69fb      	ldr	r3, [r7, #28]
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d1e5      	bne.n	800278e <HAL_UARTEx_ReceiveToIdle_DMA+0x6e>
 80027c2:	e002      	b.n	80027ca <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 80027c4:	2301      	movs	r3, #1
 80027c6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 80027ca:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80027ce:	e000      	b.n	80027d2 <HAL_UARTEx_ReceiveToIdle_DMA+0xb2>
  }
  else
  {
    return HAL_BUSY;
 80027d0:	2302      	movs	r3, #2
  }
}
 80027d2:	4618      	mov	r0, r3
 80027d4:	3730      	adds	r7, #48	@ 0x30
 80027d6:	46bd      	mov	sp, r7
 80027d8:	bd80      	pop	{r7, pc}
	...

080027dc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	b0ba      	sub	sp, #232	@ 0xe8
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	68db      	ldr	r3, [r3, #12]
 80027f4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	695b      	ldr	r3, [r3, #20]
 80027fe:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8002802:	2300      	movs	r3, #0
 8002804:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8002808:	2300      	movs	r3, #0
 800280a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800280e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002812:	f003 030f 	and.w	r3, r3, #15
 8002816:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800281a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800281e:	2b00      	cmp	r3, #0
 8002820:	d10f      	bne.n	8002842 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002822:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002826:	f003 0320 	and.w	r3, r3, #32
 800282a:	2b00      	cmp	r3, #0
 800282c:	d009      	beq.n	8002842 <HAL_UART_IRQHandler+0x66>
 800282e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002832:	f003 0320 	and.w	r3, r3, #32
 8002836:	2b00      	cmp	r3, #0
 8002838:	d003      	beq.n	8002842 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800283a:	6878      	ldr	r0, [r7, #4]
 800283c:	f000 fd83 	bl	8003346 <UART_Receive_IT>
      return;
 8002840:	e25b      	b.n	8002cfa <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002842:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002846:	2b00      	cmp	r3, #0
 8002848:	f000 80de 	beq.w	8002a08 <HAL_UART_IRQHandler+0x22c>
 800284c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002850:	f003 0301 	and.w	r3, r3, #1
 8002854:	2b00      	cmp	r3, #0
 8002856:	d106      	bne.n	8002866 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002858:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800285c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8002860:	2b00      	cmp	r3, #0
 8002862:	f000 80d1 	beq.w	8002a08 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002866:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800286a:	f003 0301 	and.w	r3, r3, #1
 800286e:	2b00      	cmp	r3, #0
 8002870:	d00b      	beq.n	800288a <HAL_UART_IRQHandler+0xae>
 8002872:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002876:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800287a:	2b00      	cmp	r3, #0
 800287c:	d005      	beq.n	800288a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002882:	f043 0201 	orr.w	r2, r3, #1
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800288a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800288e:	f003 0304 	and.w	r3, r3, #4
 8002892:	2b00      	cmp	r3, #0
 8002894:	d00b      	beq.n	80028ae <HAL_UART_IRQHandler+0xd2>
 8002896:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800289a:	f003 0301 	and.w	r3, r3, #1
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d005      	beq.n	80028ae <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028a6:	f043 0202 	orr.w	r2, r3, #2
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80028ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80028b2:	f003 0302 	and.w	r3, r3, #2
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d00b      	beq.n	80028d2 <HAL_UART_IRQHandler+0xf6>
 80028ba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80028be:	f003 0301 	and.w	r3, r3, #1
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d005      	beq.n	80028d2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028ca:	f043 0204 	orr.w	r2, r3, #4
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80028d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80028d6:	f003 0308 	and.w	r3, r3, #8
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d011      	beq.n	8002902 <HAL_UART_IRQHandler+0x126>
 80028de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80028e2:	f003 0320 	and.w	r3, r3, #32
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d105      	bne.n	80028f6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80028ea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80028ee:	f003 0301 	and.w	r3, r3, #1
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d005      	beq.n	8002902 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028fa:	f043 0208 	orr.w	r2, r3, #8
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002906:	2b00      	cmp	r3, #0
 8002908:	f000 81f2 	beq.w	8002cf0 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800290c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002910:	f003 0320 	and.w	r3, r3, #32
 8002914:	2b00      	cmp	r3, #0
 8002916:	d008      	beq.n	800292a <HAL_UART_IRQHandler+0x14e>
 8002918:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800291c:	f003 0320 	and.w	r3, r3, #32
 8002920:	2b00      	cmp	r3, #0
 8002922:	d002      	beq.n	800292a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002924:	6878      	ldr	r0, [r7, #4]
 8002926:	f000 fd0e 	bl	8003346 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	695b      	ldr	r3, [r3, #20]
 8002930:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002934:	2b40      	cmp	r3, #64	@ 0x40
 8002936:	bf0c      	ite	eq
 8002938:	2301      	moveq	r3, #1
 800293a:	2300      	movne	r3, #0
 800293c:	b2db      	uxtb	r3, r3
 800293e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002946:	f003 0308 	and.w	r3, r3, #8
 800294a:	2b00      	cmp	r3, #0
 800294c:	d103      	bne.n	8002956 <HAL_UART_IRQHandler+0x17a>
 800294e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002952:	2b00      	cmp	r3, #0
 8002954:	d04f      	beq.n	80029f6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002956:	6878      	ldr	r0, [r7, #4]
 8002958:	f000 fc16 	bl	8003188 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	695b      	ldr	r3, [r3, #20]
 8002962:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002966:	2b40      	cmp	r3, #64	@ 0x40
 8002968:	d141      	bne.n	80029ee <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	3314      	adds	r3, #20
 8002970:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002974:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002978:	e853 3f00 	ldrex	r3, [r3]
 800297c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8002980:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002984:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002988:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	3314      	adds	r3, #20
 8002992:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8002996:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800299a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800299e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80029a2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80029a6:	e841 2300 	strex	r3, r2, [r1]
 80029aa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80029ae:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d1d9      	bne.n	800296a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d013      	beq.n	80029e6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80029c2:	4a7e      	ldr	r2, [pc, #504]	@ (8002bbc <HAL_UART_IRQHandler+0x3e0>)
 80029c4:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80029ca:	4618      	mov	r0, r3
 80029cc:	f7fe fd0e 	bl	80013ec <HAL_DMA_Abort_IT>
 80029d0:	4603      	mov	r3, r0
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d016      	beq.n	8002a04 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80029da:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80029dc:	687a      	ldr	r2, [r7, #4]
 80029de:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80029e0:	4610      	mov	r0, r2
 80029e2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80029e4:	e00e      	b.n	8002a04 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80029e6:	6878      	ldr	r0, [r7, #4]
 80029e8:	f000 f9a8 	bl	8002d3c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80029ec:	e00a      	b.n	8002a04 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80029ee:	6878      	ldr	r0, [r7, #4]
 80029f0:	f000 f9a4 	bl	8002d3c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80029f4:	e006      	b.n	8002a04 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80029f6:	6878      	ldr	r0, [r7, #4]
 80029f8:	f000 f9a0 	bl	8002d3c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	2200      	movs	r2, #0
 8002a00:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8002a02:	e175      	b.n	8002cf0 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a04:	bf00      	nop
    return;
 8002a06:	e173      	b.n	8002cf0 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a0c:	2b01      	cmp	r3, #1
 8002a0e:	f040 814f 	bne.w	8002cb0 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002a12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002a16:	f003 0310 	and.w	r3, r3, #16
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	f000 8148 	beq.w	8002cb0 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002a20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002a24:	f003 0310 	and.w	r3, r3, #16
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	f000 8141 	beq.w	8002cb0 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002a2e:	2300      	movs	r3, #0
 8002a30:	60bb      	str	r3, [r7, #8]
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	60bb      	str	r3, [r7, #8]
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	685b      	ldr	r3, [r3, #4]
 8002a40:	60bb      	str	r3, [r7, #8]
 8002a42:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	695b      	ldr	r3, [r3, #20]
 8002a4a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a4e:	2b40      	cmp	r3, #64	@ 0x40
 8002a50:	f040 80b6 	bne.w	8002bc0 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	685b      	ldr	r3, [r3, #4]
 8002a5c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002a60:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	f000 8145 	beq.w	8002cf4 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8002a6e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002a72:	429a      	cmp	r2, r3
 8002a74:	f080 813e 	bcs.w	8002cf4 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002a7e:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a84:	69db      	ldr	r3, [r3, #28]
 8002a86:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002a8a:	f000 8088 	beq.w	8002b9e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	330c      	adds	r3, #12
 8002a94:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a98:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002a9c:	e853 3f00 	ldrex	r3, [r3]
 8002aa0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8002aa4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002aa8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002aac:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	330c      	adds	r3, #12
 8002ab6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8002aba:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002abe:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ac2:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8002ac6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8002aca:	e841 2300 	strex	r3, r2, [r1]
 8002ace:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8002ad2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d1d9      	bne.n	8002a8e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	3314      	adds	r3, #20
 8002ae0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ae2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002ae4:	e853 3f00 	ldrex	r3, [r3]
 8002ae8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8002aea:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002aec:	f023 0301 	bic.w	r3, r3, #1
 8002af0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	3314      	adds	r3, #20
 8002afa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002afe:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8002b02:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b04:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8002b06:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8002b0a:	e841 2300 	strex	r3, r2, [r1]
 8002b0e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8002b10:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d1e1      	bne.n	8002ada <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	3314      	adds	r3, #20
 8002b1c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b1e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002b20:	e853 3f00 	ldrex	r3, [r3]
 8002b24:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8002b26:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002b28:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002b2c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	3314      	adds	r3, #20
 8002b36:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8002b3a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002b3c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b3e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8002b40:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8002b42:	e841 2300 	strex	r3, r2, [r1]
 8002b46:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8002b48:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d1e3      	bne.n	8002b16 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	2220      	movs	r2, #32
 8002b52:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	2200      	movs	r2, #0
 8002b5a:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	330c      	adds	r3, #12
 8002b62:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b64:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002b66:	e853 3f00 	ldrex	r3, [r3]
 8002b6a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8002b6c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002b6e:	f023 0310 	bic.w	r3, r3, #16
 8002b72:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	330c      	adds	r3, #12
 8002b7c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8002b80:	65ba      	str	r2, [r7, #88]	@ 0x58
 8002b82:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b84:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002b86:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002b88:	e841 2300 	strex	r3, r2, [r1]
 8002b8c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8002b8e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d1e3      	bne.n	8002b5c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b98:	4618      	mov	r0, r3
 8002b9a:	f7fe fbb7 	bl	800130c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	2202      	movs	r2, #2
 8002ba2:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002bac:	b29b      	uxth	r3, r3
 8002bae:	1ad3      	subs	r3, r2, r3
 8002bb0:	b29b      	uxth	r3, r3
 8002bb2:	4619      	mov	r1, r3
 8002bb4:	6878      	ldr	r0, [r7, #4]
 8002bb6:	f7fd fedd 	bl	8000974 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002bba:	e09b      	b.n	8002cf4 <HAL_UART_IRQHandler+0x518>
 8002bbc:	0800324f 	.word	0x0800324f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002bc8:	b29b      	uxth	r3, r3
 8002bca:	1ad3      	subs	r3, r2, r3
 8002bcc:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002bd4:	b29b      	uxth	r3, r3
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	f000 808e 	beq.w	8002cf8 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8002bdc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	f000 8089 	beq.w	8002cf8 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	330c      	adds	r3, #12
 8002bec:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002bee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002bf0:	e853 3f00 	ldrex	r3, [r3]
 8002bf4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8002bf6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002bf8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002bfc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	330c      	adds	r3, #12
 8002c06:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8002c0a:	647a      	str	r2, [r7, #68]	@ 0x44
 8002c0c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c0e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002c10:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002c12:	e841 2300 	strex	r3, r2, [r1]
 8002c16:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8002c18:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d1e3      	bne.n	8002be6 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	3314      	adds	r3, #20
 8002c24:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c28:	e853 3f00 	ldrex	r3, [r3]
 8002c2c:	623b      	str	r3, [r7, #32]
   return(result);
 8002c2e:	6a3b      	ldr	r3, [r7, #32]
 8002c30:	f023 0301 	bic.w	r3, r3, #1
 8002c34:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	3314      	adds	r3, #20
 8002c3e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8002c42:	633a      	str	r2, [r7, #48]	@ 0x30
 8002c44:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c46:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002c48:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002c4a:	e841 2300 	strex	r3, r2, [r1]
 8002c4e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8002c50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d1e3      	bne.n	8002c1e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	2220      	movs	r2, #32
 8002c5a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	2200      	movs	r2, #0
 8002c62:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	330c      	adds	r3, #12
 8002c6a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c6c:	693b      	ldr	r3, [r7, #16]
 8002c6e:	e853 3f00 	ldrex	r3, [r3]
 8002c72:	60fb      	str	r3, [r7, #12]
   return(result);
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	f023 0310 	bic.w	r3, r3, #16
 8002c7a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	330c      	adds	r3, #12
 8002c84:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8002c88:	61fa      	str	r2, [r7, #28]
 8002c8a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c8c:	69b9      	ldr	r1, [r7, #24]
 8002c8e:	69fa      	ldr	r2, [r7, #28]
 8002c90:	e841 2300 	strex	r3, r2, [r1]
 8002c94:	617b      	str	r3, [r7, #20]
   return(result);
 8002c96:	697b      	ldr	r3, [r7, #20]
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d1e3      	bne.n	8002c64 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	2202      	movs	r2, #2
 8002ca0:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002ca2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002ca6:	4619      	mov	r1, r3
 8002ca8:	6878      	ldr	r0, [r7, #4]
 8002caa:	f7fd fe63 	bl	8000974 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002cae:	e023      	b.n	8002cf8 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002cb0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002cb4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d009      	beq.n	8002cd0 <HAL_UART_IRQHandler+0x4f4>
 8002cbc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002cc0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d003      	beq.n	8002cd0 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8002cc8:	6878      	ldr	r0, [r7, #4]
 8002cca:	f000 fad4 	bl	8003276 <UART_Transmit_IT>
    return;
 8002cce:	e014      	b.n	8002cfa <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002cd0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002cd4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d00e      	beq.n	8002cfa <HAL_UART_IRQHandler+0x51e>
 8002cdc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002ce0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d008      	beq.n	8002cfa <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8002ce8:	6878      	ldr	r0, [r7, #4]
 8002cea:	f000 fb14 	bl	8003316 <UART_EndTransmit_IT>
    return;
 8002cee:	e004      	b.n	8002cfa <HAL_UART_IRQHandler+0x51e>
    return;
 8002cf0:	bf00      	nop
 8002cf2:	e002      	b.n	8002cfa <HAL_UART_IRQHandler+0x51e>
      return;
 8002cf4:	bf00      	nop
 8002cf6:	e000      	b.n	8002cfa <HAL_UART_IRQHandler+0x51e>
      return;
 8002cf8:	bf00      	nop
  }
}
 8002cfa:	37e8      	adds	r7, #232	@ 0xe8
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	bd80      	pop	{r7, pc}

08002d00 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8002d00:	b480      	push	{r7}
 8002d02:	b083      	sub	sp, #12
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8002d08:	bf00      	nop
 8002d0a:	370c      	adds	r7, #12
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d12:	4770      	bx	lr

08002d14 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002d14:	b480      	push	{r7}
 8002d16:	b083      	sub	sp, #12
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8002d1c:	bf00      	nop
 8002d1e:	370c      	adds	r7, #12
 8002d20:	46bd      	mov	sp, r7
 8002d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d26:	4770      	bx	lr

08002d28 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8002d28:	b480      	push	{r7}
 8002d2a:	b083      	sub	sp, #12
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8002d30:	bf00      	nop
 8002d32:	370c      	adds	r7, #12
 8002d34:	46bd      	mov	sp, r7
 8002d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3a:	4770      	bx	lr

08002d3c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002d3c:	b480      	push	{r7}
 8002d3e:	b083      	sub	sp, #12
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002d44:	bf00      	nop
 8002d46:	370c      	adds	r7, #12
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4e:	4770      	bx	lr

08002d50 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	b090      	sub	sp, #64	@ 0x40
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d137      	bne.n	8002ddc <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8002d6c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002d6e:	2200      	movs	r2, #0
 8002d70:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8002d72:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	3314      	adds	r3, #20
 8002d78:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d7c:	e853 3f00 	ldrex	r3, [r3]
 8002d80:	623b      	str	r3, [r7, #32]
   return(result);
 8002d82:	6a3b      	ldr	r3, [r7, #32]
 8002d84:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002d88:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002d8a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	3314      	adds	r3, #20
 8002d90:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002d92:	633a      	str	r2, [r7, #48]	@ 0x30
 8002d94:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d96:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002d98:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002d9a:	e841 2300 	strex	r3, r2, [r1]
 8002d9e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8002da0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d1e5      	bne.n	8002d72 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8002da6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	330c      	adds	r3, #12
 8002dac:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002dae:	693b      	ldr	r3, [r7, #16]
 8002db0:	e853 3f00 	ldrex	r3, [r3]
 8002db4:	60fb      	str	r3, [r7, #12]
   return(result);
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002dbc:	637b      	str	r3, [r7, #52]	@ 0x34
 8002dbe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	330c      	adds	r3, #12
 8002dc4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002dc6:	61fa      	str	r2, [r7, #28]
 8002dc8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002dca:	69b9      	ldr	r1, [r7, #24]
 8002dcc:	69fa      	ldr	r2, [r7, #28]
 8002dce:	e841 2300 	strex	r3, r2, [r1]
 8002dd2:	617b      	str	r3, [r7, #20]
   return(result);
 8002dd4:	697b      	ldr	r3, [r7, #20]
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d1e5      	bne.n	8002da6 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8002dda:	e002      	b.n	8002de2 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8002ddc:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8002dde:	f7fd fd1f 	bl	8000820 <HAL_UART_TxCpltCallback>
}
 8002de2:	bf00      	nop
 8002de4:	3740      	adds	r7, #64	@ 0x40
 8002de6:	46bd      	mov	sp, r7
 8002de8:	bd80      	pop	{r7, pc}

08002dea <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8002dea:	b580      	push	{r7, lr}
 8002dec:	b084      	sub	sp, #16
 8002dee:	af00      	add	r7, sp, #0
 8002df0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002df6:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8002df8:	68f8      	ldr	r0, [r7, #12]
 8002dfa:	f7ff ff81 	bl	8002d00 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002dfe:	bf00      	nop
 8002e00:	3710      	adds	r7, #16
 8002e02:	46bd      	mov	sp, r7
 8002e04:	bd80      	pop	{r7, pc}

08002e06 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8002e06:	b580      	push	{r7, lr}
 8002e08:	b09c      	sub	sp, #112	@ 0x70
 8002e0a:	af00      	add	r7, sp, #0
 8002e0c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e12:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d172      	bne.n	8002f08 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8002e22:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002e24:	2200      	movs	r2, #0
 8002e26:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002e28:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	330c      	adds	r3, #12
 8002e2e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e30:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002e32:	e853 3f00 	ldrex	r3, [r3]
 8002e36:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8002e38:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002e3a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002e3e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002e40:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	330c      	adds	r3, #12
 8002e46:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8002e48:	65ba      	str	r2, [r7, #88]	@ 0x58
 8002e4a:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e4c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002e4e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002e50:	e841 2300 	strex	r3, r2, [r1]
 8002e54:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8002e56:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d1e5      	bne.n	8002e28 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e5c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	3314      	adds	r3, #20
 8002e62:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e66:	e853 3f00 	ldrex	r3, [r3]
 8002e6a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8002e6c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e6e:	f023 0301 	bic.w	r3, r3, #1
 8002e72:	667b      	str	r3, [r7, #100]	@ 0x64
 8002e74:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	3314      	adds	r3, #20
 8002e7a:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8002e7c:	647a      	str	r2, [r7, #68]	@ 0x44
 8002e7e:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e80:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002e82:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002e84:	e841 2300 	strex	r3, r2, [r1]
 8002e88:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8002e8a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d1e5      	bne.n	8002e5c <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002e90:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	3314      	adds	r3, #20
 8002e96:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e9a:	e853 3f00 	ldrex	r3, [r3]
 8002e9e:	623b      	str	r3, [r7, #32]
   return(result);
 8002ea0:	6a3b      	ldr	r3, [r7, #32]
 8002ea2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002ea6:	663b      	str	r3, [r7, #96]	@ 0x60
 8002ea8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	3314      	adds	r3, #20
 8002eae:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8002eb0:	633a      	str	r2, [r7, #48]	@ 0x30
 8002eb2:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002eb4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002eb6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002eb8:	e841 2300 	strex	r3, r2, [r1]
 8002ebc:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8002ebe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d1e5      	bne.n	8002e90 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002ec4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002ec6:	2220      	movs	r2, #32
 8002ec8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002ecc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002ece:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ed0:	2b01      	cmp	r3, #1
 8002ed2:	d119      	bne.n	8002f08 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002ed4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	330c      	adds	r3, #12
 8002eda:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002edc:	693b      	ldr	r3, [r7, #16]
 8002ede:	e853 3f00 	ldrex	r3, [r3]
 8002ee2:	60fb      	str	r3, [r7, #12]
   return(result);
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	f023 0310 	bic.w	r3, r3, #16
 8002eea:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002eec:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	330c      	adds	r3, #12
 8002ef2:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8002ef4:	61fa      	str	r2, [r7, #28]
 8002ef6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ef8:	69b9      	ldr	r1, [r7, #24]
 8002efa:	69fa      	ldr	r2, [r7, #28]
 8002efc:	e841 2300 	strex	r3, r2, [r1]
 8002f00:	617b      	str	r3, [r7, #20]
   return(result);
 8002f02:	697b      	ldr	r3, [r7, #20]
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d1e5      	bne.n	8002ed4 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002f08:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002f0e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002f10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f12:	2b01      	cmp	r3, #1
 8002f14:	d106      	bne.n	8002f24 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002f16:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002f18:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8002f1a:	4619      	mov	r1, r3
 8002f1c:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8002f1e:	f7fd fd29 	bl	8000974 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8002f22:	e002      	b.n	8002f2a <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8002f24:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8002f26:	f7ff fef5 	bl	8002d14 <HAL_UART_RxCpltCallback>
}
 8002f2a:	bf00      	nop
 8002f2c:	3770      	adds	r7, #112	@ 0x70
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	bd80      	pop	{r7, pc}

08002f32 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8002f32:	b580      	push	{r7, lr}
 8002f34:	b084      	sub	sp, #16
 8002f36:	af00      	add	r7, sp, #0
 8002f38:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f3e:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	2201      	movs	r2, #1
 8002f44:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f4a:	2b01      	cmp	r3, #1
 8002f4c:	d108      	bne.n	8002f60 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8002f52:	085b      	lsrs	r3, r3, #1
 8002f54:	b29b      	uxth	r3, r3
 8002f56:	4619      	mov	r1, r3
 8002f58:	68f8      	ldr	r0, [r7, #12]
 8002f5a:	f7fd fd0b 	bl	8000974 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8002f5e:	e002      	b.n	8002f66 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8002f60:	68f8      	ldr	r0, [r7, #12]
 8002f62:	f7ff fee1 	bl	8002d28 <HAL_UART_RxHalfCpltCallback>
}
 8002f66:	bf00      	nop
 8002f68:	3710      	adds	r7, #16
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	bd80      	pop	{r7, pc}

08002f6e <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8002f6e:	b580      	push	{r7, lr}
 8002f70:	b084      	sub	sp, #16
 8002f72:	af00      	add	r7, sp, #0
 8002f74:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8002f76:	2300      	movs	r3, #0
 8002f78:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f7e:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8002f80:	68bb      	ldr	r3, [r7, #8]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	695b      	ldr	r3, [r3, #20]
 8002f86:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f8a:	2b80      	cmp	r3, #128	@ 0x80
 8002f8c:	bf0c      	ite	eq
 8002f8e:	2301      	moveq	r3, #1
 8002f90:	2300      	movne	r3, #0
 8002f92:	b2db      	uxtb	r3, r3
 8002f94:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8002f96:	68bb      	ldr	r3, [r7, #8]
 8002f98:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002f9c:	b2db      	uxtb	r3, r3
 8002f9e:	2b21      	cmp	r3, #33	@ 0x21
 8002fa0:	d108      	bne.n	8002fb4 <UART_DMAError+0x46>
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d005      	beq.n	8002fb4 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8002fa8:	68bb      	ldr	r3, [r7, #8]
 8002faa:	2200      	movs	r2, #0
 8002fac:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 8002fae:	68b8      	ldr	r0, [r7, #8]
 8002fb0:	f000 f8c2 	bl	8003138 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002fb4:	68bb      	ldr	r3, [r7, #8]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	695b      	ldr	r3, [r3, #20]
 8002fba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002fbe:	2b40      	cmp	r3, #64	@ 0x40
 8002fc0:	bf0c      	ite	eq
 8002fc2:	2301      	moveq	r3, #1
 8002fc4:	2300      	movne	r3, #0
 8002fc6:	b2db      	uxtb	r3, r3
 8002fc8:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8002fca:	68bb      	ldr	r3, [r7, #8]
 8002fcc:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002fd0:	b2db      	uxtb	r3, r3
 8002fd2:	2b22      	cmp	r3, #34	@ 0x22
 8002fd4:	d108      	bne.n	8002fe8 <UART_DMAError+0x7a>
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d005      	beq.n	8002fe8 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8002fdc:	68bb      	ldr	r3, [r7, #8]
 8002fde:	2200      	movs	r2, #0
 8002fe0:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8002fe2:	68b8      	ldr	r0, [r7, #8]
 8002fe4:	f000 f8d0 	bl	8003188 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8002fe8:	68bb      	ldr	r3, [r7, #8]
 8002fea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002fec:	f043 0210 	orr.w	r2, r3, #16
 8002ff0:	68bb      	ldr	r3, [r7, #8]
 8002ff2:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002ff4:	68b8      	ldr	r0, [r7, #8]
 8002ff6:	f7ff fea1 	bl	8002d3c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002ffa:	bf00      	nop
 8002ffc:	3710      	adds	r7, #16
 8002ffe:	46bd      	mov	sp, r7
 8003000:	bd80      	pop	{r7, pc}
	...

08003004 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003004:	b580      	push	{r7, lr}
 8003006:	b098      	sub	sp, #96	@ 0x60
 8003008:	af00      	add	r7, sp, #0
 800300a:	60f8      	str	r0, [r7, #12]
 800300c:	60b9      	str	r1, [r7, #8]
 800300e:	4613      	mov	r3, r2
 8003010:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8003012:	68ba      	ldr	r2, [r7, #8]
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	88fa      	ldrh	r2, [r7, #6]
 800301c:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	2200      	movs	r2, #0
 8003022:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	2222      	movs	r2, #34	@ 0x22
 8003028:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003030:	4a3e      	ldr	r2, [pc, #248]	@ (800312c <UART_Start_Receive_DMA+0x128>)
 8003032:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003038:	4a3d      	ldr	r2, [pc, #244]	@ (8003130 <UART_Start_Receive_DMA+0x12c>)
 800303a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003040:	4a3c      	ldr	r2, [pc, #240]	@ (8003134 <UART_Start_Receive_DMA+0x130>)
 8003042:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003048:	2200      	movs	r2, #0
 800304a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800304c:	f107 0308 	add.w	r3, r7, #8
 8003050:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	3304      	adds	r3, #4
 800305c:	4619      	mov	r1, r3
 800305e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003060:	681a      	ldr	r2, [r3, #0]
 8003062:	88fb      	ldrh	r3, [r7, #6]
 8003064:	f7fe f8fa 	bl	800125c <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8003068:	2300      	movs	r3, #0
 800306a:	613b      	str	r3, [r7, #16]
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	613b      	str	r3, [r7, #16]
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	685b      	ldr	r3, [r3, #4]
 800307a:	613b      	str	r3, [r7, #16]
 800307c:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	691b      	ldr	r3, [r3, #16]
 8003082:	2b00      	cmp	r3, #0
 8003084:	d019      	beq.n	80030ba <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	330c      	adds	r3, #12
 800308c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800308e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003090:	e853 3f00 	ldrex	r3, [r3]
 8003094:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003096:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003098:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800309c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	330c      	adds	r3, #12
 80030a4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80030a6:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80030a8:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030aa:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 80030ac:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80030ae:	e841 2300 	strex	r3, r2, [r1]
 80030b2:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80030b4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d1e5      	bne.n	8003086 <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	3314      	adds	r3, #20
 80030c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80030c4:	e853 3f00 	ldrex	r3, [r3]
 80030c8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80030ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80030cc:	f043 0301 	orr.w	r3, r3, #1
 80030d0:	657b      	str	r3, [r7, #84]	@ 0x54
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	3314      	adds	r3, #20
 80030d8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80030da:	63ba      	str	r2, [r7, #56]	@ 0x38
 80030dc:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030de:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80030e0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80030e2:	e841 2300 	strex	r3, r2, [r1]
 80030e6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80030e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d1e5      	bne.n	80030ba <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	3314      	adds	r3, #20
 80030f4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030f6:	69bb      	ldr	r3, [r7, #24]
 80030f8:	e853 3f00 	ldrex	r3, [r3]
 80030fc:	617b      	str	r3, [r7, #20]
   return(result);
 80030fe:	697b      	ldr	r3, [r7, #20]
 8003100:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003104:	653b      	str	r3, [r7, #80]	@ 0x50
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	3314      	adds	r3, #20
 800310c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800310e:	627a      	str	r2, [r7, #36]	@ 0x24
 8003110:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003112:	6a39      	ldr	r1, [r7, #32]
 8003114:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003116:	e841 2300 	strex	r3, r2, [r1]
 800311a:	61fb      	str	r3, [r7, #28]
   return(result);
 800311c:	69fb      	ldr	r3, [r7, #28]
 800311e:	2b00      	cmp	r3, #0
 8003120:	d1e5      	bne.n	80030ee <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8003122:	2300      	movs	r3, #0
}
 8003124:	4618      	mov	r0, r3
 8003126:	3760      	adds	r7, #96	@ 0x60
 8003128:	46bd      	mov	sp, r7
 800312a:	bd80      	pop	{r7, pc}
 800312c:	08002e07 	.word	0x08002e07
 8003130:	08002f33 	.word	0x08002f33
 8003134:	08002f6f 	.word	0x08002f6f

08003138 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8003138:	b480      	push	{r7}
 800313a:	b089      	sub	sp, #36	@ 0x24
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	330c      	adds	r3, #12
 8003146:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	e853 3f00 	ldrex	r3, [r3]
 800314e:	60bb      	str	r3, [r7, #8]
   return(result);
 8003150:	68bb      	ldr	r3, [r7, #8]
 8003152:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8003156:	61fb      	str	r3, [r7, #28]
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	330c      	adds	r3, #12
 800315e:	69fa      	ldr	r2, [r7, #28]
 8003160:	61ba      	str	r2, [r7, #24]
 8003162:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003164:	6979      	ldr	r1, [r7, #20]
 8003166:	69ba      	ldr	r2, [r7, #24]
 8003168:	e841 2300 	strex	r3, r2, [r1]
 800316c:	613b      	str	r3, [r7, #16]
   return(result);
 800316e:	693b      	ldr	r3, [r7, #16]
 8003170:	2b00      	cmp	r3, #0
 8003172:	d1e5      	bne.n	8003140 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	2220      	movs	r2, #32
 8003178:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 800317c:	bf00      	nop
 800317e:	3724      	adds	r7, #36	@ 0x24
 8003180:	46bd      	mov	sp, r7
 8003182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003186:	4770      	bx	lr

08003188 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003188:	b480      	push	{r7}
 800318a:	b095      	sub	sp, #84	@ 0x54
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	330c      	adds	r3, #12
 8003196:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003198:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800319a:	e853 3f00 	ldrex	r3, [r3]
 800319e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80031a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80031a2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80031a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	330c      	adds	r3, #12
 80031ae:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80031b0:	643a      	str	r2, [r7, #64]	@ 0x40
 80031b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031b4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80031b6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80031b8:	e841 2300 	strex	r3, r2, [r1]
 80031bc:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80031be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d1e5      	bne.n	8003190 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	3314      	adds	r3, #20
 80031ca:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031cc:	6a3b      	ldr	r3, [r7, #32]
 80031ce:	e853 3f00 	ldrex	r3, [r3]
 80031d2:	61fb      	str	r3, [r7, #28]
   return(result);
 80031d4:	69fb      	ldr	r3, [r7, #28]
 80031d6:	f023 0301 	bic.w	r3, r3, #1
 80031da:	64bb      	str	r3, [r7, #72]	@ 0x48
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	3314      	adds	r3, #20
 80031e2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80031e4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80031e6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031e8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80031ea:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80031ec:	e841 2300 	strex	r3, r2, [r1]
 80031f0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80031f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d1e5      	bne.n	80031c4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031fc:	2b01      	cmp	r3, #1
 80031fe:	d119      	bne.n	8003234 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	330c      	adds	r3, #12
 8003206:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	e853 3f00 	ldrex	r3, [r3]
 800320e:	60bb      	str	r3, [r7, #8]
   return(result);
 8003210:	68bb      	ldr	r3, [r7, #8]
 8003212:	f023 0310 	bic.w	r3, r3, #16
 8003216:	647b      	str	r3, [r7, #68]	@ 0x44
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	330c      	adds	r3, #12
 800321e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003220:	61ba      	str	r2, [r7, #24]
 8003222:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003224:	6979      	ldr	r1, [r7, #20]
 8003226:	69ba      	ldr	r2, [r7, #24]
 8003228:	e841 2300 	strex	r3, r2, [r1]
 800322c:	613b      	str	r3, [r7, #16]
   return(result);
 800322e:	693b      	ldr	r3, [r7, #16]
 8003230:	2b00      	cmp	r3, #0
 8003232:	d1e5      	bne.n	8003200 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	2220      	movs	r2, #32
 8003238:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	2200      	movs	r2, #0
 8003240:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003242:	bf00      	nop
 8003244:	3754      	adds	r7, #84	@ 0x54
 8003246:	46bd      	mov	sp, r7
 8003248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324c:	4770      	bx	lr

0800324e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800324e:	b580      	push	{r7, lr}
 8003250:	b084      	sub	sp, #16
 8003252:	af00      	add	r7, sp, #0
 8003254:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800325a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	2200      	movs	r2, #0
 8003260:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	2200      	movs	r2, #0
 8003266:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003268:	68f8      	ldr	r0, [r7, #12]
 800326a:	f7ff fd67 	bl	8002d3c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800326e:	bf00      	nop
 8003270:	3710      	adds	r7, #16
 8003272:	46bd      	mov	sp, r7
 8003274:	bd80      	pop	{r7, pc}

08003276 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003276:	b480      	push	{r7}
 8003278:	b085      	sub	sp, #20
 800327a:	af00      	add	r7, sp, #0
 800327c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003284:	b2db      	uxtb	r3, r3
 8003286:	2b21      	cmp	r3, #33	@ 0x21
 8003288:	d13e      	bne.n	8003308 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	689b      	ldr	r3, [r3, #8]
 800328e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003292:	d114      	bne.n	80032be <UART_Transmit_IT+0x48>
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	691b      	ldr	r3, [r3, #16]
 8003298:	2b00      	cmp	r3, #0
 800329a:	d110      	bne.n	80032be <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	6a1b      	ldr	r3, [r3, #32]
 80032a0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	881b      	ldrh	r3, [r3, #0]
 80032a6:	461a      	mov	r2, r3
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80032b0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	6a1b      	ldr	r3, [r3, #32]
 80032b6:	1c9a      	adds	r2, r3, #2
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	621a      	str	r2, [r3, #32]
 80032bc:	e008      	b.n	80032d0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	6a1b      	ldr	r3, [r3, #32]
 80032c2:	1c59      	adds	r1, r3, #1
 80032c4:	687a      	ldr	r2, [r7, #4]
 80032c6:	6211      	str	r1, [r2, #32]
 80032c8:	781a      	ldrb	r2, [r3, #0]
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80032d4:	b29b      	uxth	r3, r3
 80032d6:	3b01      	subs	r3, #1
 80032d8:	b29b      	uxth	r3, r3
 80032da:	687a      	ldr	r2, [r7, #4]
 80032dc:	4619      	mov	r1, r3
 80032de:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d10f      	bne.n	8003304 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	68da      	ldr	r2, [r3, #12]
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80032f2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	68da      	ldr	r2, [r3, #12]
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003302:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003304:	2300      	movs	r3, #0
 8003306:	e000      	b.n	800330a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003308:	2302      	movs	r3, #2
  }
}
 800330a:	4618      	mov	r0, r3
 800330c:	3714      	adds	r7, #20
 800330e:	46bd      	mov	sp, r7
 8003310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003314:	4770      	bx	lr

08003316 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003316:	b580      	push	{r7, lr}
 8003318:	b082      	sub	sp, #8
 800331a:	af00      	add	r7, sp, #0
 800331c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	68da      	ldr	r2, [r3, #12]
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800332c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	2220      	movs	r2, #32
 8003332:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003336:	6878      	ldr	r0, [r7, #4]
 8003338:	f7fd fa72 	bl	8000820 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800333c:	2300      	movs	r3, #0
}
 800333e:	4618      	mov	r0, r3
 8003340:	3708      	adds	r7, #8
 8003342:	46bd      	mov	sp, r7
 8003344:	bd80      	pop	{r7, pc}

08003346 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003346:	b580      	push	{r7, lr}
 8003348:	b08c      	sub	sp, #48	@ 0x30
 800334a:	af00      	add	r7, sp, #0
 800334c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003354:	b2db      	uxtb	r3, r3
 8003356:	2b22      	cmp	r3, #34	@ 0x22
 8003358:	f040 80ae 	bne.w	80034b8 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	689b      	ldr	r3, [r3, #8]
 8003360:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003364:	d117      	bne.n	8003396 <UART_Receive_IT+0x50>
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	691b      	ldr	r3, [r3, #16]
 800336a:	2b00      	cmp	r3, #0
 800336c:	d113      	bne.n	8003396 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800336e:	2300      	movs	r3, #0
 8003370:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003376:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	685b      	ldr	r3, [r3, #4]
 800337e:	b29b      	uxth	r3, r3
 8003380:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003384:	b29a      	uxth	r2, r3
 8003386:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003388:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800338e:	1c9a      	adds	r2, r3, #2
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	629a      	str	r2, [r3, #40]	@ 0x28
 8003394:	e026      	b.n	80033e4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800339a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800339c:	2300      	movs	r3, #0
 800339e:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	689b      	ldr	r3, [r3, #8]
 80033a4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80033a8:	d007      	beq.n	80033ba <UART_Receive_IT+0x74>
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	689b      	ldr	r3, [r3, #8]
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d10a      	bne.n	80033c8 <UART_Receive_IT+0x82>
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	691b      	ldr	r3, [r3, #16]
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d106      	bne.n	80033c8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	685b      	ldr	r3, [r3, #4]
 80033c0:	b2da      	uxtb	r2, r3
 80033c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80033c4:	701a      	strb	r2, [r3, #0]
 80033c6:	e008      	b.n	80033da <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	685b      	ldr	r3, [r3, #4]
 80033ce:	b2db      	uxtb	r3, r3
 80033d0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80033d4:	b2da      	uxtb	r2, r3
 80033d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80033d8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033de:	1c5a      	adds	r2, r3, #1
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80033e8:	b29b      	uxth	r3, r3
 80033ea:	3b01      	subs	r3, #1
 80033ec:	b29b      	uxth	r3, r3
 80033ee:	687a      	ldr	r2, [r7, #4]
 80033f0:	4619      	mov	r1, r3
 80033f2:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d15d      	bne.n	80034b4 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	68da      	ldr	r2, [r3, #12]
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f022 0220 	bic.w	r2, r2, #32
 8003406:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	68da      	ldr	r2, [r3, #12]
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003416:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	695a      	ldr	r2, [r3, #20]
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f022 0201 	bic.w	r2, r2, #1
 8003426:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	2220      	movs	r2, #32
 800342c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	2200      	movs	r2, #0
 8003434:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800343a:	2b01      	cmp	r3, #1
 800343c:	d135      	bne.n	80034aa <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	2200      	movs	r2, #0
 8003442:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	330c      	adds	r3, #12
 800344a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800344c:	697b      	ldr	r3, [r7, #20]
 800344e:	e853 3f00 	ldrex	r3, [r3]
 8003452:	613b      	str	r3, [r7, #16]
   return(result);
 8003454:	693b      	ldr	r3, [r7, #16]
 8003456:	f023 0310 	bic.w	r3, r3, #16
 800345a:	627b      	str	r3, [r7, #36]	@ 0x24
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	330c      	adds	r3, #12
 8003462:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003464:	623a      	str	r2, [r7, #32]
 8003466:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003468:	69f9      	ldr	r1, [r7, #28]
 800346a:	6a3a      	ldr	r2, [r7, #32]
 800346c:	e841 2300 	strex	r3, r2, [r1]
 8003470:	61bb      	str	r3, [r7, #24]
   return(result);
 8003472:	69bb      	ldr	r3, [r7, #24]
 8003474:	2b00      	cmp	r3, #0
 8003476:	d1e5      	bne.n	8003444 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f003 0310 	and.w	r3, r3, #16
 8003482:	2b10      	cmp	r3, #16
 8003484:	d10a      	bne.n	800349c <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003486:	2300      	movs	r3, #0
 8003488:	60fb      	str	r3, [r7, #12]
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	60fb      	str	r3, [r7, #12]
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	685b      	ldr	r3, [r3, #4]
 8003498:	60fb      	str	r3, [r7, #12]
 800349a:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80034a0:	4619      	mov	r1, r3
 80034a2:	6878      	ldr	r0, [r7, #4]
 80034a4:	f7fd fa66 	bl	8000974 <HAL_UARTEx_RxEventCallback>
 80034a8:	e002      	b.n	80034b0 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80034aa:	6878      	ldr	r0, [r7, #4]
 80034ac:	f7ff fc32 	bl	8002d14 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80034b0:	2300      	movs	r3, #0
 80034b2:	e002      	b.n	80034ba <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80034b4:	2300      	movs	r3, #0
 80034b6:	e000      	b.n	80034ba <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80034b8:	2302      	movs	r3, #2
  }
}
 80034ba:	4618      	mov	r0, r3
 80034bc:	3730      	adds	r7, #48	@ 0x30
 80034be:	46bd      	mov	sp, r7
 80034c0:	bd80      	pop	{r7, pc}
	...

080034c4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80034c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80034c8:	b0c0      	sub	sp, #256	@ 0x100
 80034ca:	af00      	add	r7, sp, #0
 80034cc:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80034d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	691b      	ldr	r3, [r3, #16]
 80034d8:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80034dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80034e0:	68d9      	ldr	r1, [r3, #12]
 80034e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80034e6:	681a      	ldr	r2, [r3, #0]
 80034e8:	ea40 0301 	orr.w	r3, r0, r1
 80034ec:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80034ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80034f2:	689a      	ldr	r2, [r3, #8]
 80034f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80034f8:	691b      	ldr	r3, [r3, #16]
 80034fa:	431a      	orrs	r2, r3
 80034fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003500:	695b      	ldr	r3, [r3, #20]
 8003502:	431a      	orrs	r2, r3
 8003504:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003508:	69db      	ldr	r3, [r3, #28]
 800350a:	4313      	orrs	r3, r2
 800350c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003510:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	68db      	ldr	r3, [r3, #12]
 8003518:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800351c:	f021 010c 	bic.w	r1, r1, #12
 8003520:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003524:	681a      	ldr	r2, [r3, #0]
 8003526:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800352a:	430b      	orrs	r3, r1
 800352c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800352e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	695b      	ldr	r3, [r3, #20]
 8003536:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800353a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800353e:	6999      	ldr	r1, [r3, #24]
 8003540:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003544:	681a      	ldr	r2, [r3, #0]
 8003546:	ea40 0301 	orr.w	r3, r0, r1
 800354a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800354c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003550:	681a      	ldr	r2, [r3, #0]
 8003552:	4b8f      	ldr	r3, [pc, #572]	@ (8003790 <UART_SetConfig+0x2cc>)
 8003554:	429a      	cmp	r2, r3
 8003556:	d005      	beq.n	8003564 <UART_SetConfig+0xa0>
 8003558:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800355c:	681a      	ldr	r2, [r3, #0]
 800355e:	4b8d      	ldr	r3, [pc, #564]	@ (8003794 <UART_SetConfig+0x2d0>)
 8003560:	429a      	cmp	r2, r3
 8003562:	d104      	bne.n	800356e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003564:	f7ff f808 	bl	8002578 <HAL_RCC_GetPCLK2Freq>
 8003568:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800356c:	e003      	b.n	8003576 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800356e:	f7fe ffef 	bl	8002550 <HAL_RCC_GetPCLK1Freq>
 8003572:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003576:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800357a:	69db      	ldr	r3, [r3, #28]
 800357c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003580:	f040 810c 	bne.w	800379c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003584:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003588:	2200      	movs	r2, #0
 800358a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800358e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8003592:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8003596:	4622      	mov	r2, r4
 8003598:	462b      	mov	r3, r5
 800359a:	1891      	adds	r1, r2, r2
 800359c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800359e:	415b      	adcs	r3, r3
 80035a0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80035a2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80035a6:	4621      	mov	r1, r4
 80035a8:	eb12 0801 	adds.w	r8, r2, r1
 80035ac:	4629      	mov	r1, r5
 80035ae:	eb43 0901 	adc.w	r9, r3, r1
 80035b2:	f04f 0200 	mov.w	r2, #0
 80035b6:	f04f 0300 	mov.w	r3, #0
 80035ba:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80035be:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80035c2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80035c6:	4690      	mov	r8, r2
 80035c8:	4699      	mov	r9, r3
 80035ca:	4623      	mov	r3, r4
 80035cc:	eb18 0303 	adds.w	r3, r8, r3
 80035d0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80035d4:	462b      	mov	r3, r5
 80035d6:	eb49 0303 	adc.w	r3, r9, r3
 80035da:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80035de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80035e2:	685b      	ldr	r3, [r3, #4]
 80035e4:	2200      	movs	r2, #0
 80035e6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80035ea:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80035ee:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80035f2:	460b      	mov	r3, r1
 80035f4:	18db      	adds	r3, r3, r3
 80035f6:	653b      	str	r3, [r7, #80]	@ 0x50
 80035f8:	4613      	mov	r3, r2
 80035fa:	eb42 0303 	adc.w	r3, r2, r3
 80035fe:	657b      	str	r3, [r7, #84]	@ 0x54
 8003600:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003604:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003608:	f7fc fe3a 	bl	8000280 <__aeabi_uldivmod>
 800360c:	4602      	mov	r2, r0
 800360e:	460b      	mov	r3, r1
 8003610:	4b61      	ldr	r3, [pc, #388]	@ (8003798 <UART_SetConfig+0x2d4>)
 8003612:	fba3 2302 	umull	r2, r3, r3, r2
 8003616:	095b      	lsrs	r3, r3, #5
 8003618:	011c      	lsls	r4, r3, #4
 800361a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800361e:	2200      	movs	r2, #0
 8003620:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003624:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003628:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800362c:	4642      	mov	r2, r8
 800362e:	464b      	mov	r3, r9
 8003630:	1891      	adds	r1, r2, r2
 8003632:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003634:	415b      	adcs	r3, r3
 8003636:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003638:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800363c:	4641      	mov	r1, r8
 800363e:	eb12 0a01 	adds.w	sl, r2, r1
 8003642:	4649      	mov	r1, r9
 8003644:	eb43 0b01 	adc.w	fp, r3, r1
 8003648:	f04f 0200 	mov.w	r2, #0
 800364c:	f04f 0300 	mov.w	r3, #0
 8003650:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003654:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003658:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800365c:	4692      	mov	sl, r2
 800365e:	469b      	mov	fp, r3
 8003660:	4643      	mov	r3, r8
 8003662:	eb1a 0303 	adds.w	r3, sl, r3
 8003666:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800366a:	464b      	mov	r3, r9
 800366c:	eb4b 0303 	adc.w	r3, fp, r3
 8003670:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003674:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003678:	685b      	ldr	r3, [r3, #4]
 800367a:	2200      	movs	r2, #0
 800367c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003680:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003684:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003688:	460b      	mov	r3, r1
 800368a:	18db      	adds	r3, r3, r3
 800368c:	643b      	str	r3, [r7, #64]	@ 0x40
 800368e:	4613      	mov	r3, r2
 8003690:	eb42 0303 	adc.w	r3, r2, r3
 8003694:	647b      	str	r3, [r7, #68]	@ 0x44
 8003696:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800369a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800369e:	f7fc fdef 	bl	8000280 <__aeabi_uldivmod>
 80036a2:	4602      	mov	r2, r0
 80036a4:	460b      	mov	r3, r1
 80036a6:	4611      	mov	r1, r2
 80036a8:	4b3b      	ldr	r3, [pc, #236]	@ (8003798 <UART_SetConfig+0x2d4>)
 80036aa:	fba3 2301 	umull	r2, r3, r3, r1
 80036ae:	095b      	lsrs	r3, r3, #5
 80036b0:	2264      	movs	r2, #100	@ 0x64
 80036b2:	fb02 f303 	mul.w	r3, r2, r3
 80036b6:	1acb      	subs	r3, r1, r3
 80036b8:	00db      	lsls	r3, r3, #3
 80036ba:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80036be:	4b36      	ldr	r3, [pc, #216]	@ (8003798 <UART_SetConfig+0x2d4>)
 80036c0:	fba3 2302 	umull	r2, r3, r3, r2
 80036c4:	095b      	lsrs	r3, r3, #5
 80036c6:	005b      	lsls	r3, r3, #1
 80036c8:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80036cc:	441c      	add	r4, r3
 80036ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80036d2:	2200      	movs	r2, #0
 80036d4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80036d8:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80036dc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80036e0:	4642      	mov	r2, r8
 80036e2:	464b      	mov	r3, r9
 80036e4:	1891      	adds	r1, r2, r2
 80036e6:	63b9      	str	r1, [r7, #56]	@ 0x38
 80036e8:	415b      	adcs	r3, r3
 80036ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80036ec:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80036f0:	4641      	mov	r1, r8
 80036f2:	1851      	adds	r1, r2, r1
 80036f4:	6339      	str	r1, [r7, #48]	@ 0x30
 80036f6:	4649      	mov	r1, r9
 80036f8:	414b      	adcs	r3, r1
 80036fa:	637b      	str	r3, [r7, #52]	@ 0x34
 80036fc:	f04f 0200 	mov.w	r2, #0
 8003700:	f04f 0300 	mov.w	r3, #0
 8003704:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003708:	4659      	mov	r1, fp
 800370a:	00cb      	lsls	r3, r1, #3
 800370c:	4651      	mov	r1, sl
 800370e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003712:	4651      	mov	r1, sl
 8003714:	00ca      	lsls	r2, r1, #3
 8003716:	4610      	mov	r0, r2
 8003718:	4619      	mov	r1, r3
 800371a:	4603      	mov	r3, r0
 800371c:	4642      	mov	r2, r8
 800371e:	189b      	adds	r3, r3, r2
 8003720:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003724:	464b      	mov	r3, r9
 8003726:	460a      	mov	r2, r1
 8003728:	eb42 0303 	adc.w	r3, r2, r3
 800372c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003730:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003734:	685b      	ldr	r3, [r3, #4]
 8003736:	2200      	movs	r2, #0
 8003738:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800373c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003740:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003744:	460b      	mov	r3, r1
 8003746:	18db      	adds	r3, r3, r3
 8003748:	62bb      	str	r3, [r7, #40]	@ 0x28
 800374a:	4613      	mov	r3, r2
 800374c:	eb42 0303 	adc.w	r3, r2, r3
 8003750:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003752:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003756:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800375a:	f7fc fd91 	bl	8000280 <__aeabi_uldivmod>
 800375e:	4602      	mov	r2, r0
 8003760:	460b      	mov	r3, r1
 8003762:	4b0d      	ldr	r3, [pc, #52]	@ (8003798 <UART_SetConfig+0x2d4>)
 8003764:	fba3 1302 	umull	r1, r3, r3, r2
 8003768:	095b      	lsrs	r3, r3, #5
 800376a:	2164      	movs	r1, #100	@ 0x64
 800376c:	fb01 f303 	mul.w	r3, r1, r3
 8003770:	1ad3      	subs	r3, r2, r3
 8003772:	00db      	lsls	r3, r3, #3
 8003774:	3332      	adds	r3, #50	@ 0x32
 8003776:	4a08      	ldr	r2, [pc, #32]	@ (8003798 <UART_SetConfig+0x2d4>)
 8003778:	fba2 2303 	umull	r2, r3, r2, r3
 800377c:	095b      	lsrs	r3, r3, #5
 800377e:	f003 0207 	and.w	r2, r3, #7
 8003782:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	4422      	add	r2, r4
 800378a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800378c:	e106      	b.n	800399c <UART_SetConfig+0x4d8>
 800378e:	bf00      	nop
 8003790:	40011000 	.word	0x40011000
 8003794:	40011400 	.word	0x40011400
 8003798:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800379c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80037a0:	2200      	movs	r2, #0
 80037a2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80037a6:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80037aa:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80037ae:	4642      	mov	r2, r8
 80037b0:	464b      	mov	r3, r9
 80037b2:	1891      	adds	r1, r2, r2
 80037b4:	6239      	str	r1, [r7, #32]
 80037b6:	415b      	adcs	r3, r3
 80037b8:	627b      	str	r3, [r7, #36]	@ 0x24
 80037ba:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80037be:	4641      	mov	r1, r8
 80037c0:	1854      	adds	r4, r2, r1
 80037c2:	4649      	mov	r1, r9
 80037c4:	eb43 0501 	adc.w	r5, r3, r1
 80037c8:	f04f 0200 	mov.w	r2, #0
 80037cc:	f04f 0300 	mov.w	r3, #0
 80037d0:	00eb      	lsls	r3, r5, #3
 80037d2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80037d6:	00e2      	lsls	r2, r4, #3
 80037d8:	4614      	mov	r4, r2
 80037da:	461d      	mov	r5, r3
 80037dc:	4643      	mov	r3, r8
 80037de:	18e3      	adds	r3, r4, r3
 80037e0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80037e4:	464b      	mov	r3, r9
 80037e6:	eb45 0303 	adc.w	r3, r5, r3
 80037ea:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80037ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80037f2:	685b      	ldr	r3, [r3, #4]
 80037f4:	2200      	movs	r2, #0
 80037f6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80037fa:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80037fe:	f04f 0200 	mov.w	r2, #0
 8003802:	f04f 0300 	mov.w	r3, #0
 8003806:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800380a:	4629      	mov	r1, r5
 800380c:	008b      	lsls	r3, r1, #2
 800380e:	4621      	mov	r1, r4
 8003810:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003814:	4621      	mov	r1, r4
 8003816:	008a      	lsls	r2, r1, #2
 8003818:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800381c:	f7fc fd30 	bl	8000280 <__aeabi_uldivmod>
 8003820:	4602      	mov	r2, r0
 8003822:	460b      	mov	r3, r1
 8003824:	4b60      	ldr	r3, [pc, #384]	@ (80039a8 <UART_SetConfig+0x4e4>)
 8003826:	fba3 2302 	umull	r2, r3, r3, r2
 800382a:	095b      	lsrs	r3, r3, #5
 800382c:	011c      	lsls	r4, r3, #4
 800382e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003832:	2200      	movs	r2, #0
 8003834:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003838:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800383c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003840:	4642      	mov	r2, r8
 8003842:	464b      	mov	r3, r9
 8003844:	1891      	adds	r1, r2, r2
 8003846:	61b9      	str	r1, [r7, #24]
 8003848:	415b      	adcs	r3, r3
 800384a:	61fb      	str	r3, [r7, #28]
 800384c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003850:	4641      	mov	r1, r8
 8003852:	1851      	adds	r1, r2, r1
 8003854:	6139      	str	r1, [r7, #16]
 8003856:	4649      	mov	r1, r9
 8003858:	414b      	adcs	r3, r1
 800385a:	617b      	str	r3, [r7, #20]
 800385c:	f04f 0200 	mov.w	r2, #0
 8003860:	f04f 0300 	mov.w	r3, #0
 8003864:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003868:	4659      	mov	r1, fp
 800386a:	00cb      	lsls	r3, r1, #3
 800386c:	4651      	mov	r1, sl
 800386e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003872:	4651      	mov	r1, sl
 8003874:	00ca      	lsls	r2, r1, #3
 8003876:	4610      	mov	r0, r2
 8003878:	4619      	mov	r1, r3
 800387a:	4603      	mov	r3, r0
 800387c:	4642      	mov	r2, r8
 800387e:	189b      	adds	r3, r3, r2
 8003880:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003884:	464b      	mov	r3, r9
 8003886:	460a      	mov	r2, r1
 8003888:	eb42 0303 	adc.w	r3, r2, r3
 800388c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003890:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003894:	685b      	ldr	r3, [r3, #4]
 8003896:	2200      	movs	r2, #0
 8003898:	67bb      	str	r3, [r7, #120]	@ 0x78
 800389a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800389c:	f04f 0200 	mov.w	r2, #0
 80038a0:	f04f 0300 	mov.w	r3, #0
 80038a4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80038a8:	4649      	mov	r1, r9
 80038aa:	008b      	lsls	r3, r1, #2
 80038ac:	4641      	mov	r1, r8
 80038ae:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80038b2:	4641      	mov	r1, r8
 80038b4:	008a      	lsls	r2, r1, #2
 80038b6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80038ba:	f7fc fce1 	bl	8000280 <__aeabi_uldivmod>
 80038be:	4602      	mov	r2, r0
 80038c0:	460b      	mov	r3, r1
 80038c2:	4611      	mov	r1, r2
 80038c4:	4b38      	ldr	r3, [pc, #224]	@ (80039a8 <UART_SetConfig+0x4e4>)
 80038c6:	fba3 2301 	umull	r2, r3, r3, r1
 80038ca:	095b      	lsrs	r3, r3, #5
 80038cc:	2264      	movs	r2, #100	@ 0x64
 80038ce:	fb02 f303 	mul.w	r3, r2, r3
 80038d2:	1acb      	subs	r3, r1, r3
 80038d4:	011b      	lsls	r3, r3, #4
 80038d6:	3332      	adds	r3, #50	@ 0x32
 80038d8:	4a33      	ldr	r2, [pc, #204]	@ (80039a8 <UART_SetConfig+0x4e4>)
 80038da:	fba2 2303 	umull	r2, r3, r2, r3
 80038de:	095b      	lsrs	r3, r3, #5
 80038e0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80038e4:	441c      	add	r4, r3
 80038e6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80038ea:	2200      	movs	r2, #0
 80038ec:	673b      	str	r3, [r7, #112]	@ 0x70
 80038ee:	677a      	str	r2, [r7, #116]	@ 0x74
 80038f0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80038f4:	4642      	mov	r2, r8
 80038f6:	464b      	mov	r3, r9
 80038f8:	1891      	adds	r1, r2, r2
 80038fa:	60b9      	str	r1, [r7, #8]
 80038fc:	415b      	adcs	r3, r3
 80038fe:	60fb      	str	r3, [r7, #12]
 8003900:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003904:	4641      	mov	r1, r8
 8003906:	1851      	adds	r1, r2, r1
 8003908:	6039      	str	r1, [r7, #0]
 800390a:	4649      	mov	r1, r9
 800390c:	414b      	adcs	r3, r1
 800390e:	607b      	str	r3, [r7, #4]
 8003910:	f04f 0200 	mov.w	r2, #0
 8003914:	f04f 0300 	mov.w	r3, #0
 8003918:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800391c:	4659      	mov	r1, fp
 800391e:	00cb      	lsls	r3, r1, #3
 8003920:	4651      	mov	r1, sl
 8003922:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003926:	4651      	mov	r1, sl
 8003928:	00ca      	lsls	r2, r1, #3
 800392a:	4610      	mov	r0, r2
 800392c:	4619      	mov	r1, r3
 800392e:	4603      	mov	r3, r0
 8003930:	4642      	mov	r2, r8
 8003932:	189b      	adds	r3, r3, r2
 8003934:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003936:	464b      	mov	r3, r9
 8003938:	460a      	mov	r2, r1
 800393a:	eb42 0303 	adc.w	r3, r2, r3
 800393e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003940:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003944:	685b      	ldr	r3, [r3, #4]
 8003946:	2200      	movs	r2, #0
 8003948:	663b      	str	r3, [r7, #96]	@ 0x60
 800394a:	667a      	str	r2, [r7, #100]	@ 0x64
 800394c:	f04f 0200 	mov.w	r2, #0
 8003950:	f04f 0300 	mov.w	r3, #0
 8003954:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8003958:	4649      	mov	r1, r9
 800395a:	008b      	lsls	r3, r1, #2
 800395c:	4641      	mov	r1, r8
 800395e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003962:	4641      	mov	r1, r8
 8003964:	008a      	lsls	r2, r1, #2
 8003966:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800396a:	f7fc fc89 	bl	8000280 <__aeabi_uldivmod>
 800396e:	4602      	mov	r2, r0
 8003970:	460b      	mov	r3, r1
 8003972:	4b0d      	ldr	r3, [pc, #52]	@ (80039a8 <UART_SetConfig+0x4e4>)
 8003974:	fba3 1302 	umull	r1, r3, r3, r2
 8003978:	095b      	lsrs	r3, r3, #5
 800397a:	2164      	movs	r1, #100	@ 0x64
 800397c:	fb01 f303 	mul.w	r3, r1, r3
 8003980:	1ad3      	subs	r3, r2, r3
 8003982:	011b      	lsls	r3, r3, #4
 8003984:	3332      	adds	r3, #50	@ 0x32
 8003986:	4a08      	ldr	r2, [pc, #32]	@ (80039a8 <UART_SetConfig+0x4e4>)
 8003988:	fba2 2303 	umull	r2, r3, r2, r3
 800398c:	095b      	lsrs	r3, r3, #5
 800398e:	f003 020f 	and.w	r2, r3, #15
 8003992:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	4422      	add	r2, r4
 800399a:	609a      	str	r2, [r3, #8]
}
 800399c:	bf00      	nop
 800399e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80039a2:	46bd      	mov	sp, r7
 80039a4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80039a8:	51eb851f 	.word	0x51eb851f

080039ac <siprintf>:
 80039ac:	b40e      	push	{r1, r2, r3}
 80039ae:	b500      	push	{lr}
 80039b0:	b09c      	sub	sp, #112	@ 0x70
 80039b2:	ab1d      	add	r3, sp, #116	@ 0x74
 80039b4:	9002      	str	r0, [sp, #8]
 80039b6:	9006      	str	r0, [sp, #24]
 80039b8:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80039bc:	4809      	ldr	r0, [pc, #36]	@ (80039e4 <siprintf+0x38>)
 80039be:	9107      	str	r1, [sp, #28]
 80039c0:	9104      	str	r1, [sp, #16]
 80039c2:	4909      	ldr	r1, [pc, #36]	@ (80039e8 <siprintf+0x3c>)
 80039c4:	f853 2b04 	ldr.w	r2, [r3], #4
 80039c8:	9105      	str	r1, [sp, #20]
 80039ca:	6800      	ldr	r0, [r0, #0]
 80039cc:	9301      	str	r3, [sp, #4]
 80039ce:	a902      	add	r1, sp, #8
 80039d0:	f000 f9ba 	bl	8003d48 <_svfiprintf_r>
 80039d4:	9b02      	ldr	r3, [sp, #8]
 80039d6:	2200      	movs	r2, #0
 80039d8:	701a      	strb	r2, [r3, #0]
 80039da:	b01c      	add	sp, #112	@ 0x70
 80039dc:	f85d eb04 	ldr.w	lr, [sp], #4
 80039e0:	b003      	add	sp, #12
 80039e2:	4770      	bx	lr
 80039e4:	2000000c 	.word	0x2000000c
 80039e8:	ffff0208 	.word	0xffff0208

080039ec <memset>:
 80039ec:	4402      	add	r2, r0
 80039ee:	4603      	mov	r3, r0
 80039f0:	4293      	cmp	r3, r2
 80039f2:	d100      	bne.n	80039f6 <memset+0xa>
 80039f4:	4770      	bx	lr
 80039f6:	f803 1b01 	strb.w	r1, [r3], #1
 80039fa:	e7f9      	b.n	80039f0 <memset+0x4>

080039fc <strcat>:
 80039fc:	b510      	push	{r4, lr}
 80039fe:	4602      	mov	r2, r0
 8003a00:	7814      	ldrb	r4, [r2, #0]
 8003a02:	4613      	mov	r3, r2
 8003a04:	3201      	adds	r2, #1
 8003a06:	2c00      	cmp	r4, #0
 8003a08:	d1fa      	bne.n	8003a00 <strcat+0x4>
 8003a0a:	3b01      	subs	r3, #1
 8003a0c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003a10:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003a14:	2a00      	cmp	r2, #0
 8003a16:	d1f9      	bne.n	8003a0c <strcat+0x10>
 8003a18:	bd10      	pop	{r4, pc}

08003a1a <strstr>:
 8003a1a:	780a      	ldrb	r2, [r1, #0]
 8003a1c:	b570      	push	{r4, r5, r6, lr}
 8003a1e:	b96a      	cbnz	r2, 8003a3c <strstr+0x22>
 8003a20:	bd70      	pop	{r4, r5, r6, pc}
 8003a22:	429a      	cmp	r2, r3
 8003a24:	d109      	bne.n	8003a3a <strstr+0x20>
 8003a26:	460c      	mov	r4, r1
 8003a28:	4605      	mov	r5, r0
 8003a2a:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d0f6      	beq.n	8003a20 <strstr+0x6>
 8003a32:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8003a36:	429e      	cmp	r6, r3
 8003a38:	d0f7      	beq.n	8003a2a <strstr+0x10>
 8003a3a:	3001      	adds	r0, #1
 8003a3c:	7803      	ldrb	r3, [r0, #0]
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d1ef      	bne.n	8003a22 <strstr+0x8>
 8003a42:	4618      	mov	r0, r3
 8003a44:	e7ec      	b.n	8003a20 <strstr+0x6>
	...

08003a48 <__errno>:
 8003a48:	4b01      	ldr	r3, [pc, #4]	@ (8003a50 <__errno+0x8>)
 8003a4a:	6818      	ldr	r0, [r3, #0]
 8003a4c:	4770      	bx	lr
 8003a4e:	bf00      	nop
 8003a50:	2000000c 	.word	0x2000000c

08003a54 <__libc_init_array>:
 8003a54:	b570      	push	{r4, r5, r6, lr}
 8003a56:	4d0d      	ldr	r5, [pc, #52]	@ (8003a8c <__libc_init_array+0x38>)
 8003a58:	4c0d      	ldr	r4, [pc, #52]	@ (8003a90 <__libc_init_array+0x3c>)
 8003a5a:	1b64      	subs	r4, r4, r5
 8003a5c:	10a4      	asrs	r4, r4, #2
 8003a5e:	2600      	movs	r6, #0
 8003a60:	42a6      	cmp	r6, r4
 8003a62:	d109      	bne.n	8003a78 <__libc_init_array+0x24>
 8003a64:	4d0b      	ldr	r5, [pc, #44]	@ (8003a94 <__libc_init_array+0x40>)
 8003a66:	4c0c      	ldr	r4, [pc, #48]	@ (8003a98 <__libc_init_array+0x44>)
 8003a68:	f000 fc66 	bl	8004338 <_init>
 8003a6c:	1b64      	subs	r4, r4, r5
 8003a6e:	10a4      	asrs	r4, r4, #2
 8003a70:	2600      	movs	r6, #0
 8003a72:	42a6      	cmp	r6, r4
 8003a74:	d105      	bne.n	8003a82 <__libc_init_array+0x2e>
 8003a76:	bd70      	pop	{r4, r5, r6, pc}
 8003a78:	f855 3b04 	ldr.w	r3, [r5], #4
 8003a7c:	4798      	blx	r3
 8003a7e:	3601      	adds	r6, #1
 8003a80:	e7ee      	b.n	8003a60 <__libc_init_array+0xc>
 8003a82:	f855 3b04 	ldr.w	r3, [r5], #4
 8003a86:	4798      	blx	r3
 8003a88:	3601      	adds	r6, #1
 8003a8a:	e7f2      	b.n	8003a72 <__libc_init_array+0x1e>
 8003a8c:	080043d0 	.word	0x080043d0
 8003a90:	080043d0 	.word	0x080043d0
 8003a94:	080043d0 	.word	0x080043d0
 8003a98:	080043d4 	.word	0x080043d4

08003a9c <__retarget_lock_acquire_recursive>:
 8003a9c:	4770      	bx	lr

08003a9e <__retarget_lock_release_recursive>:
 8003a9e:	4770      	bx	lr

08003aa0 <_free_r>:
 8003aa0:	b538      	push	{r3, r4, r5, lr}
 8003aa2:	4605      	mov	r5, r0
 8003aa4:	2900      	cmp	r1, #0
 8003aa6:	d041      	beq.n	8003b2c <_free_r+0x8c>
 8003aa8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003aac:	1f0c      	subs	r4, r1, #4
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	bfb8      	it	lt
 8003ab2:	18e4      	addlt	r4, r4, r3
 8003ab4:	f000 f8e0 	bl	8003c78 <__malloc_lock>
 8003ab8:	4a1d      	ldr	r2, [pc, #116]	@ (8003b30 <_free_r+0x90>)
 8003aba:	6813      	ldr	r3, [r2, #0]
 8003abc:	b933      	cbnz	r3, 8003acc <_free_r+0x2c>
 8003abe:	6063      	str	r3, [r4, #4]
 8003ac0:	6014      	str	r4, [r2, #0]
 8003ac2:	4628      	mov	r0, r5
 8003ac4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003ac8:	f000 b8dc 	b.w	8003c84 <__malloc_unlock>
 8003acc:	42a3      	cmp	r3, r4
 8003ace:	d908      	bls.n	8003ae2 <_free_r+0x42>
 8003ad0:	6820      	ldr	r0, [r4, #0]
 8003ad2:	1821      	adds	r1, r4, r0
 8003ad4:	428b      	cmp	r3, r1
 8003ad6:	bf01      	itttt	eq
 8003ad8:	6819      	ldreq	r1, [r3, #0]
 8003ada:	685b      	ldreq	r3, [r3, #4]
 8003adc:	1809      	addeq	r1, r1, r0
 8003ade:	6021      	streq	r1, [r4, #0]
 8003ae0:	e7ed      	b.n	8003abe <_free_r+0x1e>
 8003ae2:	461a      	mov	r2, r3
 8003ae4:	685b      	ldr	r3, [r3, #4]
 8003ae6:	b10b      	cbz	r3, 8003aec <_free_r+0x4c>
 8003ae8:	42a3      	cmp	r3, r4
 8003aea:	d9fa      	bls.n	8003ae2 <_free_r+0x42>
 8003aec:	6811      	ldr	r1, [r2, #0]
 8003aee:	1850      	adds	r0, r2, r1
 8003af0:	42a0      	cmp	r0, r4
 8003af2:	d10b      	bne.n	8003b0c <_free_r+0x6c>
 8003af4:	6820      	ldr	r0, [r4, #0]
 8003af6:	4401      	add	r1, r0
 8003af8:	1850      	adds	r0, r2, r1
 8003afa:	4283      	cmp	r3, r0
 8003afc:	6011      	str	r1, [r2, #0]
 8003afe:	d1e0      	bne.n	8003ac2 <_free_r+0x22>
 8003b00:	6818      	ldr	r0, [r3, #0]
 8003b02:	685b      	ldr	r3, [r3, #4]
 8003b04:	6053      	str	r3, [r2, #4]
 8003b06:	4408      	add	r0, r1
 8003b08:	6010      	str	r0, [r2, #0]
 8003b0a:	e7da      	b.n	8003ac2 <_free_r+0x22>
 8003b0c:	d902      	bls.n	8003b14 <_free_r+0x74>
 8003b0e:	230c      	movs	r3, #12
 8003b10:	602b      	str	r3, [r5, #0]
 8003b12:	e7d6      	b.n	8003ac2 <_free_r+0x22>
 8003b14:	6820      	ldr	r0, [r4, #0]
 8003b16:	1821      	adds	r1, r4, r0
 8003b18:	428b      	cmp	r3, r1
 8003b1a:	bf04      	itt	eq
 8003b1c:	6819      	ldreq	r1, [r3, #0]
 8003b1e:	685b      	ldreq	r3, [r3, #4]
 8003b20:	6063      	str	r3, [r4, #4]
 8003b22:	bf04      	itt	eq
 8003b24:	1809      	addeq	r1, r1, r0
 8003b26:	6021      	streq	r1, [r4, #0]
 8003b28:	6054      	str	r4, [r2, #4]
 8003b2a:	e7ca      	b.n	8003ac2 <_free_r+0x22>
 8003b2c:	bd38      	pop	{r3, r4, r5, pc}
 8003b2e:	bf00      	nop
 8003b30:	20000394 	.word	0x20000394

08003b34 <sbrk_aligned>:
 8003b34:	b570      	push	{r4, r5, r6, lr}
 8003b36:	4e0f      	ldr	r6, [pc, #60]	@ (8003b74 <sbrk_aligned+0x40>)
 8003b38:	460c      	mov	r4, r1
 8003b3a:	6831      	ldr	r1, [r6, #0]
 8003b3c:	4605      	mov	r5, r0
 8003b3e:	b911      	cbnz	r1, 8003b46 <sbrk_aligned+0x12>
 8003b40:	f000 fba6 	bl	8004290 <_sbrk_r>
 8003b44:	6030      	str	r0, [r6, #0]
 8003b46:	4621      	mov	r1, r4
 8003b48:	4628      	mov	r0, r5
 8003b4a:	f000 fba1 	bl	8004290 <_sbrk_r>
 8003b4e:	1c43      	adds	r3, r0, #1
 8003b50:	d103      	bne.n	8003b5a <sbrk_aligned+0x26>
 8003b52:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8003b56:	4620      	mov	r0, r4
 8003b58:	bd70      	pop	{r4, r5, r6, pc}
 8003b5a:	1cc4      	adds	r4, r0, #3
 8003b5c:	f024 0403 	bic.w	r4, r4, #3
 8003b60:	42a0      	cmp	r0, r4
 8003b62:	d0f8      	beq.n	8003b56 <sbrk_aligned+0x22>
 8003b64:	1a21      	subs	r1, r4, r0
 8003b66:	4628      	mov	r0, r5
 8003b68:	f000 fb92 	bl	8004290 <_sbrk_r>
 8003b6c:	3001      	adds	r0, #1
 8003b6e:	d1f2      	bne.n	8003b56 <sbrk_aligned+0x22>
 8003b70:	e7ef      	b.n	8003b52 <sbrk_aligned+0x1e>
 8003b72:	bf00      	nop
 8003b74:	20000390 	.word	0x20000390

08003b78 <_malloc_r>:
 8003b78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003b7c:	1ccd      	adds	r5, r1, #3
 8003b7e:	f025 0503 	bic.w	r5, r5, #3
 8003b82:	3508      	adds	r5, #8
 8003b84:	2d0c      	cmp	r5, #12
 8003b86:	bf38      	it	cc
 8003b88:	250c      	movcc	r5, #12
 8003b8a:	2d00      	cmp	r5, #0
 8003b8c:	4606      	mov	r6, r0
 8003b8e:	db01      	blt.n	8003b94 <_malloc_r+0x1c>
 8003b90:	42a9      	cmp	r1, r5
 8003b92:	d904      	bls.n	8003b9e <_malloc_r+0x26>
 8003b94:	230c      	movs	r3, #12
 8003b96:	6033      	str	r3, [r6, #0]
 8003b98:	2000      	movs	r0, #0
 8003b9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003b9e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003c74 <_malloc_r+0xfc>
 8003ba2:	f000 f869 	bl	8003c78 <__malloc_lock>
 8003ba6:	f8d8 3000 	ldr.w	r3, [r8]
 8003baa:	461c      	mov	r4, r3
 8003bac:	bb44      	cbnz	r4, 8003c00 <_malloc_r+0x88>
 8003bae:	4629      	mov	r1, r5
 8003bb0:	4630      	mov	r0, r6
 8003bb2:	f7ff ffbf 	bl	8003b34 <sbrk_aligned>
 8003bb6:	1c43      	adds	r3, r0, #1
 8003bb8:	4604      	mov	r4, r0
 8003bba:	d158      	bne.n	8003c6e <_malloc_r+0xf6>
 8003bbc:	f8d8 4000 	ldr.w	r4, [r8]
 8003bc0:	4627      	mov	r7, r4
 8003bc2:	2f00      	cmp	r7, #0
 8003bc4:	d143      	bne.n	8003c4e <_malloc_r+0xd6>
 8003bc6:	2c00      	cmp	r4, #0
 8003bc8:	d04b      	beq.n	8003c62 <_malloc_r+0xea>
 8003bca:	6823      	ldr	r3, [r4, #0]
 8003bcc:	4639      	mov	r1, r7
 8003bce:	4630      	mov	r0, r6
 8003bd0:	eb04 0903 	add.w	r9, r4, r3
 8003bd4:	f000 fb5c 	bl	8004290 <_sbrk_r>
 8003bd8:	4581      	cmp	r9, r0
 8003bda:	d142      	bne.n	8003c62 <_malloc_r+0xea>
 8003bdc:	6821      	ldr	r1, [r4, #0]
 8003bde:	1a6d      	subs	r5, r5, r1
 8003be0:	4629      	mov	r1, r5
 8003be2:	4630      	mov	r0, r6
 8003be4:	f7ff ffa6 	bl	8003b34 <sbrk_aligned>
 8003be8:	3001      	adds	r0, #1
 8003bea:	d03a      	beq.n	8003c62 <_malloc_r+0xea>
 8003bec:	6823      	ldr	r3, [r4, #0]
 8003bee:	442b      	add	r3, r5
 8003bf0:	6023      	str	r3, [r4, #0]
 8003bf2:	f8d8 3000 	ldr.w	r3, [r8]
 8003bf6:	685a      	ldr	r2, [r3, #4]
 8003bf8:	bb62      	cbnz	r2, 8003c54 <_malloc_r+0xdc>
 8003bfa:	f8c8 7000 	str.w	r7, [r8]
 8003bfe:	e00f      	b.n	8003c20 <_malloc_r+0xa8>
 8003c00:	6822      	ldr	r2, [r4, #0]
 8003c02:	1b52      	subs	r2, r2, r5
 8003c04:	d420      	bmi.n	8003c48 <_malloc_r+0xd0>
 8003c06:	2a0b      	cmp	r2, #11
 8003c08:	d917      	bls.n	8003c3a <_malloc_r+0xc2>
 8003c0a:	1961      	adds	r1, r4, r5
 8003c0c:	42a3      	cmp	r3, r4
 8003c0e:	6025      	str	r5, [r4, #0]
 8003c10:	bf18      	it	ne
 8003c12:	6059      	strne	r1, [r3, #4]
 8003c14:	6863      	ldr	r3, [r4, #4]
 8003c16:	bf08      	it	eq
 8003c18:	f8c8 1000 	streq.w	r1, [r8]
 8003c1c:	5162      	str	r2, [r4, r5]
 8003c1e:	604b      	str	r3, [r1, #4]
 8003c20:	4630      	mov	r0, r6
 8003c22:	f000 f82f 	bl	8003c84 <__malloc_unlock>
 8003c26:	f104 000b 	add.w	r0, r4, #11
 8003c2a:	1d23      	adds	r3, r4, #4
 8003c2c:	f020 0007 	bic.w	r0, r0, #7
 8003c30:	1ac2      	subs	r2, r0, r3
 8003c32:	bf1c      	itt	ne
 8003c34:	1a1b      	subne	r3, r3, r0
 8003c36:	50a3      	strne	r3, [r4, r2]
 8003c38:	e7af      	b.n	8003b9a <_malloc_r+0x22>
 8003c3a:	6862      	ldr	r2, [r4, #4]
 8003c3c:	42a3      	cmp	r3, r4
 8003c3e:	bf0c      	ite	eq
 8003c40:	f8c8 2000 	streq.w	r2, [r8]
 8003c44:	605a      	strne	r2, [r3, #4]
 8003c46:	e7eb      	b.n	8003c20 <_malloc_r+0xa8>
 8003c48:	4623      	mov	r3, r4
 8003c4a:	6864      	ldr	r4, [r4, #4]
 8003c4c:	e7ae      	b.n	8003bac <_malloc_r+0x34>
 8003c4e:	463c      	mov	r4, r7
 8003c50:	687f      	ldr	r7, [r7, #4]
 8003c52:	e7b6      	b.n	8003bc2 <_malloc_r+0x4a>
 8003c54:	461a      	mov	r2, r3
 8003c56:	685b      	ldr	r3, [r3, #4]
 8003c58:	42a3      	cmp	r3, r4
 8003c5a:	d1fb      	bne.n	8003c54 <_malloc_r+0xdc>
 8003c5c:	2300      	movs	r3, #0
 8003c5e:	6053      	str	r3, [r2, #4]
 8003c60:	e7de      	b.n	8003c20 <_malloc_r+0xa8>
 8003c62:	230c      	movs	r3, #12
 8003c64:	6033      	str	r3, [r6, #0]
 8003c66:	4630      	mov	r0, r6
 8003c68:	f000 f80c 	bl	8003c84 <__malloc_unlock>
 8003c6c:	e794      	b.n	8003b98 <_malloc_r+0x20>
 8003c6e:	6005      	str	r5, [r0, #0]
 8003c70:	e7d6      	b.n	8003c20 <_malloc_r+0xa8>
 8003c72:	bf00      	nop
 8003c74:	20000394 	.word	0x20000394

08003c78 <__malloc_lock>:
 8003c78:	4801      	ldr	r0, [pc, #4]	@ (8003c80 <__malloc_lock+0x8>)
 8003c7a:	f7ff bf0f 	b.w	8003a9c <__retarget_lock_acquire_recursive>
 8003c7e:	bf00      	nop
 8003c80:	2000038c 	.word	0x2000038c

08003c84 <__malloc_unlock>:
 8003c84:	4801      	ldr	r0, [pc, #4]	@ (8003c8c <__malloc_unlock+0x8>)
 8003c86:	f7ff bf0a 	b.w	8003a9e <__retarget_lock_release_recursive>
 8003c8a:	bf00      	nop
 8003c8c:	2000038c 	.word	0x2000038c

08003c90 <__ssputs_r>:
 8003c90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003c94:	688e      	ldr	r6, [r1, #8]
 8003c96:	461f      	mov	r7, r3
 8003c98:	42be      	cmp	r6, r7
 8003c9a:	680b      	ldr	r3, [r1, #0]
 8003c9c:	4682      	mov	sl, r0
 8003c9e:	460c      	mov	r4, r1
 8003ca0:	4690      	mov	r8, r2
 8003ca2:	d82d      	bhi.n	8003d00 <__ssputs_r+0x70>
 8003ca4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003ca8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8003cac:	d026      	beq.n	8003cfc <__ssputs_r+0x6c>
 8003cae:	6965      	ldr	r5, [r4, #20]
 8003cb0:	6909      	ldr	r1, [r1, #16]
 8003cb2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003cb6:	eba3 0901 	sub.w	r9, r3, r1
 8003cba:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003cbe:	1c7b      	adds	r3, r7, #1
 8003cc0:	444b      	add	r3, r9
 8003cc2:	106d      	asrs	r5, r5, #1
 8003cc4:	429d      	cmp	r5, r3
 8003cc6:	bf38      	it	cc
 8003cc8:	461d      	movcc	r5, r3
 8003cca:	0553      	lsls	r3, r2, #21
 8003ccc:	d527      	bpl.n	8003d1e <__ssputs_r+0x8e>
 8003cce:	4629      	mov	r1, r5
 8003cd0:	f7ff ff52 	bl	8003b78 <_malloc_r>
 8003cd4:	4606      	mov	r6, r0
 8003cd6:	b360      	cbz	r0, 8003d32 <__ssputs_r+0xa2>
 8003cd8:	6921      	ldr	r1, [r4, #16]
 8003cda:	464a      	mov	r2, r9
 8003cdc:	f000 fae8 	bl	80042b0 <memcpy>
 8003ce0:	89a3      	ldrh	r3, [r4, #12]
 8003ce2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8003ce6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003cea:	81a3      	strh	r3, [r4, #12]
 8003cec:	6126      	str	r6, [r4, #16]
 8003cee:	6165      	str	r5, [r4, #20]
 8003cf0:	444e      	add	r6, r9
 8003cf2:	eba5 0509 	sub.w	r5, r5, r9
 8003cf6:	6026      	str	r6, [r4, #0]
 8003cf8:	60a5      	str	r5, [r4, #8]
 8003cfa:	463e      	mov	r6, r7
 8003cfc:	42be      	cmp	r6, r7
 8003cfe:	d900      	bls.n	8003d02 <__ssputs_r+0x72>
 8003d00:	463e      	mov	r6, r7
 8003d02:	6820      	ldr	r0, [r4, #0]
 8003d04:	4632      	mov	r2, r6
 8003d06:	4641      	mov	r1, r8
 8003d08:	f000 faa8 	bl	800425c <memmove>
 8003d0c:	68a3      	ldr	r3, [r4, #8]
 8003d0e:	1b9b      	subs	r3, r3, r6
 8003d10:	60a3      	str	r3, [r4, #8]
 8003d12:	6823      	ldr	r3, [r4, #0]
 8003d14:	4433      	add	r3, r6
 8003d16:	6023      	str	r3, [r4, #0]
 8003d18:	2000      	movs	r0, #0
 8003d1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003d1e:	462a      	mov	r2, r5
 8003d20:	f000 fad4 	bl	80042cc <_realloc_r>
 8003d24:	4606      	mov	r6, r0
 8003d26:	2800      	cmp	r0, #0
 8003d28:	d1e0      	bne.n	8003cec <__ssputs_r+0x5c>
 8003d2a:	6921      	ldr	r1, [r4, #16]
 8003d2c:	4650      	mov	r0, sl
 8003d2e:	f7ff feb7 	bl	8003aa0 <_free_r>
 8003d32:	230c      	movs	r3, #12
 8003d34:	f8ca 3000 	str.w	r3, [sl]
 8003d38:	89a3      	ldrh	r3, [r4, #12]
 8003d3a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003d3e:	81a3      	strh	r3, [r4, #12]
 8003d40:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003d44:	e7e9      	b.n	8003d1a <__ssputs_r+0x8a>
	...

08003d48 <_svfiprintf_r>:
 8003d48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d4c:	4698      	mov	r8, r3
 8003d4e:	898b      	ldrh	r3, [r1, #12]
 8003d50:	061b      	lsls	r3, r3, #24
 8003d52:	b09d      	sub	sp, #116	@ 0x74
 8003d54:	4607      	mov	r7, r0
 8003d56:	460d      	mov	r5, r1
 8003d58:	4614      	mov	r4, r2
 8003d5a:	d510      	bpl.n	8003d7e <_svfiprintf_r+0x36>
 8003d5c:	690b      	ldr	r3, [r1, #16]
 8003d5e:	b973      	cbnz	r3, 8003d7e <_svfiprintf_r+0x36>
 8003d60:	2140      	movs	r1, #64	@ 0x40
 8003d62:	f7ff ff09 	bl	8003b78 <_malloc_r>
 8003d66:	6028      	str	r0, [r5, #0]
 8003d68:	6128      	str	r0, [r5, #16]
 8003d6a:	b930      	cbnz	r0, 8003d7a <_svfiprintf_r+0x32>
 8003d6c:	230c      	movs	r3, #12
 8003d6e:	603b      	str	r3, [r7, #0]
 8003d70:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003d74:	b01d      	add	sp, #116	@ 0x74
 8003d76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003d7a:	2340      	movs	r3, #64	@ 0x40
 8003d7c:	616b      	str	r3, [r5, #20]
 8003d7e:	2300      	movs	r3, #0
 8003d80:	9309      	str	r3, [sp, #36]	@ 0x24
 8003d82:	2320      	movs	r3, #32
 8003d84:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003d88:	f8cd 800c 	str.w	r8, [sp, #12]
 8003d8c:	2330      	movs	r3, #48	@ 0x30
 8003d8e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8003f2c <_svfiprintf_r+0x1e4>
 8003d92:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8003d96:	f04f 0901 	mov.w	r9, #1
 8003d9a:	4623      	mov	r3, r4
 8003d9c:	469a      	mov	sl, r3
 8003d9e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003da2:	b10a      	cbz	r2, 8003da8 <_svfiprintf_r+0x60>
 8003da4:	2a25      	cmp	r2, #37	@ 0x25
 8003da6:	d1f9      	bne.n	8003d9c <_svfiprintf_r+0x54>
 8003da8:	ebba 0b04 	subs.w	fp, sl, r4
 8003dac:	d00b      	beq.n	8003dc6 <_svfiprintf_r+0x7e>
 8003dae:	465b      	mov	r3, fp
 8003db0:	4622      	mov	r2, r4
 8003db2:	4629      	mov	r1, r5
 8003db4:	4638      	mov	r0, r7
 8003db6:	f7ff ff6b 	bl	8003c90 <__ssputs_r>
 8003dba:	3001      	adds	r0, #1
 8003dbc:	f000 80a7 	beq.w	8003f0e <_svfiprintf_r+0x1c6>
 8003dc0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003dc2:	445a      	add	r2, fp
 8003dc4:	9209      	str	r2, [sp, #36]	@ 0x24
 8003dc6:	f89a 3000 	ldrb.w	r3, [sl]
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	f000 809f 	beq.w	8003f0e <_svfiprintf_r+0x1c6>
 8003dd0:	2300      	movs	r3, #0
 8003dd2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003dd6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003dda:	f10a 0a01 	add.w	sl, sl, #1
 8003dde:	9304      	str	r3, [sp, #16]
 8003de0:	9307      	str	r3, [sp, #28]
 8003de2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8003de6:	931a      	str	r3, [sp, #104]	@ 0x68
 8003de8:	4654      	mov	r4, sl
 8003dea:	2205      	movs	r2, #5
 8003dec:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003df0:	484e      	ldr	r0, [pc, #312]	@ (8003f2c <_svfiprintf_r+0x1e4>)
 8003df2:	f7fc f9f5 	bl	80001e0 <memchr>
 8003df6:	9a04      	ldr	r2, [sp, #16]
 8003df8:	b9d8      	cbnz	r0, 8003e32 <_svfiprintf_r+0xea>
 8003dfa:	06d0      	lsls	r0, r2, #27
 8003dfc:	bf44      	itt	mi
 8003dfe:	2320      	movmi	r3, #32
 8003e00:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003e04:	0711      	lsls	r1, r2, #28
 8003e06:	bf44      	itt	mi
 8003e08:	232b      	movmi	r3, #43	@ 0x2b
 8003e0a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003e0e:	f89a 3000 	ldrb.w	r3, [sl]
 8003e12:	2b2a      	cmp	r3, #42	@ 0x2a
 8003e14:	d015      	beq.n	8003e42 <_svfiprintf_r+0xfa>
 8003e16:	9a07      	ldr	r2, [sp, #28]
 8003e18:	4654      	mov	r4, sl
 8003e1a:	2000      	movs	r0, #0
 8003e1c:	f04f 0c0a 	mov.w	ip, #10
 8003e20:	4621      	mov	r1, r4
 8003e22:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003e26:	3b30      	subs	r3, #48	@ 0x30
 8003e28:	2b09      	cmp	r3, #9
 8003e2a:	d94b      	bls.n	8003ec4 <_svfiprintf_r+0x17c>
 8003e2c:	b1b0      	cbz	r0, 8003e5c <_svfiprintf_r+0x114>
 8003e2e:	9207      	str	r2, [sp, #28]
 8003e30:	e014      	b.n	8003e5c <_svfiprintf_r+0x114>
 8003e32:	eba0 0308 	sub.w	r3, r0, r8
 8003e36:	fa09 f303 	lsl.w	r3, r9, r3
 8003e3a:	4313      	orrs	r3, r2
 8003e3c:	9304      	str	r3, [sp, #16]
 8003e3e:	46a2      	mov	sl, r4
 8003e40:	e7d2      	b.n	8003de8 <_svfiprintf_r+0xa0>
 8003e42:	9b03      	ldr	r3, [sp, #12]
 8003e44:	1d19      	adds	r1, r3, #4
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	9103      	str	r1, [sp, #12]
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	bfbb      	ittet	lt
 8003e4e:	425b      	neglt	r3, r3
 8003e50:	f042 0202 	orrlt.w	r2, r2, #2
 8003e54:	9307      	strge	r3, [sp, #28]
 8003e56:	9307      	strlt	r3, [sp, #28]
 8003e58:	bfb8      	it	lt
 8003e5a:	9204      	strlt	r2, [sp, #16]
 8003e5c:	7823      	ldrb	r3, [r4, #0]
 8003e5e:	2b2e      	cmp	r3, #46	@ 0x2e
 8003e60:	d10a      	bne.n	8003e78 <_svfiprintf_r+0x130>
 8003e62:	7863      	ldrb	r3, [r4, #1]
 8003e64:	2b2a      	cmp	r3, #42	@ 0x2a
 8003e66:	d132      	bne.n	8003ece <_svfiprintf_r+0x186>
 8003e68:	9b03      	ldr	r3, [sp, #12]
 8003e6a:	1d1a      	adds	r2, r3, #4
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	9203      	str	r2, [sp, #12]
 8003e70:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8003e74:	3402      	adds	r4, #2
 8003e76:	9305      	str	r3, [sp, #20]
 8003e78:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8003f3c <_svfiprintf_r+0x1f4>
 8003e7c:	7821      	ldrb	r1, [r4, #0]
 8003e7e:	2203      	movs	r2, #3
 8003e80:	4650      	mov	r0, sl
 8003e82:	f7fc f9ad 	bl	80001e0 <memchr>
 8003e86:	b138      	cbz	r0, 8003e98 <_svfiprintf_r+0x150>
 8003e88:	9b04      	ldr	r3, [sp, #16]
 8003e8a:	eba0 000a 	sub.w	r0, r0, sl
 8003e8e:	2240      	movs	r2, #64	@ 0x40
 8003e90:	4082      	lsls	r2, r0
 8003e92:	4313      	orrs	r3, r2
 8003e94:	3401      	adds	r4, #1
 8003e96:	9304      	str	r3, [sp, #16]
 8003e98:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003e9c:	4824      	ldr	r0, [pc, #144]	@ (8003f30 <_svfiprintf_r+0x1e8>)
 8003e9e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8003ea2:	2206      	movs	r2, #6
 8003ea4:	f7fc f99c 	bl	80001e0 <memchr>
 8003ea8:	2800      	cmp	r0, #0
 8003eaa:	d036      	beq.n	8003f1a <_svfiprintf_r+0x1d2>
 8003eac:	4b21      	ldr	r3, [pc, #132]	@ (8003f34 <_svfiprintf_r+0x1ec>)
 8003eae:	bb1b      	cbnz	r3, 8003ef8 <_svfiprintf_r+0x1b0>
 8003eb0:	9b03      	ldr	r3, [sp, #12]
 8003eb2:	3307      	adds	r3, #7
 8003eb4:	f023 0307 	bic.w	r3, r3, #7
 8003eb8:	3308      	adds	r3, #8
 8003eba:	9303      	str	r3, [sp, #12]
 8003ebc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003ebe:	4433      	add	r3, r6
 8003ec0:	9309      	str	r3, [sp, #36]	@ 0x24
 8003ec2:	e76a      	b.n	8003d9a <_svfiprintf_r+0x52>
 8003ec4:	fb0c 3202 	mla	r2, ip, r2, r3
 8003ec8:	460c      	mov	r4, r1
 8003eca:	2001      	movs	r0, #1
 8003ecc:	e7a8      	b.n	8003e20 <_svfiprintf_r+0xd8>
 8003ece:	2300      	movs	r3, #0
 8003ed0:	3401      	adds	r4, #1
 8003ed2:	9305      	str	r3, [sp, #20]
 8003ed4:	4619      	mov	r1, r3
 8003ed6:	f04f 0c0a 	mov.w	ip, #10
 8003eda:	4620      	mov	r0, r4
 8003edc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003ee0:	3a30      	subs	r2, #48	@ 0x30
 8003ee2:	2a09      	cmp	r2, #9
 8003ee4:	d903      	bls.n	8003eee <_svfiprintf_r+0x1a6>
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d0c6      	beq.n	8003e78 <_svfiprintf_r+0x130>
 8003eea:	9105      	str	r1, [sp, #20]
 8003eec:	e7c4      	b.n	8003e78 <_svfiprintf_r+0x130>
 8003eee:	fb0c 2101 	mla	r1, ip, r1, r2
 8003ef2:	4604      	mov	r4, r0
 8003ef4:	2301      	movs	r3, #1
 8003ef6:	e7f0      	b.n	8003eda <_svfiprintf_r+0x192>
 8003ef8:	ab03      	add	r3, sp, #12
 8003efa:	9300      	str	r3, [sp, #0]
 8003efc:	462a      	mov	r2, r5
 8003efe:	4b0e      	ldr	r3, [pc, #56]	@ (8003f38 <_svfiprintf_r+0x1f0>)
 8003f00:	a904      	add	r1, sp, #16
 8003f02:	4638      	mov	r0, r7
 8003f04:	f3af 8000 	nop.w
 8003f08:	1c42      	adds	r2, r0, #1
 8003f0a:	4606      	mov	r6, r0
 8003f0c:	d1d6      	bne.n	8003ebc <_svfiprintf_r+0x174>
 8003f0e:	89ab      	ldrh	r3, [r5, #12]
 8003f10:	065b      	lsls	r3, r3, #25
 8003f12:	f53f af2d 	bmi.w	8003d70 <_svfiprintf_r+0x28>
 8003f16:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003f18:	e72c      	b.n	8003d74 <_svfiprintf_r+0x2c>
 8003f1a:	ab03      	add	r3, sp, #12
 8003f1c:	9300      	str	r3, [sp, #0]
 8003f1e:	462a      	mov	r2, r5
 8003f20:	4b05      	ldr	r3, [pc, #20]	@ (8003f38 <_svfiprintf_r+0x1f0>)
 8003f22:	a904      	add	r1, sp, #16
 8003f24:	4638      	mov	r0, r7
 8003f26:	f000 f879 	bl	800401c <_printf_i>
 8003f2a:	e7ed      	b.n	8003f08 <_svfiprintf_r+0x1c0>
 8003f2c:	08004394 	.word	0x08004394
 8003f30:	0800439e 	.word	0x0800439e
 8003f34:	00000000 	.word	0x00000000
 8003f38:	08003c91 	.word	0x08003c91
 8003f3c:	0800439a 	.word	0x0800439a

08003f40 <_printf_common>:
 8003f40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003f44:	4616      	mov	r6, r2
 8003f46:	4698      	mov	r8, r3
 8003f48:	688a      	ldr	r2, [r1, #8]
 8003f4a:	690b      	ldr	r3, [r1, #16]
 8003f4c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003f50:	4293      	cmp	r3, r2
 8003f52:	bfb8      	it	lt
 8003f54:	4613      	movlt	r3, r2
 8003f56:	6033      	str	r3, [r6, #0]
 8003f58:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003f5c:	4607      	mov	r7, r0
 8003f5e:	460c      	mov	r4, r1
 8003f60:	b10a      	cbz	r2, 8003f66 <_printf_common+0x26>
 8003f62:	3301      	adds	r3, #1
 8003f64:	6033      	str	r3, [r6, #0]
 8003f66:	6823      	ldr	r3, [r4, #0]
 8003f68:	0699      	lsls	r1, r3, #26
 8003f6a:	bf42      	ittt	mi
 8003f6c:	6833      	ldrmi	r3, [r6, #0]
 8003f6e:	3302      	addmi	r3, #2
 8003f70:	6033      	strmi	r3, [r6, #0]
 8003f72:	6825      	ldr	r5, [r4, #0]
 8003f74:	f015 0506 	ands.w	r5, r5, #6
 8003f78:	d106      	bne.n	8003f88 <_printf_common+0x48>
 8003f7a:	f104 0a19 	add.w	sl, r4, #25
 8003f7e:	68e3      	ldr	r3, [r4, #12]
 8003f80:	6832      	ldr	r2, [r6, #0]
 8003f82:	1a9b      	subs	r3, r3, r2
 8003f84:	42ab      	cmp	r3, r5
 8003f86:	dc26      	bgt.n	8003fd6 <_printf_common+0x96>
 8003f88:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003f8c:	6822      	ldr	r2, [r4, #0]
 8003f8e:	3b00      	subs	r3, #0
 8003f90:	bf18      	it	ne
 8003f92:	2301      	movne	r3, #1
 8003f94:	0692      	lsls	r2, r2, #26
 8003f96:	d42b      	bmi.n	8003ff0 <_printf_common+0xb0>
 8003f98:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003f9c:	4641      	mov	r1, r8
 8003f9e:	4638      	mov	r0, r7
 8003fa0:	47c8      	blx	r9
 8003fa2:	3001      	adds	r0, #1
 8003fa4:	d01e      	beq.n	8003fe4 <_printf_common+0xa4>
 8003fa6:	6823      	ldr	r3, [r4, #0]
 8003fa8:	6922      	ldr	r2, [r4, #16]
 8003faa:	f003 0306 	and.w	r3, r3, #6
 8003fae:	2b04      	cmp	r3, #4
 8003fb0:	bf02      	ittt	eq
 8003fb2:	68e5      	ldreq	r5, [r4, #12]
 8003fb4:	6833      	ldreq	r3, [r6, #0]
 8003fb6:	1aed      	subeq	r5, r5, r3
 8003fb8:	68a3      	ldr	r3, [r4, #8]
 8003fba:	bf0c      	ite	eq
 8003fbc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003fc0:	2500      	movne	r5, #0
 8003fc2:	4293      	cmp	r3, r2
 8003fc4:	bfc4      	itt	gt
 8003fc6:	1a9b      	subgt	r3, r3, r2
 8003fc8:	18ed      	addgt	r5, r5, r3
 8003fca:	2600      	movs	r6, #0
 8003fcc:	341a      	adds	r4, #26
 8003fce:	42b5      	cmp	r5, r6
 8003fd0:	d11a      	bne.n	8004008 <_printf_common+0xc8>
 8003fd2:	2000      	movs	r0, #0
 8003fd4:	e008      	b.n	8003fe8 <_printf_common+0xa8>
 8003fd6:	2301      	movs	r3, #1
 8003fd8:	4652      	mov	r2, sl
 8003fda:	4641      	mov	r1, r8
 8003fdc:	4638      	mov	r0, r7
 8003fde:	47c8      	blx	r9
 8003fe0:	3001      	adds	r0, #1
 8003fe2:	d103      	bne.n	8003fec <_printf_common+0xac>
 8003fe4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003fe8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003fec:	3501      	adds	r5, #1
 8003fee:	e7c6      	b.n	8003f7e <_printf_common+0x3e>
 8003ff0:	18e1      	adds	r1, r4, r3
 8003ff2:	1c5a      	adds	r2, r3, #1
 8003ff4:	2030      	movs	r0, #48	@ 0x30
 8003ff6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003ffa:	4422      	add	r2, r4
 8003ffc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004000:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004004:	3302      	adds	r3, #2
 8004006:	e7c7      	b.n	8003f98 <_printf_common+0x58>
 8004008:	2301      	movs	r3, #1
 800400a:	4622      	mov	r2, r4
 800400c:	4641      	mov	r1, r8
 800400e:	4638      	mov	r0, r7
 8004010:	47c8      	blx	r9
 8004012:	3001      	adds	r0, #1
 8004014:	d0e6      	beq.n	8003fe4 <_printf_common+0xa4>
 8004016:	3601      	adds	r6, #1
 8004018:	e7d9      	b.n	8003fce <_printf_common+0x8e>
	...

0800401c <_printf_i>:
 800401c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004020:	7e0f      	ldrb	r7, [r1, #24]
 8004022:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004024:	2f78      	cmp	r7, #120	@ 0x78
 8004026:	4691      	mov	r9, r2
 8004028:	4680      	mov	r8, r0
 800402a:	460c      	mov	r4, r1
 800402c:	469a      	mov	sl, r3
 800402e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004032:	d807      	bhi.n	8004044 <_printf_i+0x28>
 8004034:	2f62      	cmp	r7, #98	@ 0x62
 8004036:	d80a      	bhi.n	800404e <_printf_i+0x32>
 8004038:	2f00      	cmp	r7, #0
 800403a:	f000 80d2 	beq.w	80041e2 <_printf_i+0x1c6>
 800403e:	2f58      	cmp	r7, #88	@ 0x58
 8004040:	f000 80b9 	beq.w	80041b6 <_printf_i+0x19a>
 8004044:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004048:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800404c:	e03a      	b.n	80040c4 <_printf_i+0xa8>
 800404e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004052:	2b15      	cmp	r3, #21
 8004054:	d8f6      	bhi.n	8004044 <_printf_i+0x28>
 8004056:	a101      	add	r1, pc, #4	@ (adr r1, 800405c <_printf_i+0x40>)
 8004058:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800405c:	080040b5 	.word	0x080040b5
 8004060:	080040c9 	.word	0x080040c9
 8004064:	08004045 	.word	0x08004045
 8004068:	08004045 	.word	0x08004045
 800406c:	08004045 	.word	0x08004045
 8004070:	08004045 	.word	0x08004045
 8004074:	080040c9 	.word	0x080040c9
 8004078:	08004045 	.word	0x08004045
 800407c:	08004045 	.word	0x08004045
 8004080:	08004045 	.word	0x08004045
 8004084:	08004045 	.word	0x08004045
 8004088:	080041c9 	.word	0x080041c9
 800408c:	080040f3 	.word	0x080040f3
 8004090:	08004183 	.word	0x08004183
 8004094:	08004045 	.word	0x08004045
 8004098:	08004045 	.word	0x08004045
 800409c:	080041eb 	.word	0x080041eb
 80040a0:	08004045 	.word	0x08004045
 80040a4:	080040f3 	.word	0x080040f3
 80040a8:	08004045 	.word	0x08004045
 80040ac:	08004045 	.word	0x08004045
 80040b0:	0800418b 	.word	0x0800418b
 80040b4:	6833      	ldr	r3, [r6, #0]
 80040b6:	1d1a      	adds	r2, r3, #4
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	6032      	str	r2, [r6, #0]
 80040bc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80040c0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80040c4:	2301      	movs	r3, #1
 80040c6:	e09d      	b.n	8004204 <_printf_i+0x1e8>
 80040c8:	6833      	ldr	r3, [r6, #0]
 80040ca:	6820      	ldr	r0, [r4, #0]
 80040cc:	1d19      	adds	r1, r3, #4
 80040ce:	6031      	str	r1, [r6, #0]
 80040d0:	0606      	lsls	r6, r0, #24
 80040d2:	d501      	bpl.n	80040d8 <_printf_i+0xbc>
 80040d4:	681d      	ldr	r5, [r3, #0]
 80040d6:	e003      	b.n	80040e0 <_printf_i+0xc4>
 80040d8:	0645      	lsls	r5, r0, #25
 80040da:	d5fb      	bpl.n	80040d4 <_printf_i+0xb8>
 80040dc:	f9b3 5000 	ldrsh.w	r5, [r3]
 80040e0:	2d00      	cmp	r5, #0
 80040e2:	da03      	bge.n	80040ec <_printf_i+0xd0>
 80040e4:	232d      	movs	r3, #45	@ 0x2d
 80040e6:	426d      	negs	r5, r5
 80040e8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80040ec:	4859      	ldr	r0, [pc, #356]	@ (8004254 <_printf_i+0x238>)
 80040ee:	230a      	movs	r3, #10
 80040f0:	e011      	b.n	8004116 <_printf_i+0xfa>
 80040f2:	6821      	ldr	r1, [r4, #0]
 80040f4:	6833      	ldr	r3, [r6, #0]
 80040f6:	0608      	lsls	r0, r1, #24
 80040f8:	f853 5b04 	ldr.w	r5, [r3], #4
 80040fc:	d402      	bmi.n	8004104 <_printf_i+0xe8>
 80040fe:	0649      	lsls	r1, r1, #25
 8004100:	bf48      	it	mi
 8004102:	b2ad      	uxthmi	r5, r5
 8004104:	2f6f      	cmp	r7, #111	@ 0x6f
 8004106:	4853      	ldr	r0, [pc, #332]	@ (8004254 <_printf_i+0x238>)
 8004108:	6033      	str	r3, [r6, #0]
 800410a:	bf14      	ite	ne
 800410c:	230a      	movne	r3, #10
 800410e:	2308      	moveq	r3, #8
 8004110:	2100      	movs	r1, #0
 8004112:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004116:	6866      	ldr	r6, [r4, #4]
 8004118:	60a6      	str	r6, [r4, #8]
 800411a:	2e00      	cmp	r6, #0
 800411c:	bfa2      	ittt	ge
 800411e:	6821      	ldrge	r1, [r4, #0]
 8004120:	f021 0104 	bicge.w	r1, r1, #4
 8004124:	6021      	strge	r1, [r4, #0]
 8004126:	b90d      	cbnz	r5, 800412c <_printf_i+0x110>
 8004128:	2e00      	cmp	r6, #0
 800412a:	d04b      	beq.n	80041c4 <_printf_i+0x1a8>
 800412c:	4616      	mov	r6, r2
 800412e:	fbb5 f1f3 	udiv	r1, r5, r3
 8004132:	fb03 5711 	mls	r7, r3, r1, r5
 8004136:	5dc7      	ldrb	r7, [r0, r7]
 8004138:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800413c:	462f      	mov	r7, r5
 800413e:	42bb      	cmp	r3, r7
 8004140:	460d      	mov	r5, r1
 8004142:	d9f4      	bls.n	800412e <_printf_i+0x112>
 8004144:	2b08      	cmp	r3, #8
 8004146:	d10b      	bne.n	8004160 <_printf_i+0x144>
 8004148:	6823      	ldr	r3, [r4, #0]
 800414a:	07df      	lsls	r7, r3, #31
 800414c:	d508      	bpl.n	8004160 <_printf_i+0x144>
 800414e:	6923      	ldr	r3, [r4, #16]
 8004150:	6861      	ldr	r1, [r4, #4]
 8004152:	4299      	cmp	r1, r3
 8004154:	bfde      	ittt	le
 8004156:	2330      	movle	r3, #48	@ 0x30
 8004158:	f806 3c01 	strble.w	r3, [r6, #-1]
 800415c:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8004160:	1b92      	subs	r2, r2, r6
 8004162:	6122      	str	r2, [r4, #16]
 8004164:	f8cd a000 	str.w	sl, [sp]
 8004168:	464b      	mov	r3, r9
 800416a:	aa03      	add	r2, sp, #12
 800416c:	4621      	mov	r1, r4
 800416e:	4640      	mov	r0, r8
 8004170:	f7ff fee6 	bl	8003f40 <_printf_common>
 8004174:	3001      	adds	r0, #1
 8004176:	d14a      	bne.n	800420e <_printf_i+0x1f2>
 8004178:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800417c:	b004      	add	sp, #16
 800417e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004182:	6823      	ldr	r3, [r4, #0]
 8004184:	f043 0320 	orr.w	r3, r3, #32
 8004188:	6023      	str	r3, [r4, #0]
 800418a:	4833      	ldr	r0, [pc, #204]	@ (8004258 <_printf_i+0x23c>)
 800418c:	2778      	movs	r7, #120	@ 0x78
 800418e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004192:	6823      	ldr	r3, [r4, #0]
 8004194:	6831      	ldr	r1, [r6, #0]
 8004196:	061f      	lsls	r7, r3, #24
 8004198:	f851 5b04 	ldr.w	r5, [r1], #4
 800419c:	d402      	bmi.n	80041a4 <_printf_i+0x188>
 800419e:	065f      	lsls	r7, r3, #25
 80041a0:	bf48      	it	mi
 80041a2:	b2ad      	uxthmi	r5, r5
 80041a4:	6031      	str	r1, [r6, #0]
 80041a6:	07d9      	lsls	r1, r3, #31
 80041a8:	bf44      	itt	mi
 80041aa:	f043 0320 	orrmi.w	r3, r3, #32
 80041ae:	6023      	strmi	r3, [r4, #0]
 80041b0:	b11d      	cbz	r5, 80041ba <_printf_i+0x19e>
 80041b2:	2310      	movs	r3, #16
 80041b4:	e7ac      	b.n	8004110 <_printf_i+0xf4>
 80041b6:	4827      	ldr	r0, [pc, #156]	@ (8004254 <_printf_i+0x238>)
 80041b8:	e7e9      	b.n	800418e <_printf_i+0x172>
 80041ba:	6823      	ldr	r3, [r4, #0]
 80041bc:	f023 0320 	bic.w	r3, r3, #32
 80041c0:	6023      	str	r3, [r4, #0]
 80041c2:	e7f6      	b.n	80041b2 <_printf_i+0x196>
 80041c4:	4616      	mov	r6, r2
 80041c6:	e7bd      	b.n	8004144 <_printf_i+0x128>
 80041c8:	6833      	ldr	r3, [r6, #0]
 80041ca:	6825      	ldr	r5, [r4, #0]
 80041cc:	6961      	ldr	r1, [r4, #20]
 80041ce:	1d18      	adds	r0, r3, #4
 80041d0:	6030      	str	r0, [r6, #0]
 80041d2:	062e      	lsls	r6, r5, #24
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	d501      	bpl.n	80041dc <_printf_i+0x1c0>
 80041d8:	6019      	str	r1, [r3, #0]
 80041da:	e002      	b.n	80041e2 <_printf_i+0x1c6>
 80041dc:	0668      	lsls	r0, r5, #25
 80041de:	d5fb      	bpl.n	80041d8 <_printf_i+0x1bc>
 80041e0:	8019      	strh	r1, [r3, #0]
 80041e2:	2300      	movs	r3, #0
 80041e4:	6123      	str	r3, [r4, #16]
 80041e6:	4616      	mov	r6, r2
 80041e8:	e7bc      	b.n	8004164 <_printf_i+0x148>
 80041ea:	6833      	ldr	r3, [r6, #0]
 80041ec:	1d1a      	adds	r2, r3, #4
 80041ee:	6032      	str	r2, [r6, #0]
 80041f0:	681e      	ldr	r6, [r3, #0]
 80041f2:	6862      	ldr	r2, [r4, #4]
 80041f4:	2100      	movs	r1, #0
 80041f6:	4630      	mov	r0, r6
 80041f8:	f7fb fff2 	bl	80001e0 <memchr>
 80041fc:	b108      	cbz	r0, 8004202 <_printf_i+0x1e6>
 80041fe:	1b80      	subs	r0, r0, r6
 8004200:	6060      	str	r0, [r4, #4]
 8004202:	6863      	ldr	r3, [r4, #4]
 8004204:	6123      	str	r3, [r4, #16]
 8004206:	2300      	movs	r3, #0
 8004208:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800420c:	e7aa      	b.n	8004164 <_printf_i+0x148>
 800420e:	6923      	ldr	r3, [r4, #16]
 8004210:	4632      	mov	r2, r6
 8004212:	4649      	mov	r1, r9
 8004214:	4640      	mov	r0, r8
 8004216:	47d0      	blx	sl
 8004218:	3001      	adds	r0, #1
 800421a:	d0ad      	beq.n	8004178 <_printf_i+0x15c>
 800421c:	6823      	ldr	r3, [r4, #0]
 800421e:	079b      	lsls	r3, r3, #30
 8004220:	d413      	bmi.n	800424a <_printf_i+0x22e>
 8004222:	68e0      	ldr	r0, [r4, #12]
 8004224:	9b03      	ldr	r3, [sp, #12]
 8004226:	4298      	cmp	r0, r3
 8004228:	bfb8      	it	lt
 800422a:	4618      	movlt	r0, r3
 800422c:	e7a6      	b.n	800417c <_printf_i+0x160>
 800422e:	2301      	movs	r3, #1
 8004230:	4632      	mov	r2, r6
 8004232:	4649      	mov	r1, r9
 8004234:	4640      	mov	r0, r8
 8004236:	47d0      	blx	sl
 8004238:	3001      	adds	r0, #1
 800423a:	d09d      	beq.n	8004178 <_printf_i+0x15c>
 800423c:	3501      	adds	r5, #1
 800423e:	68e3      	ldr	r3, [r4, #12]
 8004240:	9903      	ldr	r1, [sp, #12]
 8004242:	1a5b      	subs	r3, r3, r1
 8004244:	42ab      	cmp	r3, r5
 8004246:	dcf2      	bgt.n	800422e <_printf_i+0x212>
 8004248:	e7eb      	b.n	8004222 <_printf_i+0x206>
 800424a:	2500      	movs	r5, #0
 800424c:	f104 0619 	add.w	r6, r4, #25
 8004250:	e7f5      	b.n	800423e <_printf_i+0x222>
 8004252:	bf00      	nop
 8004254:	080043a5 	.word	0x080043a5
 8004258:	080043b6 	.word	0x080043b6

0800425c <memmove>:
 800425c:	4288      	cmp	r0, r1
 800425e:	b510      	push	{r4, lr}
 8004260:	eb01 0402 	add.w	r4, r1, r2
 8004264:	d902      	bls.n	800426c <memmove+0x10>
 8004266:	4284      	cmp	r4, r0
 8004268:	4623      	mov	r3, r4
 800426a:	d807      	bhi.n	800427c <memmove+0x20>
 800426c:	1e43      	subs	r3, r0, #1
 800426e:	42a1      	cmp	r1, r4
 8004270:	d008      	beq.n	8004284 <memmove+0x28>
 8004272:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004276:	f803 2f01 	strb.w	r2, [r3, #1]!
 800427a:	e7f8      	b.n	800426e <memmove+0x12>
 800427c:	4402      	add	r2, r0
 800427e:	4601      	mov	r1, r0
 8004280:	428a      	cmp	r2, r1
 8004282:	d100      	bne.n	8004286 <memmove+0x2a>
 8004284:	bd10      	pop	{r4, pc}
 8004286:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800428a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800428e:	e7f7      	b.n	8004280 <memmove+0x24>

08004290 <_sbrk_r>:
 8004290:	b538      	push	{r3, r4, r5, lr}
 8004292:	4d06      	ldr	r5, [pc, #24]	@ (80042ac <_sbrk_r+0x1c>)
 8004294:	2300      	movs	r3, #0
 8004296:	4604      	mov	r4, r0
 8004298:	4608      	mov	r0, r1
 800429a:	602b      	str	r3, [r5, #0]
 800429c:	f7fc fc58 	bl	8000b50 <_sbrk>
 80042a0:	1c43      	adds	r3, r0, #1
 80042a2:	d102      	bne.n	80042aa <_sbrk_r+0x1a>
 80042a4:	682b      	ldr	r3, [r5, #0]
 80042a6:	b103      	cbz	r3, 80042aa <_sbrk_r+0x1a>
 80042a8:	6023      	str	r3, [r4, #0]
 80042aa:	bd38      	pop	{r3, r4, r5, pc}
 80042ac:	20000388 	.word	0x20000388

080042b0 <memcpy>:
 80042b0:	440a      	add	r2, r1
 80042b2:	4291      	cmp	r1, r2
 80042b4:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 80042b8:	d100      	bne.n	80042bc <memcpy+0xc>
 80042ba:	4770      	bx	lr
 80042bc:	b510      	push	{r4, lr}
 80042be:	f811 4b01 	ldrb.w	r4, [r1], #1
 80042c2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80042c6:	4291      	cmp	r1, r2
 80042c8:	d1f9      	bne.n	80042be <memcpy+0xe>
 80042ca:	bd10      	pop	{r4, pc}

080042cc <_realloc_r>:
 80042cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80042d0:	4680      	mov	r8, r0
 80042d2:	4615      	mov	r5, r2
 80042d4:	460c      	mov	r4, r1
 80042d6:	b921      	cbnz	r1, 80042e2 <_realloc_r+0x16>
 80042d8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80042dc:	4611      	mov	r1, r2
 80042de:	f7ff bc4b 	b.w	8003b78 <_malloc_r>
 80042e2:	b92a      	cbnz	r2, 80042f0 <_realloc_r+0x24>
 80042e4:	f7ff fbdc 	bl	8003aa0 <_free_r>
 80042e8:	2400      	movs	r4, #0
 80042ea:	4620      	mov	r0, r4
 80042ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80042f0:	f000 f81a 	bl	8004328 <_malloc_usable_size_r>
 80042f4:	4285      	cmp	r5, r0
 80042f6:	4606      	mov	r6, r0
 80042f8:	d802      	bhi.n	8004300 <_realloc_r+0x34>
 80042fa:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80042fe:	d8f4      	bhi.n	80042ea <_realloc_r+0x1e>
 8004300:	4629      	mov	r1, r5
 8004302:	4640      	mov	r0, r8
 8004304:	f7ff fc38 	bl	8003b78 <_malloc_r>
 8004308:	4607      	mov	r7, r0
 800430a:	2800      	cmp	r0, #0
 800430c:	d0ec      	beq.n	80042e8 <_realloc_r+0x1c>
 800430e:	42b5      	cmp	r5, r6
 8004310:	462a      	mov	r2, r5
 8004312:	4621      	mov	r1, r4
 8004314:	bf28      	it	cs
 8004316:	4632      	movcs	r2, r6
 8004318:	f7ff ffca 	bl	80042b0 <memcpy>
 800431c:	4621      	mov	r1, r4
 800431e:	4640      	mov	r0, r8
 8004320:	f7ff fbbe 	bl	8003aa0 <_free_r>
 8004324:	463c      	mov	r4, r7
 8004326:	e7e0      	b.n	80042ea <_realloc_r+0x1e>

08004328 <_malloc_usable_size_r>:
 8004328:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800432c:	1f18      	subs	r0, r3, #4
 800432e:	2b00      	cmp	r3, #0
 8004330:	bfbc      	itt	lt
 8004332:	580b      	ldrlt	r3, [r1, r0]
 8004334:	18c0      	addlt	r0, r0, r3
 8004336:	4770      	bx	lr

08004338 <_init>:
 8004338:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800433a:	bf00      	nop
 800433c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800433e:	bc08      	pop	{r3}
 8004340:	469e      	mov	lr, r3
 8004342:	4770      	bx	lr

08004344 <_fini>:
 8004344:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004346:	bf00      	nop
 8004348:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800434a:	bc08      	pop	{r3}
 800434c:	469e      	mov	lr, r3
 800434e:	4770      	bx	lr
